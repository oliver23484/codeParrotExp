{"repo_name":"ahmedbodi\/AutobahnPython","path":"examples\/asyncio\/websocket\/echo\/client_coroutines.py","copies":"13","size":"2044","content":"###############################################################################\n##\n##  Copyright (C) 2013-2014 Tavendo GmbH\n##\n##  Licensed under the Apache License, Version 2.0 (the \"License\");\n##  you may not use this file except in compliance with the License.\n##  You may obtain a copy of the License at\n##\n##      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n##\n##  Unless required by applicable law or agreed to in writing, software\n##  distributed under the License is distributed on an \"AS IS\" BASIS,\n##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n##  See the License for the specific language governing permissions and\n##  limitations under the License.\n##\n###############################################################################\n\nfrom autobahn.asyncio.websocket import WebSocketClientProtocol, \\\n                                       WebSocketClientFactory\n\nimport asyncio\n\n\n\nclass MyClientProtocol(WebSocketClientProtocol):\n\n   def onConnect(self, response):\n      print(\"Server connected: {0}\".format(response.peer))\n\n   @asyncio.coroutine\n   def onOpen(self):\n      print(\"WebSocket connection open.\")\n\n      ## start sending messages every second ..\n      while True:\n         self.sendMessage(u\"Hello, world!\".encode('utf8'))\n         self.sendMessage(b\"\\x00\\x01\\x03\\x04\", isBinary = True)\n         yield from asyncio.sleep(1)\n\n   def onMessage(self, payload, isBinary):\n      if isBinary:\n         print(\"Binary message received: {0} bytes\".format(len(payload)))\n      else:\n         print(\"Text message received: {0}\".format(payload.decode('utf8')))\n\n   def onClose(self, wasClean, code, reason):\n      print(\"WebSocket connection closed: {0}\".format(reason))\n\n\n\nif __name__ == '__main__':\n\n   import asyncio\n\n   factory = WebSocketClientFactory(\"ws:\/\/localhost:9000\", debug = False)\n   factory.protocol = MyClientProtocol\n\n   loop = asyncio.get_event_loop()\n   coro = loop.create_connection(factory, '127.0.0.1', 9000)\n   loop.run_until_complete(coro)\n   loop.run_forever()\n   loop.close()\n","license":"apache-2.0","hash":7822061744094950801,"line_mean":31.4444444444,"line_max":79,"alpha_frac":0.6232876712,"autogenerated":false}
{"repo_name":"ifduyue\/django","path":"django\/core\/checks\/registry.py","copies":"13","size":"3108","content":"from itertools import chain\n\nfrom django.utils.itercompat import is_iterable\n\n\nclass Tags:\n    \"\"\"\n    Built-in tags for internal checks.\n    \"\"\"\n    admin = 'admin'\n    caches = 'caches'\n    compatibility = 'compatibility'\n    database = 'database'\n    models = 'models'\n    security = 'security'\n    signals = 'signals'\n    templates = 'templates'\n    urls = 'urls'\n\n\nclass CheckRegistry:\n\n    def __init__(self):\n        self.registered_checks = set()\n        self.deployment_checks = set()\n\n    def register(self, check=None, *tags, **kwargs):\n        \"\"\"\n        Can be used as a function or a decorator. Register given function\n        `f` labeled with given `tags`. The function should receive **kwargs\n        and return list of Errors and Warnings.\n\n        Example::\n\n            registry = CheckRegistry()\n            @registry.register('mytag', 'anothertag')\n            def my_check(apps, **kwargs):\n                # ... perform checks and collect `errors` ...\n                return errors\n            # or\n            registry.register(my_check, 'mytag', 'anothertag')\n        \"\"\"\n        kwargs.setdefault('deploy', False)\n\n        def inner(check):\n            check.tags = tags\n            checks = self.deployment_checks if kwargs['deploy'] else self.registered_checks\n            checks.add(check)\n            return check\n\n        if callable(check):\n            return inner(check)\n        else:\n            if check:\n                tags += (check, )\n            return inner\n\n    def run_checks(self, app_configs=None, tags=None, include_deployment_checks=False):\n        \"\"\"\n        Run all registered checks and return list of Errors and Warnings.\n        \"\"\"\n        errors = []\n        checks = self.get_checks(include_deployment_checks)\n\n        if tags is not None:\n            checks = [check for check in checks if not set(check.tags).isdisjoint(tags)]\n        else:\n            # By default, 'database'-tagged checks are not run as they do more\n            # than mere static code analysis.\n            checks = [check for check in checks if Tags.database not in check.tags]\n\n        for check in checks:\n            new_errors = check(app_configs=app_configs)\n            assert is_iterable(new_errors), (\n                \"The function %r did not return a list. All functions registered \"\n                \"with the checks registry must return a list.\" % check)\n            errors.extend(new_errors)\n        return errors\n\n    def tag_exists(self, tag, include_deployment_checks=False):\n        return tag in self.tags_available(include_deployment_checks)\n\n    def tags_available(self, deployment_checks=False):\n        return set(chain.from_iterable(\n            check.tags for check in self.get_checks(deployment_checks)\n        ))\n\n    def get_checks(self, include_deployment_checks=False):\n        checks = list(self.registered_checks)\n        if include_deployment_checks:\n            checks.extend(self.deployment_checks)\n        return checks\n\n\nregistry = CheckRegistry()\nregister = registry.register\nrun_checks = registry.run_checks\ntag_exists = registry.tag_exists\n","license":"bsd-3-clause","hash":-2035686896372967697,"line_mean":30.7142857143,"line_max":91,"alpha_frac":0.6023166023,"autogenerated":false}
{"repo_name":"kmike\/scikit-learn","path":"sklearn\/utils\/__init__.py","copies":"3","size":"10094","content":"\"\"\"\nThe :mod:`sklearn.utils` module includes various utilites.\n\"\"\"\n\nfrom collections import Sequence\n\nimport numpy as np\nfrom scipy.sparse import issparse\nimport warnings\n\nfrom .murmurhash import murmurhash3_32\nfrom .validation import (as_float_array, check_arrays, safe_asarray,\n                         assert_all_finite, array2d, atleast2d_or_csc,\n                         atleast2d_or_csr, warn_if_not_float,\n                         check_random_state)\nfrom .class_weight import compute_class_weight\n\n__all__ = [\"murmurhash3_32\", \"as_float_array\", \"check_arrays\", \"safe_asarray\",\n           \"assert_all_finite\", \"array2d\", \"atleast2d_or_csc\",\n           \"atleast2d_or_csr\", \"warn_if_not_float\", \"check_random_state\",\n           \"compute_class_weight\"]\n\n# Make sure that DeprecationWarning get printed\nwarnings.simplefilter(\"always\", DeprecationWarning)\n\n\nclass deprecated(object):\n    \"\"\"Decorator to mark a function or class as deprecated.\n\n    Issue a warning when the function is called\/the class is instantiated and\n    adds a warning to the docstring.\n\n    The optional extra argument will be appended to the deprecation message\n    and the docstring. Note: to use this with the default value for extra, put\n    in an empty of parentheses:\n\n    >>> from sklearn.utils import deprecated\n    >>> deprecated() # doctest: +ELLIPSIS\n    <sklearn.utils.deprecated object at ...>\n\n    >>> @deprecated()\n    ... def some_function(): pass\n    \"\"\"\n\n    # Adapted from http:\/\/wiki.python.org\/moin\/PythonDecoratorLibrary,\n    # but with many changes.\n\n    def __init__(self, extra=''):\n        \"\"\"\n        Parameters\n        ----------\n        extra: string\n          to be added to the deprecation messages\n\n        \"\"\"\n        self.extra = extra\n\n    def __call__(self, obj):\n        if isinstance(obj, type):\n            return self._decorate_class(obj)\n        else:\n            return self._decorate_fun(obj)\n\n    def _decorate_class(self, cls):\n        msg = \"Class %s is deprecated\" % cls.__name__\n        if self.extra:\n            msg += \"; %s\" % self.extra\n\n        # FIXME: we should probably reset __new__ for full generality\n        init = cls.__init__\n\n        def wrapped(*args, **kwargs):\n            warnings.warn(msg, category=DeprecationWarning)\n            return init(*args, **kwargs)\n        cls.__init__ = wrapped\n\n        wrapped.__name__ = '__init__'\n        wrapped.__doc__ = self._update_doc(init.__doc__)\n        wrapped.deprecated_original = init\n\n        return cls\n\n    def _decorate_fun(self, fun):\n        \"\"\"Decorate function fun\"\"\"\n\n        msg = \"Function %s is deprecated\" % fun.__name__\n        if self.extra:\n            msg += \"; %s\" % self.extra\n\n        def wrapped(*args, **kwargs):\n            warnings.warn(msg, category=DeprecationWarning)\n            return fun(*args, **kwargs)\n\n        wrapped.__name__ = fun.__name__\n        wrapped.__dict__ = fun.__dict__\n        wrapped.__doc__ = self._update_doc(fun.__doc__)\n\n        return wrapped\n\n    def _update_doc(self, olddoc):\n        newdoc = \"DEPRECATED\"\n        if self.extra:\n            newdoc = \"%s: %s\" % (newdoc, self.extra)\n        if olddoc:\n            newdoc = \"%s\\n\\n%s\" % (newdoc, olddoc)\n        return newdoc\n\n\ndef safe_mask(X, mask):\n    \"\"\"Return a mask which is safe to use on X.\n\n    Parameters\n    ----------\n    X : {array-like, sparse matrix}\n        Data on which to apply mask.\n\n    mask: array\n        Mask to be used on X.\n\n    Returns\n    -------\n        mask\n    \"\"\"\n    mask = np.asanyarray(mask)\n    if np.issubdtype(mask.dtype, np.int):\n        return mask\n\n    if hasattr(X, \"toarray\"):\n        ind = np.arange(mask.shape[0])\n        mask = ind[mask]\n    return mask\n\n\ndef resample(*arrays, **options):\n    \"\"\"Resample arrays or sparse matrices in a consistent way\n\n    The default strategy implements one step of the bootstrapping\n    procedure.\n\n    Parameters\n    ----------\n    `*arrays` : sequence of arrays or scipy.sparse matrices with same shape[0]\n\n    replace : boolean, True by default\n        Implements resampling with replacement. If False, this will implement\n        (sliced) random permutations.\n\n    n_samples : int, None by default\n        Number of samples to generate. If left to None this is\n        automatically set to the first dimension of the arrays.\n\n    random_state : int or RandomState instance\n        Control the shuffling for reproducible behavior.\n\n    Returns\n    -------\n    Sequence of resampled views of the collections. The original arrays are\n    not impacted.\n\n    Examples\n    --------\n    It is possible to mix sparse and dense arrays in the same run::\n\n      >>> X = [[1., 0.], [2., 1.], [0., 0.]]\n      >>> y = np.array([0, 1, 2])\n\n      >>> from scipy.sparse import coo_matrix\n      >>> X_sparse = coo_matrix(X)\n\n      >>> from sklearn.utils import resample\n      >>> X, X_sparse, y = resample(X, X_sparse, y, random_state=0)\n      >>> X\n      array([[ 1.,  0.],\n             [ 2.,  1.],\n             [ 1.,  0.]])\n\n      >>> X_sparse                   # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\n      <3x2 sparse matrix of type '<... 'numpy.float64'>'\n          with 4 stored elements in Compressed Sparse Row format>\n\n      >>> X_sparse.toarray()\n      array([[ 1.,  0.],\n             [ 2.,  1.],\n             [ 1.,  0.]])\n\n      >>> y\n      array([0, 1, 0])\n\n      >>> resample(y, n_samples=2, random_state=0)\n      array([0, 1])\n\n\n    See also\n    --------\n    :class:`sklearn.cross_validation.Bootstrap`\n    :func:`sklearn.utils.shuffle`\n    \"\"\"\n    random_state = check_random_state(options.pop('random_state', None))\n    replace = options.pop('replace', True)\n    max_n_samples = options.pop('n_samples', None)\n    if options:\n        raise ValueError(\"Unexpected kw arguments: %r\" % options.keys())\n\n    if len(arrays) == 0:\n        return None\n\n    first = arrays[0]\n    n_samples = first.shape[0] if hasattr(first, 'shape') else len(first)\n\n    if max_n_samples is None:\n        max_n_samples = n_samples\n\n    if max_n_samples > n_samples:\n        raise ValueError(\"Cannot sample %d out of arrays with dim %d\" % (\n            max_n_samples, n_samples))\n\n    arrays = check_arrays(*arrays, sparse_format='csr')\n\n    if replace:\n        indices = random_state.randint(0, n_samples, size=(max_n_samples,))\n    else:\n        indices = np.arange(n_samples)\n        random_state.shuffle(indices)\n        indices = indices[:max_n_samples]\n\n    resampled_arrays = []\n\n    for array in arrays:\n        array = array[indices]\n        resampled_arrays.append(array)\n\n    if len(resampled_arrays) == 1:\n        # syntactic sugar for the unit argument case\n        return resampled_arrays[0]\n    else:\n        return resampled_arrays\n\n\ndef shuffle(*arrays, **options):\n    \"\"\"Shuffle arrays or sparse matrices in a consistent way\n\n    This is a convenience alias to ``resample(*arrays, replace=False)`` to do\n    random permutations of the collections.\n\n    Parameters\n    ----------\n    `*arrays` : sequence of arrays or scipy.sparse matrices with same shape[0]\n\n    random_state : int or RandomState instance\n        Control the shuffling for reproducible behavior.\n\n    n_samples : int, None by default\n        Number of samples to generate. If left to None this is\n        automatically set to the first dimension of the arrays.\n\n    Returns\n    -------\n    Sequence of shuffled views of the collections. The original arrays are\n    not impacted.\n\n    Examples\n    --------\n    It is possible to mix sparse and dense arrays in the same run::\n\n      >>> X = [[1., 0.], [2., 1.], [0., 0.]]\n      >>> y = np.array([0, 1, 2])\n\n      >>> from scipy.sparse import coo_matrix\n      >>> X_sparse = coo_matrix(X)\n\n      >>> from sklearn.utils import shuffle\n      >>> X, X_sparse, y = shuffle(X, X_sparse, y, random_state=0)\n      >>> X\n      array([[ 0.,  0.],\n             [ 2.,  1.],\n             [ 1.,  0.]])\n\n      >>> X_sparse                   # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\n      <3x2 sparse matrix of type '<... 'numpy.float64'>'\n          with 3 stored elements in Compressed Sparse Row format>\n\n      >>> X_sparse.toarray()\n      array([[ 0.,  0.],\n             [ 2.,  1.],\n             [ 1.,  0.]])\n\n      >>> y\n      array([2, 1, 0])\n\n      >>> shuffle(y, n_samples=2, random_state=0)\n      array([0, 1])\n\n    See also\n    --------\n    :func:`sklearn.utils.resample`\n    \"\"\"\n    options['replace'] = False\n    return resample(*arrays, **options)\n\n\ndef safe_sqr(X, copy=True):\n    \"\"\"Element wise squaring of array-likes and sparse matrices.\n\n    Parameters\n    ----------\n    X : array like, matrix, sparse matrix\n\n    Returns\n    -------\n    X ** 2 : element wise square\n    \"\"\"\n    X = safe_asarray(X)\n    if issparse(X):\n        if copy:\n            X = X.copy()\n        X.data **= 2\n    else:\n        if copy:\n            X = X ** 2\n        else:\n            X **= 2\n    return X\n\n\ndef gen_even_slices(n, n_packs):\n    \"\"\"Generator to create n_packs slices going up to n.\n\n    Examples\n    --------\n    >>> from sklearn.utils import gen_even_slices\n    >>> list(gen_even_slices(10, 1))\n    [slice(0, 10, None)]\n    >>> list(gen_even_slices(10, 10))                     #doctest: +ELLIPSIS\n    [slice(0, 1, None), slice(1, 2, None), ..., slice(9, 10, None)]\n    >>> list(gen_even_slices(10, 5))                      #doctest: +ELLIPSIS\n    [slice(0, 2, None), slice(2, 4, None), ..., slice(8, 10, None)]\n    >>> list(gen_even_slices(10, 3))\n    [slice(0, 4, None), slice(4, 7, None), slice(7, 10, None)]\n    \"\"\"\n    start = 0\n    for pack_num in range(n_packs):\n        this_n = n \/\/ n_packs\n        if pack_num < n % n_packs:\n            this_n += 1\n        if this_n > 0:\n            end = start + this_n\n            yield slice(start, end, None)\n            start = end\n\n\ndef tosequence(x):\n    \"\"\"Cast iterable x to a Sequence, avoiding a copy if possible.\"\"\"\n    if isinstance(x, np.ndarray):\n        return np.asarray(x)\n    elif isinstance(x, Sequence):\n        return x\n    else:\n        return list(x)\n\n\nclass ConvergenceWarning(Warning):\n    \"Custom warning to capture convergence problems\"\n","license":"bsd-3-clause","hash":2334709577611160651,"line_mean":26.8839779006,"line_max":79,"alpha_frac":0.5680602338,"autogenerated":false}
{"repo_name":"houlixin\/BBB-TISDK","path":"linux-devkit\/sysroots\/i686-arago-linux\/usr\/lib\/python2.7\/encodings\/cp1250.py","copies":"593","size":"13942","content":"\"\"\" Python Character Mapping Codec cp1250 generated from 'MAPPINGS\/VENDORS\/MICSFT\/WINDOWS\/CP1250.TXT' with gencodec.py.\n\n\"\"\"#\"\n\nimport codecs\n\n### Codec APIs\n\nclass Codec(codecs.Codec):\n\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\n\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\n\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\n\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n\n### encodings module API\n\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1250',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n\n\n### Decoding Table\n\ndecoding_table = (\n    u'\\x00'     #  0x00 -> NULL\n    u'\\x01'     #  0x01 -> START OF HEADING\n    u'\\x02'     #  0x02 -> START OF TEXT\n    u'\\x03'     #  0x03 -> END OF TEXT\n    u'\\x04'     #  0x04 -> END OF TRANSMISSION\n    u'\\x05'     #  0x05 -> ENQUIRY\n    u'\\x06'     #  0x06 -> ACKNOWLEDGE\n    u'\\x07'     #  0x07 -> BELL\n    u'\\x08'     #  0x08 -> BACKSPACE\n    u'\\t'       #  0x09 -> HORIZONTAL TABULATION\n    u'\\n'       #  0x0A -> LINE FEED\n    u'\\x0b'     #  0x0B -> VERTICAL TABULATION\n    u'\\x0c'     #  0x0C -> FORM FEED\n    u'\\r'       #  0x0D -> CARRIAGE RETURN\n    u'\\x0e'     #  0x0E -> SHIFT OUT\n    u'\\x0f'     #  0x0F -> SHIFT IN\n    u'\\x10'     #  0x10 -> DATA LINK ESCAPE\n    u'\\x11'     #  0x11 -> DEVICE CONTROL ONE\n    u'\\x12'     #  0x12 -> DEVICE CONTROL TWO\n    u'\\x13'     #  0x13 -> DEVICE CONTROL THREE\n    u'\\x14'     #  0x14 -> DEVICE CONTROL FOUR\n    u'\\x15'     #  0x15 -> NEGATIVE ACKNOWLEDGE\n    u'\\x16'     #  0x16 -> SYNCHRONOUS IDLE\n    u'\\x17'     #  0x17 -> END OF TRANSMISSION BLOCK\n    u'\\x18'     #  0x18 -> CANCEL\n    u'\\x19'     #  0x19 -> END OF MEDIUM\n    u'\\x1a'     #  0x1A -> SUBSTITUTE\n    u'\\x1b'     #  0x1B -> ESCAPE\n    u'\\x1c'     #  0x1C -> FILE SEPARATOR\n    u'\\x1d'     #  0x1D -> GROUP SEPARATOR\n    u'\\x1e'     #  0x1E -> RECORD SEPARATOR\n    u'\\x1f'     #  0x1F -> UNIT SEPARATOR\n    u' '        #  0x20 -> SPACE\n    u'!'        #  0x21 -> EXCLAMATION MARK\n    u'\"'        #  0x22 -> QUOTATION MARK\n    u'#'        #  0x23 -> NUMBER SIGN\n    u'$'        #  0x24 -> DOLLAR SIGN\n    u'%'        #  0x25 -> PERCENT SIGN\n    u'&'        #  0x26 -> AMPERSAND\n    u\"'\"        #  0x27 -> APOSTROPHE\n    u'('        #  0x28 -> LEFT PARENTHESIS\n    u')'        #  0x29 -> RIGHT PARENTHESIS\n    u'*'        #  0x2A -> ASTERISK\n    u'+'        #  0x2B -> PLUS SIGN\n    u','        #  0x2C -> COMMA\n    u'-'        #  0x2D -> HYPHEN-MINUS\n    u'.'        #  0x2E -> FULL STOP\n    u'\/'        #  0x2F -> SOLIDUS\n    u'0'        #  0x30 -> DIGIT ZERO\n    u'1'        #  0x31 -> DIGIT ONE\n    u'2'        #  0x32 -> DIGIT TWO\n    u'3'        #  0x33 -> DIGIT THREE\n    u'4'        #  0x34 -> DIGIT FOUR\n    u'5'        #  0x35 -> DIGIT FIVE\n    u'6'        #  0x36 -> DIGIT SIX\n    u'7'        #  0x37 -> DIGIT SEVEN\n    u'8'        #  0x38 -> DIGIT EIGHT\n    u'9'        #  0x39 -> DIGIT NINE\n    u':'        #  0x3A -> COLON\n    u';'        #  0x3B -> SEMICOLON\n    u'<'        #  0x3C -> LESS-THAN SIGN\n    u'='        #  0x3D -> EQUALS SIGN\n    u'>'        #  0x3E -> GREATER-THAN SIGN\n    u'?'        #  0x3F -> QUESTION MARK\n    u'@'        #  0x40 -> COMMERCIAL AT\n    u'A'        #  0x41 -> LATIN CAPITAL LETTER A\n    u'B'        #  0x42 -> LATIN CAPITAL LETTER B\n    u'C'        #  0x43 -> LATIN CAPITAL LETTER C\n    u'D'        #  0x44 -> LATIN CAPITAL LETTER D\n    u'E'        #  0x45 -> LATIN CAPITAL LETTER E\n    u'F'        #  0x46 -> LATIN CAPITAL LETTER F\n    u'G'        #  0x47 -> LATIN CAPITAL LETTER G\n    u'H'        #  0x48 -> LATIN CAPITAL LETTER H\n    u'I'        #  0x49 -> LATIN CAPITAL LETTER I\n    u'J'        #  0x4A -> LATIN CAPITAL LETTER J\n    u'K'        #  0x4B -> LATIN CAPITAL LETTER K\n    u'L'        #  0x4C -> LATIN CAPITAL LETTER L\n    u'M'        #  0x4D -> LATIN CAPITAL LETTER M\n    u'N'        #  0x4E -> LATIN CAPITAL LETTER N\n    u'O'        #  0x4F -> LATIN CAPITAL LETTER O\n    u'P'        #  0x50 -> LATIN CAPITAL LETTER P\n    u'Q'        #  0x51 -> LATIN CAPITAL LETTER Q\n    u'R'        #  0x52 -> LATIN CAPITAL LETTER R\n    u'S'        #  0x53 -> LATIN CAPITAL LETTER S\n    u'T'        #  0x54 -> LATIN CAPITAL LETTER T\n    u'U'        #  0x55 -> LATIN CAPITAL LETTER U\n    u'V'        #  0x56 -> LATIN CAPITAL LETTER V\n    u'W'        #  0x57 -> LATIN CAPITAL LETTER W\n    u'X'        #  0x58 -> LATIN CAPITAL LETTER X\n    u'Y'        #  0x59 -> LATIN CAPITAL LETTER Y\n    u'Z'        #  0x5A -> LATIN CAPITAL LETTER Z\n    u'['        #  0x5B -> LEFT SQUARE BRACKET\n    u'\\\\'       #  0x5C -> REVERSE SOLIDUS\n    u']'        #  0x5D -> RIGHT SQUARE BRACKET\n    u'^'        #  0x5E -> CIRCUMFLEX ACCENT\n    u'_'        #  0x5F -> LOW LINE\n    u'`'        #  0x60 -> GRAVE ACCENT\n    u'a'        #  0x61 -> LATIN SMALL LETTER A\n    u'b'        #  0x62 -> LATIN SMALL LETTER B\n    u'c'        #  0x63 -> LATIN SMALL LETTER C\n    u'd'        #  0x64 -> LATIN SMALL LETTER D\n    u'e'        #  0x65 -> LATIN SMALL LETTER E\n    u'f'        #  0x66 -> LATIN SMALL LETTER F\n    u'g'        #  0x67 -> LATIN SMALL LETTER G\n    u'h'        #  0x68 -> LATIN SMALL LETTER H\n    u'i'        #  0x69 -> LATIN SMALL LETTER I\n    u'j'        #  0x6A -> LATIN SMALL LETTER J\n    u'k'        #  0x6B -> LATIN SMALL LETTER K\n    u'l'        #  0x6C -> LATIN SMALL LETTER L\n    u'm'        #  0x6D -> LATIN SMALL LETTER M\n    u'n'        #  0x6E -> LATIN SMALL LETTER N\n    u'o'        #  0x6F -> LATIN SMALL LETTER O\n    u'p'        #  0x70 -> LATIN SMALL LETTER P\n    u'q'        #  0x71 -> LATIN SMALL LETTER Q\n    u'r'        #  0x72 -> LATIN SMALL LETTER R\n    u's'        #  0x73 -> LATIN SMALL LETTER S\n    u't'        #  0x74 -> LATIN SMALL LETTER T\n    u'u'        #  0x75 -> LATIN SMALL LETTER U\n    u'v'        #  0x76 -> LATIN SMALL LETTER V\n    u'w'        #  0x77 -> LATIN SMALL LETTER W\n    u'x'        #  0x78 -> LATIN SMALL LETTER X\n    u'y'        #  0x79 -> LATIN SMALL LETTER Y\n    u'z'        #  0x7A -> LATIN SMALL LETTER Z\n    u'{'        #  0x7B -> LEFT CURLY BRACKET\n    u'|'        #  0x7C -> VERTICAL LINE\n    u'}'        #  0x7D -> RIGHT CURLY BRACKET\n    u'~'        #  0x7E -> TILDE\n    u'\\x7f'     #  0x7F -> DELETE\n    u'\\u20ac'   #  0x80 -> EURO SIGN\n    u'\\ufffe'   #  0x81 -> UNDEFINED\n    u'\\u201a'   #  0x82 -> SINGLE LOW-9 QUOTATION MARK\n    u'\\ufffe'   #  0x83 -> UNDEFINED\n    u'\\u201e'   #  0x84 -> DOUBLE LOW-9 QUOTATION MARK\n    u'\\u2026'   #  0x85 -> HORIZONTAL ELLIPSIS\n    u'\\u2020'   #  0x86 -> DAGGER\n    u'\\u2021'   #  0x87 -> DOUBLE DAGGER\n    u'\\ufffe'   #  0x88 -> UNDEFINED\n    u'\\u2030'   #  0x89 -> PER MILLE SIGN\n    u'\\u0160'   #  0x8A -> LATIN CAPITAL LETTER S WITH CARON\n    u'\\u2039'   #  0x8B -> SINGLE LEFT-POINTING ANGLE QUOTATION MARK\n    u'\\u015a'   #  0x8C -> LATIN CAPITAL LETTER S WITH ACUTE\n    u'\\u0164'   #  0x8D -> LATIN CAPITAL LETTER T WITH CARON\n    u'\\u017d'   #  0x8E -> LATIN CAPITAL LETTER Z WITH CARON\n    u'\\u0179'   #  0x8F -> LATIN CAPITAL LETTER Z WITH ACUTE\n    u'\\ufffe'   #  0x90 -> UNDEFINED\n    u'\\u2018'   #  0x91 -> LEFT SINGLE QUOTATION MARK\n    u'\\u2019'   #  0x92 -> RIGHT SINGLE QUOTATION MARK\n    u'\\u201c'   #  0x93 -> LEFT DOUBLE QUOTATION MARK\n    u'\\u201d'   #  0x94 -> RIGHT DOUBLE QUOTATION MARK\n    u'\\u2022'   #  0x95 -> BULLET\n    u'\\u2013'   #  0x96 -> EN DASH\n    u'\\u2014'   #  0x97 -> EM DASH\n    u'\\ufffe'   #  0x98 -> UNDEFINED\n    u'\\u2122'   #  0x99 -> TRADE MARK SIGN\n    u'\\u0161'   #  0x9A -> LATIN SMALL LETTER S WITH CARON\n    u'\\u203a'   #  0x9B -> SINGLE RIGHT-POINTING ANGLE QUOTATION MARK\n    u'\\u015b'   #  0x9C -> LATIN SMALL LETTER S WITH ACUTE\n    u'\\u0165'   #  0x9D -> LATIN SMALL LETTER T WITH CARON\n    u'\\u017e'   #  0x9E -> LATIN SMALL LETTER Z WITH CARON\n    u'\\u017a'   #  0x9F -> LATIN SMALL LETTER Z WITH ACUTE\n    u'\\xa0'     #  0xA0 -> NO-BREAK SPACE\n    u'\\u02c7'   #  0xA1 -> CARON\n    u'\\u02d8'   #  0xA2 -> BREVE\n    u'\\u0141'   #  0xA3 -> LATIN CAPITAL LETTER L WITH STROKE\n    u'\\xa4'     #  0xA4 -> CURRENCY SIGN\n    u'\\u0104'   #  0xA5 -> LATIN CAPITAL LETTER A WITH OGONEK\n    u'\\xa6'     #  0xA6 -> BROKEN BAR\n    u'\\xa7'     #  0xA7 -> SECTION SIGN\n    u'\\xa8'     #  0xA8 -> DIAERESIS\n    u'\\xa9'     #  0xA9 -> COPYRIGHT SIGN\n    u'\\u015e'   #  0xAA -> LATIN CAPITAL LETTER S WITH CEDILLA\n    u'\\xab'     #  0xAB -> LEFT-POINTING DOUBLE ANGLE QUOTATION MARK\n    u'\\xac'     #  0xAC -> NOT SIGN\n    u'\\xad'     #  0xAD -> SOFT HYPHEN\n    u'\\xae'     #  0xAE -> REGISTERED SIGN\n    u'\\u017b'   #  0xAF -> LATIN CAPITAL LETTER Z WITH DOT ABOVE\n    u'\\xb0'     #  0xB0 -> DEGREE SIGN\n    u'\\xb1'     #  0xB1 -> PLUS-MINUS SIGN\n    u'\\u02db'   #  0xB2 -> OGONEK\n    u'\\u0142'   #  0xB3 -> LATIN SMALL LETTER L WITH STROKE\n    u'\\xb4'     #  0xB4 -> ACUTE ACCENT\n    u'\\xb5'     #  0xB5 -> MICRO SIGN\n    u'\\xb6'     #  0xB6 -> PILCROW SIGN\n    u'\\xb7'     #  0xB7 -> MIDDLE DOT\n    u'\\xb8'     #  0xB8 -> CEDILLA\n    u'\\u0105'   #  0xB9 -> LATIN SMALL LETTER A WITH OGONEK\n    u'\\u015f'   #  0xBA -> LATIN SMALL LETTER S WITH CEDILLA\n    u'\\xbb'     #  0xBB -> RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK\n    u'\\u013d'   #  0xBC -> LATIN CAPITAL LETTER L WITH CARON\n    u'\\u02dd'   #  0xBD -> DOUBLE ACUTE ACCENT\n    u'\\u013e'   #  0xBE -> LATIN SMALL LETTER L WITH CARON\n    u'\\u017c'   #  0xBF -> LATIN SMALL LETTER Z WITH DOT ABOVE\n    u'\\u0154'   #  0xC0 -> LATIN CAPITAL LETTER R WITH ACUTE\n    u'\\xc1'     #  0xC1 -> LATIN CAPITAL LETTER A WITH ACUTE\n    u'\\xc2'     #  0xC2 -> LATIN CAPITAL LETTER A WITH CIRCUMFLEX\n    u'\\u0102'   #  0xC3 -> LATIN CAPITAL LETTER A WITH BREVE\n    u'\\xc4'     #  0xC4 -> LATIN CAPITAL LETTER A WITH DIAERESIS\n    u'\\u0139'   #  0xC5 -> LATIN CAPITAL LETTER L WITH ACUTE\n    u'\\u0106'   #  0xC6 -> LATIN CAPITAL LETTER C WITH ACUTE\n    u'\\xc7'     #  0xC7 -> LATIN CAPITAL LETTER C WITH CEDILLA\n    u'\\u010c'   #  0xC8 -> LATIN CAPITAL LETTER C WITH CARON\n    u'\\xc9'     #  0xC9 -> LATIN CAPITAL LETTER E WITH ACUTE\n    u'\\u0118'   #  0xCA -> LATIN CAPITAL LETTER E WITH OGONEK\n    u'\\xcb'     #  0xCB -> LATIN CAPITAL LETTER E WITH DIAERESIS\n    u'\\u011a'   #  0xCC -> LATIN CAPITAL LETTER E WITH CARON\n    u'\\xcd'     #  0xCD -> LATIN CAPITAL LETTER I WITH ACUTE\n    u'\\xce'     #  0xCE -> LATIN CAPITAL LETTER I WITH CIRCUMFLEX\n    u'\\u010e'   #  0xCF -> LATIN CAPITAL LETTER D WITH CARON\n    u'\\u0110'   #  0xD0 -> LATIN CAPITAL LETTER D WITH STROKE\n    u'\\u0143'   #  0xD1 -> LATIN CAPITAL LETTER N WITH ACUTE\n    u'\\u0147'   #  0xD2 -> LATIN CAPITAL LETTER N WITH CARON\n    u'\\xd3'     #  0xD3 -> LATIN CAPITAL LETTER O WITH ACUTE\n    u'\\xd4'     #  0xD4 -> LATIN CAPITAL LETTER O WITH CIRCUMFLEX\n    u'\\u0150'   #  0xD5 -> LATIN CAPITAL LETTER O WITH DOUBLE ACUTE\n    u'\\xd6'     #  0xD6 -> LATIN CAPITAL LETTER O WITH DIAERESIS\n    u'\\xd7'     #  0xD7 -> MULTIPLICATION SIGN\n    u'\\u0158'   #  0xD8 -> LATIN CAPITAL LETTER R WITH CARON\n    u'\\u016e'   #  0xD9 -> LATIN CAPITAL LETTER U WITH RING ABOVE\n    u'\\xda'     #  0xDA -> LATIN CAPITAL LETTER U WITH ACUTE\n    u'\\u0170'   #  0xDB -> LATIN CAPITAL LETTER U WITH DOUBLE ACUTE\n    u'\\xdc'     #  0xDC -> LATIN CAPITAL LETTER U WITH DIAERESIS\n    u'\\xdd'     #  0xDD -> LATIN CAPITAL LETTER Y WITH ACUTE\n    u'\\u0162'   #  0xDE -> LATIN CAPITAL LETTER T WITH CEDILLA\n    u'\\xdf'     #  0xDF -> LATIN SMALL LETTER SHARP S\n    u'\\u0155'   #  0xE0 -> LATIN SMALL LETTER R WITH ACUTE\n    u'\\xe1'     #  0xE1 -> LATIN SMALL LETTER A WITH ACUTE\n    u'\\xe2'     #  0xE2 -> LATIN SMALL LETTER A WITH CIRCUMFLEX\n    u'\\u0103'   #  0xE3 -> LATIN SMALL LETTER A WITH BREVE\n    u'\\xe4'     #  0xE4 -> LATIN SMALL LETTER A WITH DIAERESIS\n    u'\\u013a'   #  0xE5 -> LATIN SMALL LETTER L WITH ACUTE\n    u'\\u0107'   #  0xE6 -> LATIN SMALL LETTER C WITH ACUTE\n    u'\\xe7'     #  0xE7 -> LATIN SMALL LETTER C WITH CEDILLA\n    u'\\u010d'   #  0xE8 -> LATIN SMALL LETTER C WITH CARON\n    u'\\xe9'     #  0xE9 -> LATIN SMALL LETTER E WITH ACUTE\n    u'\\u0119'   #  0xEA -> LATIN SMALL LETTER E WITH OGONEK\n    u'\\xeb'     #  0xEB -> LATIN SMALL LETTER E WITH DIAERESIS\n    u'\\u011b'   #  0xEC -> LATIN SMALL LETTER E WITH CARON\n    u'\\xed'     #  0xED -> LATIN SMALL LETTER I WITH ACUTE\n    u'\\xee'     #  0xEE -> LATIN SMALL LETTER I WITH CIRCUMFLEX\n    u'\\u010f'   #  0xEF -> LATIN SMALL LETTER D WITH CARON\n    u'\\u0111'   #  0xF0 -> LATIN SMALL LETTER D WITH STROKE\n    u'\\u0144'   #  0xF1 -> LATIN SMALL LETTER N WITH ACUTE\n    u'\\u0148'   #  0xF2 -> LATIN SMALL LETTER N WITH CARON\n    u'\\xf3'     #  0xF3 -> LATIN SMALL LETTER O WITH ACUTE\n    u'\\xf4'     #  0xF4 -> LATIN SMALL LETTER O WITH CIRCUMFLEX\n    u'\\u0151'   #  0xF5 -> LATIN SMALL LETTER O WITH DOUBLE ACUTE\n    u'\\xf6'     #  0xF6 -> LATIN SMALL LETTER O WITH DIAERESIS\n    u'\\xf7'     #  0xF7 -> DIVISION SIGN\n    u'\\u0159'   #  0xF8 -> LATIN SMALL LETTER R WITH CARON\n    u'\\u016f'   #  0xF9 -> LATIN SMALL LETTER U WITH RING ABOVE\n    u'\\xfa'     #  0xFA -> LATIN SMALL LETTER U WITH ACUTE\n    u'\\u0171'   #  0xFB -> LATIN SMALL LETTER U WITH DOUBLE ACUTE\n    u'\\xfc'     #  0xFC -> LATIN SMALL LETTER U WITH DIAERESIS\n    u'\\xfd'     #  0xFD -> LATIN SMALL LETTER Y WITH ACUTE\n    u'\\u0163'   #  0xFE -> LATIN SMALL LETTER T WITH CEDILLA\n    u'\\u02d9'   #  0xFF -> DOT ABOVE\n)\n\n### Encoding table\nencoding_table=codecs.charmap_build(decoding_table)\n","license":"gpl-2.0","hash":-6356832018515182181,"line_mean":44.4136807818,"line_max":119,"alpha_frac":0.550351456,"autogenerated":false}
{"repo_name":"dataxu\/ansible","path":"lib\/ansible\/modules\/system\/kernel_blacklist.py","copies":"125","size":"4009","content":"#!\/usr\/bin\/python\n# encoding: utf-8 -*-\n\n# Copyright: (c) 2013, Matthias Vogelgesang <matthias.vogelgesang@gmail.com>\n# GNU General Public License v3.0+ (see COPYING or https:\/\/www.gnu.org\/licenses\/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: kernel_blacklist\nauthor:\n- Matthias Vogelgesang (@matze)\nversion_added: '1.4'\nshort_description: Blacklist kernel modules\ndescription:\n    - Add or remove kernel modules from blacklist.\noptions:\n    name:\n        description:\n            - Name of kernel module to black- or whitelist.\n        required: true\n    state:\n        description:\n            - Whether the module should be present in the blacklist or absent.\n        choices: [ absent, present ]\n        default: present\n    blacklist_file:\n        description:\n            - If specified, use this blacklist file instead of\n              C(\/etc\/modprobe.d\/blacklist-ansible.conf).\n'''\n\nEXAMPLES = '''\n- name: Blacklist the nouveau driver module\n  kernel_blacklist:\n    name: nouveau\n    state: present\n'''\n\nimport os\nimport re\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nclass Blacklist(object):\n    def __init__(self, module, filename, checkmode):\n        self.filename = filename\n        self.module = module\n        self.checkmode = checkmode\n\n    def create_file(self):\n        if not self.checkmode and not os.path.exists(self.filename):\n            open(self.filename, 'a').close()\n            return True\n        elif self.checkmode and not os.path.exists(self.filename):\n            self.filename = os.devnull\n            return True\n        else:\n            return False\n\n    def get_pattern(self):\n        return r'^blacklist\\s*' + self.module + '$'\n\n    def readlines(self):\n        f = open(self.filename, 'r')\n        lines = f.readlines()\n        f.close()\n        return lines\n\n    def module_listed(self):\n        lines = self.readlines()\n        pattern = self.get_pattern()\n\n        for line in lines:\n            stripped = line.strip()\n            if stripped.startswith('#'):\n                continue\n\n            if re.match(pattern, stripped):\n                return True\n\n        return False\n\n    def remove_module(self):\n        lines = self.readlines()\n        pattern = self.get_pattern()\n\n        if self.checkmode:\n            f = open(os.devnull, 'w')\n        else:\n            f = open(self.filename, 'w')\n\n        for line in lines:\n            if not re.match(pattern, line.strip()):\n                f.write(line)\n\n        f.close()\n\n    def add_module(self):\n        if self.checkmode:\n            f = open(os.devnull, 'a')\n        else:\n            f = open(self.filename, 'a')\n\n        f.write('blacklist %s\\n' % self.module)\n\n        f.close()\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(type='str', required=True),\n            state=dict(type='str', default='present', choices=['absent', 'present']),\n            blacklist_file=dict(type='str')\n        ),\n        supports_check_mode=True,\n    )\n\n    args = dict(changed=False, failed=False,\n                name=module.params['name'], state=module.params['state'])\n\n    filename = '\/etc\/modprobe.d\/blacklist-ansible.conf'\n\n    if module.params['blacklist_file']:\n        filename = module.params['blacklist_file']\n\n    blacklist = Blacklist(args['name'], filename, module.check_mode)\n\n    if blacklist.create_file():\n        args['changed'] = True\n    else:\n        args['changed'] = False\n\n    if blacklist.module_listed():\n        if args['state'] == 'absent':\n            blacklist.remove_module()\n            args['changed'] = True\n    else:\n        if args['state'] == 'present':\n            blacklist.add_module()\n            args['changed'] = True\n\n    module.exit_json(**args)\n\n\nif __name__ == '__main__':\n    main()\n","license":"gpl-3.0","hash":8498771084445726761,"line_mean":24.864516129,"line_max":92,"alpha_frac":0.575205787,"autogenerated":false}
{"repo_name":"163gal\/Time-Line","path":"libs_arm\/wx\/_controls.py","copies":"2","size":"332374","content":"# This file was created automatically by SWIG 1.3.29.\n# Don't modify this file, modify the SWIG interface instead.\n\nimport _controls_\nimport new\nnew_instancemethod = new.instancemethod\ndef _swig_setattr_nondynamic(self,class_type,name,value,static=1):\n    if (name == \"thisown\"): return self.this.own(value)\n    if (name == \"this\"):\n        if type(value).__name__ == 'PySwigObject':\n            self.__dict__[name] = value\n            return\n    method = class_type.__swig_setmethods__.get(name,None)\n    if method: return method(self,value)\n    if (not static) or hasattr(self,name):\n        self.__dict__[name] = value\n    else:\n        raise AttributeError(\"You cannot add attributes to %s\" % self)\n\ndef _swig_setattr(self,class_type,name,value):\n    return _swig_setattr_nondynamic(self,class_type,name,value,0)\n\ndef _swig_getattr(self,class_type,name):\n    if (name == \"thisown\"): return self.this.own()\n    method = class_type.__swig_getmethods__.get(name,None)\n    if method: return method(self)\n    raise AttributeError,name\n\ndef _swig_repr(self):\n    try: strthis = \"proxy of \" + self.this.__repr__()\n    except: strthis = \"\"\n    return \"<%s.%s; %s >\" % (self.__class__.__module__, self.__class__.__name__, strthis,)\n\nimport types\ntry:\n    _object = types.ObjectType\n    _newclass = 1\nexcept AttributeError:\n    class _object : pass\n    _newclass = 0\ndel types\n\n\ndef _swig_setattr_nondynamic_method(set):\n    def set_attr(self,name,value):\n        if (name == \"thisown\"): return self.this.own(value)\n        if hasattr(self,name) or (name == \"this\"):\n            set(self,name,value)\n        else:\n            raise AttributeError(\"You cannot add attributes to %s\" % self)\n    return set_attr\n\n\nimport _core\nwx = _core \n#---------------------------------------------------------------------------\n\nBU_LEFT = _controls_.BU_LEFT\nBU_TOP = _controls_.BU_TOP\nBU_RIGHT = _controls_.BU_RIGHT\nBU_BOTTOM = _controls_.BU_BOTTOM\nBU_ALIGN_MASK = _controls_.BU_ALIGN_MASK\nBU_EXACTFIT = _controls_.BU_EXACTFIT\nBU_AUTODRAW = _controls_.BU_AUTODRAW\nBU_NOTEXT = _controls_.BU_NOTEXT\nclass AnyButton(_core.Control):\n    \"\"\"Proxy of C++ AnyButton class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    def __init__(self): raise AttributeError, \"No constructor defined\"\n    __repr__ = _swig_repr\n    def SetBitmap(*args, **kwargs):\n        \"\"\"SetBitmap(self, Bitmap bitmap, int dir=LEFT)\"\"\"\n        return _controls_.AnyButton_SetBitmap(*args, **kwargs)\n\n    def GetBitmap(*args, **kwargs):\n        \"\"\"GetBitmap(self) -> Bitmap\"\"\"\n        return _controls_.AnyButton_GetBitmap(*args, **kwargs)\n\n    Bitmap = property(GetBitmap,SetBitmap) \n    def SetBitmapLabel(*args, **kwargs):\n        \"\"\"SetBitmapLabel(self, Bitmap bitmap)\"\"\"\n        return _controls_.AnyButton_SetBitmapLabel(*args, **kwargs)\n\n    def SetBitmapPressed(*args, **kwargs):\n        \"\"\"SetBitmapPressed(self, Bitmap bitmap)\"\"\"\n        return _controls_.AnyButton_SetBitmapPressed(*args, **kwargs)\n\n    def SetBitmapDisabled(*args, **kwargs):\n        \"\"\"SetBitmapDisabled(self, Bitmap bitmap)\"\"\"\n        return _controls_.AnyButton_SetBitmapDisabled(*args, **kwargs)\n\n    def SetBitmapCurrent(*args, **kwargs):\n        \"\"\"SetBitmapCurrent(self, Bitmap bitmap)\"\"\"\n        return _controls_.AnyButton_SetBitmapCurrent(*args, **kwargs)\n\n    def SetBitmapFocus(*args, **kwargs):\n        \"\"\"SetBitmapFocus(self, Bitmap bitmap)\"\"\"\n        return _controls_.AnyButton_SetBitmapFocus(*args, **kwargs)\n\n    def GetBitmapLabel(*args, **kwargs):\n        \"\"\"GetBitmapLabel(self) -> Bitmap\"\"\"\n        return _controls_.AnyButton_GetBitmapLabel(*args, **kwargs)\n\n    def GetBitmapPressed(*args, **kwargs):\n        \"\"\"GetBitmapPressed(self) -> Bitmap\"\"\"\n        return _controls_.AnyButton_GetBitmapPressed(*args, **kwargs)\n\n    def GetBitmapDisabled(*args, **kwargs):\n        \"\"\"GetBitmapDisabled(self) -> Bitmap\"\"\"\n        return _controls_.AnyButton_GetBitmapDisabled(*args, **kwargs)\n\n    def GetBitmapCurrent(*args, **kwargs):\n        \"\"\"GetBitmapCurrent(self) -> Bitmap\"\"\"\n        return _controls_.AnyButton_GetBitmapCurrent(*args, **kwargs)\n\n    def GetBitmapFocus(*args, **kwargs):\n        \"\"\"GetBitmapFocus(self) -> Bitmap\"\"\"\n        return _controls_.AnyButton_GetBitmapFocus(*args, **kwargs)\n\n    BitmapLabel = property(GetBitmapLabel,SetBitmapLabel) \n    BitmapPressed = property(GetBitmapPressed,SetBitmapPressed) \n    BitmapDisabled = property(GetBitmapDisabled,SetBitmapDisabled) \n    BitmapCurrent = property(GetBitmapCurrent,SetBitmapCurrent) \n    BitmapFocus = property(GetBitmapFocus,SetBitmapFocus) \n    def GetBitmapSelected(*args, **kwargs):\n        \"\"\"GetBitmapSelected(self) -> Bitmap\"\"\"\n        return _controls_.AnyButton_GetBitmapSelected(*args, **kwargs)\n\n    def GetBitmapHover(*args, **kwargs):\n        \"\"\"GetBitmapHover(self) -> Bitmap\"\"\"\n        return _controls_.AnyButton_GetBitmapHover(*args, **kwargs)\n\n    def SetBitmapSelected(*args, **kwargs):\n        \"\"\"SetBitmapSelected(self, Bitmap bitmap)\"\"\"\n        return _controls_.AnyButton_SetBitmapSelected(*args, **kwargs)\n\n    def SetBitmapHover(*args, **kwargs):\n        \"\"\"SetBitmapHover(self, Bitmap bitmap)\"\"\"\n        return _controls_.AnyButton_SetBitmapHover(*args, **kwargs)\n\n    BitmapSelected = property(GetBitmapSelected,SetBitmapSelected) \n    BitmapHover = property(GetBitmapHover,SetBitmapHover) \n    def SetBitmapMargins(*args):\n        \"\"\"\n        SetBitmapMargins(self, int x, int y)\n        SetBitmapMargins(self, Size sz)\n        \"\"\"\n        return _controls_.AnyButton_SetBitmapMargins(*args)\n\n    def GetBitmapMargins(*args, **kwargs):\n        \"\"\"GetBitmapMargins(self) -> Size\"\"\"\n        return _controls_.AnyButton_GetBitmapMargins(*args, **kwargs)\n\n    BitmapMargins = property(GetBitmapMargins,SetBitmapMargins) \n    def SetBitmapPosition(*args, **kwargs):\n        \"\"\"SetBitmapPosition(self, int dir)\"\"\"\n        return _controls_.AnyButton_SetBitmapPosition(*args, **kwargs)\n\n    def DontShowLabel(*args, **kwargs):\n        \"\"\"DontShowLabel(self) -> bool\"\"\"\n        return _controls_.AnyButton_DontShowLabel(*args, **kwargs)\n\n    def ShowsLabel(*args, **kwargs):\n        \"\"\"ShowsLabel(self) -> bool\"\"\"\n        return _controls_.AnyButton_ShowsLabel(*args, **kwargs)\n\n_controls_.AnyButton_swigregister(AnyButton)\ncvar = _controls_.cvar\nButtonNameStr = cvar.ButtonNameStr\n\nclass Button(AnyButton):\n    \"\"\"\n    A button is a control that contains a text string, and is one of the most\n    common elements of a GUI.  It may be placed on a dialog box or panel, or\n    indeed almost any other window.\n    \"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, String label=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, Validator validator=DefaultValidator, \n            String name=ButtonNameStr) -> Button\n\n        Create and show a button.  The preferred way to create standard\n        buttons is to use a standard ID and an empty label.  In this case\n        wxWigets will automatically use a stock label that corresponds to the\n        ID given.  These labels may vary across platforms as the platform\n        itself will provide the label if possible.  In addition, the button\n        will be decorated with stock icons under GTK+ 2.\n        \"\"\"\n        _controls_.Button_swiginit(self,_controls_.new_Button(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, String label=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, Validator validator=DefaultValidator, \n            String name=ButtonNameStr) -> bool\n\n        Acutally create the GUI Button for 2-phase creation.\n        \"\"\"\n        return _controls_.Button_Create(*args, **kwargs)\n\n    def SetAuthNeeded(*args, **kwargs):\n        \"\"\"SetAuthNeeded(self, bool show=True)\"\"\"\n        return _controls_.Button_SetAuthNeeded(*args, **kwargs)\n\n    def GetAuthNeeded(*args, **kwargs):\n        \"\"\"GetAuthNeeded(self) -> bool\"\"\"\n        return _controls_.Button_GetAuthNeeded(*args, **kwargs)\n\n    def SetDefault(*args, **kwargs):\n        \"\"\"\n        SetDefault(self) -> Window\n\n        This sets the button to be the default item for the panel or dialog box.\n        \"\"\"\n        return _controls_.Button_SetDefault(*args, **kwargs)\n\n    def GetDefaultSize(*args, **kwargs):\n        \"\"\"\n        GetDefaultSize() -> Size\n\n        Returns the default button size for this platform.\n        \"\"\"\n        return _controls_.Button_GetDefaultSize(*args, **kwargs)\n\n    GetDefaultSize = staticmethod(GetDefaultSize)\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.Button_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n_controls_.Button_swigregister(Button)\n\ndef PreButton(*args, **kwargs):\n    \"\"\"\n    PreButton() -> Button\n\n    Precreate a Button for 2-phase creation.\n    \"\"\"\n    val = _controls_.new_PreButton(*args, **kwargs)\n    return val\n\ndef Button_GetDefaultSize(*args):\n  \"\"\"\n    Button_GetDefaultSize() -> Size\n\n    Returns the default button size for this platform.\n    \"\"\"\n  return _controls_.Button_GetDefaultSize(*args)\n\ndef Button_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    Button_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.Button_GetClassDefaultAttributes(*args, **kwargs)\n\nclass BitmapButton(Button):\n    \"\"\"\n    A Button that contains a bitmap.  A bitmap button can be supplied with a\n    single bitmap, and wxWidgets will draw all button states using this bitmap. If\n    the application needs more control, additional bitmaps for the selected state,\n    unpressed focused state, and greyed-out state may be supplied.\n    \"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, Bitmap bitmap=wxNullBitmap, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=BU_AUTODRAW, Validator validator=DefaultValidator, \n            String name=ButtonNameStr) -> BitmapButton\n\n        Create and show a button with a bitmap for the label.\n        \"\"\"\n        _controls_.BitmapButton_swiginit(self,_controls_.new_BitmapButton(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, Bitmap bitmap=wxNullBitmap, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=BU_AUTODRAW, Validator validator=DefaultValidator, \n            String name=ButtonNameStr) -> bool\n\n        Acutally create the GUI BitmapButton for 2-phase creation.\n        \"\"\"\n        return _controls_.BitmapButton_Create(*args, **kwargs)\n\n_controls_.BitmapButton_swigregister(BitmapButton)\n\ndef PreBitmapButton(*args, **kwargs):\n    \"\"\"\n    PreBitmapButton() -> BitmapButton\n\n    Precreate a BitmapButton for 2-phase creation.\n    \"\"\"\n    val = _controls_.new_PreBitmapButton(*args, **kwargs)\n    return val\n\n#---------------------------------------------------------------------------\n\nCHK_2STATE = _controls_.CHK_2STATE\nCHK_3STATE = _controls_.CHK_3STATE\nCHK_ALLOW_3RD_STATE_FOR_USER = _controls_.CHK_ALLOW_3RD_STATE_FOR_USER\nclass CheckBox(_core.Control):\n    \"\"\"\n    A checkbox is a labelled box which by default is either on (the\n    checkmark is visible) or off (no checkmark). Optionally (When the\n    wx.CHK_3STATE style flag is set) it can have a third state, called the\n    mixed or undetermined state. Often this is used as a \"Does Not\n    Apply\" state.\n    \"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, String label=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, Validator validator=DefaultValidator, \n            String name=CheckBoxNameStr) -> CheckBox\n\n        Creates and shows a CheckBox control\n        \"\"\"\n        _controls_.CheckBox_swiginit(self,_controls_.new_CheckBox(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, String label=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, Validator validator=DefaultValidator, \n            String name=CheckBoxNameStr) -> bool\n\n        Actually create the GUI CheckBox for 2-phase creation.\n        \"\"\"\n        return _controls_.CheckBox_Create(*args, **kwargs)\n\n    def GetValue(*args, **kwargs):\n        \"\"\"\n        GetValue(self) -> bool\n\n        Gets the state of a 2-state CheckBox.  Returns True if it is checked,\n        False otherwise.\n        \"\"\"\n        return _controls_.CheckBox_GetValue(*args, **kwargs)\n\n    def IsChecked(*args, **kwargs):\n        \"\"\"\n        IsChecked(self) -> bool\n\n        Similar to GetValue, but raises an exception if it is not a 2-state\n        CheckBox.\n        \"\"\"\n        return _controls_.CheckBox_IsChecked(*args, **kwargs)\n\n    def SetValue(*args, **kwargs):\n        \"\"\"\n        SetValue(self, bool state)\n\n        Set the state of a 2-state CheckBox.  Pass True for checked, False for\n        unchecked.\n        \"\"\"\n        return _controls_.CheckBox_SetValue(*args, **kwargs)\n\n    def Get3StateValue(*args, **kwargs):\n        \"\"\"\n        Get3StateValue(self) -> int\n\n        Returns wx.CHK_UNCHECKED when the CheckBox is unchecked,\n        wx.CHK_CHECKED when it is checked and wx.CHK_UNDETERMINED when it's in\n        the undetermined state.  Raises an exceptiion when the function is\n        used with a 2-state CheckBox.\n        \"\"\"\n        return _controls_.CheckBox_Get3StateValue(*args, **kwargs)\n\n    def Set3StateValue(*args, **kwargs):\n        \"\"\"\n        Set3StateValue(self, int state)\n\n        Sets the CheckBox to the given state.  The state parameter can be one\n        of the following: wx.CHK_UNCHECKED (Check is off), wx.CHK_CHECKED (the\n        Check is on) or wx.CHK_UNDETERMINED (Check is mixed). Raises an\n        exception when the CheckBox is a 2-state checkbox and setting the\n        state to wx.CHK_UNDETERMINED.\n        \"\"\"\n        return _controls_.CheckBox_Set3StateValue(*args, **kwargs)\n\n    def Is3State(*args, **kwargs):\n        \"\"\"\n        Is3State(self) -> bool\n\n        Returns whether or not the CheckBox is a 3-state CheckBox.\n        \"\"\"\n        return _controls_.CheckBox_Is3State(*args, **kwargs)\n\n    def Is3rdStateAllowedForUser(*args, **kwargs):\n        \"\"\"\n        Is3rdStateAllowedForUser(self) -> bool\n\n        Returns whether or not the user can set the CheckBox to the third\n        state.\n        \"\"\"\n        return _controls_.CheckBox_Is3rdStateAllowedForUser(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.CheckBox_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n    ThreeStateValue = property(Get3StateValue,Set3StateValue,doc=\"See `Get3StateValue` and `Set3StateValue`\") \n    Value = property(GetValue,SetValue,doc=\"See `GetValue` and `SetValue`\") \n_controls_.CheckBox_swigregister(CheckBox)\nCheckBoxNameStr = cvar.CheckBoxNameStr\n\ndef PreCheckBox(*args, **kwargs):\n    \"\"\"\n    PreCheckBox() -> CheckBox\n\n    Precreate a CheckBox for 2-phase creation.\n    \"\"\"\n    val = _controls_.new_PreCheckBox(*args, **kwargs)\n    return val\n\ndef CheckBox_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    CheckBox_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.CheckBox_GetClassDefaultAttributes(*args, **kwargs)\n\n#---------------------------------------------------------------------------\n\nclass Choice(_core.ControlWithItems):\n    \"\"\"\n    A Choice control is used to select one of a list of strings.\n    Unlike a `wx.ListBox`, only the selection is visible until the\n    user pulls down the menu of choices.\n    \"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize,\n            List choices=EmptyList, long style=0, Validator validator=DefaultValidator,\n            String name=ChoiceNameStr) -> Choice\n\n        Create and show a Choice control\n        \"\"\"\n        _controls_.Choice_swiginit(self,_controls_.new_Choice(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize,\n            List choices=EmptyList, long style=0, Validator validator=DefaultValidator,\n            String name=ChoiceNameStr) -> bool\n\n        Actually create the GUI Choice control for 2-phase creation\n        \"\"\"\n        return _controls_.Choice_Create(*args, **kwargs)\n\n    def GetCurrentSelection(*args, **kwargs):\n        \"\"\"\n        GetCurrentSelection(self) -> int\n\n        Unlike `GetSelection` which only returns the accepted selection value,\n        i.e. the selection in the control once the user closes the dropdown\n        list, this function returns the current selection.  That is, while the\n        dropdown list is shown, it returns the currently selected item in\n        it. When it is not shown, its result is the same as for the other\n        function.\n        \"\"\"\n        return _controls_.Choice_GetCurrentSelection(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.Choice_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n    CurrentSelection = property(GetCurrentSelection,doc=\"See `GetCurrentSelection`\") \n_controls_.Choice_swigregister(Choice)\nChoiceNameStr = cvar.ChoiceNameStr\n\ndef PreChoice(*args, **kwargs):\n    \"\"\"\n    PreChoice() -> Choice\n\n    Precreate a Choice control for 2-phase creation.\n    \"\"\"\n    val = _controls_.new_PreChoice(*args, **kwargs)\n    return val\n\ndef Choice_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    Choice_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.Choice_GetClassDefaultAttributes(*args, **kwargs)\n\n#---------------------------------------------------------------------------\n\nclass ComboBox(_core.Control,_core.ItemContainer,_core.TextEntry):\n    \"\"\"\n    A combobox is like a combination of an edit control and a\n    listbox. It can be displayed as static list with editable or\n    read-only text field; or a drop-down list with text field.\n\n    A combobox permits a single selection only. Combobox items are\n    numbered from zero.\n    \"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(Window parent, int id=-1, String value=EmptyString,\n            Point pos=DefaultPosition, Size size=DefaultSize,\n            List choices=EmptyList, long style=0, Validator validator=DefaultValidator,\n            String name=ComboBoxNameStr) -> ComboBox\n\n        Constructor, creates and shows a ComboBox control.\n        \"\"\"\n        _controls_.ComboBox_swiginit(self,_controls_.new_ComboBox(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(Window parent, int id=-1, String value=EmptyString,\n            Point pos=DefaultPosition, Size size=DefaultSize,\n            List choices=EmptyList, long style=0, Validator validator=DefaultValidator,\n            String name=ChoiceNameStr) -> bool\n\n        Actually create the GUI wxComboBox control for 2-phase creation\n        \"\"\"\n        return _controls_.ComboBox_Create(*args, **kwargs)\n\n    def SetMark(*args, **kwargs):\n        \"\"\"\n        SetMark(self, long from, long to)\n\n        Selects the text between the two positions in the combobox text field.\n        \"\"\"\n        return _controls_.ComboBox_SetMark(*args, **kwargs)\n\n    def GetMark(*args, **kwargs):\n        \"\"\"\n        GetMark(self) -> (from, to)\n\n        Gets the positions of the begining and ending of the selection mark in\n        the combobox text field.\n        \"\"\"\n        return _controls_.ComboBox_GetMark(*args, **kwargs)\n\n    def IsEmpty(*args, **kwargs):\n        \"\"\"IsEmpty(self) -> bool\"\"\"\n        return _controls_.ComboBox_IsEmpty(*args, **kwargs)\n\n    def IsListEmpty(*args, **kwargs):\n        \"\"\"IsListEmpty(self) -> bool\"\"\"\n        return _controls_.ComboBox_IsListEmpty(*args, **kwargs)\n\n    def IsTextEmpty(*args, **kwargs):\n        \"\"\"IsTextEmpty(self) -> bool\"\"\"\n        return _controls_.ComboBox_IsTextEmpty(*args, **kwargs)\n\n    def Popup(*args, **kwargs):\n        \"\"\"Popup(self)\"\"\"\n        return _controls_.ComboBox_Popup(*args, **kwargs)\n\n    def Dismiss(*args, **kwargs):\n        \"\"\"Dismiss(self)\"\"\"\n        return _controls_.ComboBox_Dismiss(*args, **kwargs)\n\n    def GetCurrentSelection(*args, **kwargs):\n        \"\"\"\n        GetCurrentSelection(self) -> int\n\n        Unlike `GetSelection` which only returns the accepted selection value,\n        i.e. the selection in the control once the user closes the dropdown\n        list, this function returns the current selection.  That is, while the\n        dropdown list is shown, it returns the currently selected item in\n        it. When it is not shown, its result is the same as for the other\n        function.\n        \"\"\"\n        return _controls_.ComboBox_GetCurrentSelection(*args, **kwargs)\n\n    def SetStringSelection(*args, **kwargs):\n        \"\"\"\n        SetStringSelection(self, String string) -> bool\n\n        Select the item with the specifed string\n        \"\"\"\n        return _controls_.ComboBox_SetStringSelection(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.ComboBox_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n    CurrentSelection = property(GetCurrentSelection) \n    Mark = property(GetMark,SetMark) \n_controls_.ComboBox_swigregister(ComboBox)\nComboBoxNameStr = cvar.ComboBoxNameStr\n\ndef PreComboBox(*args, **kwargs):\n    \"\"\"\n    PreComboBox() -> ComboBox\n\n    Precreate a ComboBox control for 2-phase creation.\n    \"\"\"\n    val = _controls_.new_PreComboBox(*args, **kwargs)\n    return val\n\ndef ComboBox_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    ComboBox_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.ComboBox_GetClassDefaultAttributes(*args, **kwargs)\n\n#---------------------------------------------------------------------------\n\nGA_HORIZONTAL = _controls_.GA_HORIZONTAL\nGA_VERTICAL = _controls_.GA_VERTICAL\nGA_SMOOTH = _controls_.GA_SMOOTH\nGA_PROGRESSBAR = 0 # obsolete \nclass Gauge(_core.Control):\n    \"\"\"Proxy of C++ Gauge class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, int range=100, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=GA_HORIZONTAL, \n            Validator validator=DefaultValidator, \n            String name=GaugeNameStr) -> Gauge\n        \"\"\"\n        _controls_.Gauge_swiginit(self,_controls_.new_Gauge(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, int range=100, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=GA_HORIZONTAL, \n            Validator validator=DefaultValidator, \n            String name=GaugeNameStr) -> bool\n        \"\"\"\n        return _controls_.Gauge_Create(*args, **kwargs)\n\n    def SetRange(*args, **kwargs):\n        \"\"\"SetRange(self, int range)\"\"\"\n        return _controls_.Gauge_SetRange(*args, **kwargs)\n\n    def GetRange(*args, **kwargs):\n        \"\"\"GetRange(self) -> int\"\"\"\n        return _controls_.Gauge_GetRange(*args, **kwargs)\n\n    def SetValue(*args, **kwargs):\n        \"\"\"SetValue(self, int pos)\"\"\"\n        return _controls_.Gauge_SetValue(*args, **kwargs)\n\n    def GetValue(*args, **kwargs):\n        \"\"\"GetValue(self) -> int\"\"\"\n        return _controls_.Gauge_GetValue(*args, **kwargs)\n\n    def Pulse(*args, **kwargs):\n        \"\"\"Pulse(self)\"\"\"\n        return _controls_.Gauge_Pulse(*args, **kwargs)\n\n    def IsVertical(*args, **kwargs):\n        \"\"\"IsVertical(self) -> bool\"\"\"\n        return _controls_.Gauge_IsVertical(*args, **kwargs)\n\n    def SetShadowWidth(*args, **kwargs):\n        \"\"\"SetShadowWidth(self, int w)\"\"\"\n        return _controls_.Gauge_SetShadowWidth(*args, **kwargs)\n\n    def GetShadowWidth(*args, **kwargs):\n        \"\"\"GetShadowWidth(self) -> int\"\"\"\n        return _controls_.Gauge_GetShadowWidth(*args, **kwargs)\n\n    def SetBezelFace(*args, **kwargs):\n        \"\"\"SetBezelFace(self, int w)\"\"\"\n        return _controls_.Gauge_SetBezelFace(*args, **kwargs)\n\n    def GetBezelFace(*args, **kwargs):\n        \"\"\"GetBezelFace(self) -> int\"\"\"\n        return _controls_.Gauge_GetBezelFace(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.Gauge_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n    BezelFace = property(GetBezelFace,SetBezelFace,doc=\"See `GetBezelFace` and `SetBezelFace`\") \n    Range = property(GetRange,SetRange,doc=\"See `GetRange` and `SetRange`\") \n    ShadowWidth = property(GetShadowWidth,SetShadowWidth,doc=\"See `GetShadowWidth` and `SetShadowWidth`\") \n    Value = property(GetValue,SetValue,doc=\"See `GetValue` and `SetValue`\") \n_controls_.Gauge_swigregister(Gauge)\nGaugeNameStr = cvar.GaugeNameStr\n\ndef PreGauge(*args, **kwargs):\n    \"\"\"PreGauge() -> Gauge\"\"\"\n    val = _controls_.new_PreGauge(*args, **kwargs)\n    return val\n\ndef Gauge_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    Gauge_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.Gauge_GetClassDefaultAttributes(*args, **kwargs)\n\n#---------------------------------------------------------------------------\n\nclass StaticBox(_core.Control):\n    \"\"\"Proxy of C++ StaticBox class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, String label=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, String name=StaticBoxNameStr) -> StaticBox\n        \"\"\"\n        _controls_.StaticBox_swiginit(self,_controls_.new_StaticBox(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, String label=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, String name=StaticBoxNameStr) -> bool\n        \"\"\"\n        return _controls_.StaticBox_Create(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.StaticBox_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n_controls_.StaticBox_swigregister(StaticBox)\nStaticBitmapNameStr = cvar.StaticBitmapNameStr\nStaticBoxNameStr = cvar.StaticBoxNameStr\nStaticTextNameStr = cvar.StaticTextNameStr\nStaticLineNameStr = cvar.StaticLineNameStr\n\ndef PreStaticBox(*args, **kwargs):\n    \"\"\"PreStaticBox() -> StaticBox\"\"\"\n    val = _controls_.new_PreStaticBox(*args, **kwargs)\n    return val\n\ndef StaticBox_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    StaticBox_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.StaticBox_GetClassDefaultAttributes(*args, **kwargs)\n\n#---------------------------------------------------------------------------\n\nclass StaticLine(_core.Control):\n    \"\"\"Proxy of C++ StaticLine class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=LI_HORIZONTAL, \n            String name=StaticLineNameStr) -> StaticLine\n        \"\"\"\n        _controls_.StaticLine_swiginit(self,_controls_.new_StaticLine(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=LI_HORIZONTAL, \n            String name=StaticLineNameStr) -> bool\n        \"\"\"\n        return _controls_.StaticLine_Create(*args, **kwargs)\n\n    def IsVertical(*args, **kwargs):\n        \"\"\"IsVertical(self) -> bool\"\"\"\n        return _controls_.StaticLine_IsVertical(*args, **kwargs)\n\n    def GetDefaultSize(*args, **kwargs):\n        \"\"\"GetDefaultSize() -> int\"\"\"\n        return _controls_.StaticLine_GetDefaultSize(*args, **kwargs)\n\n    GetDefaultSize = staticmethod(GetDefaultSize)\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.StaticLine_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n_controls_.StaticLine_swigregister(StaticLine)\n\ndef PreStaticLine(*args, **kwargs):\n    \"\"\"PreStaticLine() -> StaticLine\"\"\"\n    val = _controls_.new_PreStaticLine(*args, **kwargs)\n    return val\n\ndef StaticLine_GetDefaultSize(*args):\n  \"\"\"StaticLine_GetDefaultSize() -> int\"\"\"\n  return _controls_.StaticLine_GetDefaultSize(*args)\n\ndef StaticLine_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    StaticLine_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.StaticLine_GetClassDefaultAttributes(*args, **kwargs)\n\n#---------------------------------------------------------------------------\n\nST_NO_AUTORESIZE = _controls_.ST_NO_AUTORESIZE\nST_ELLIPSIZE_START = _controls_.ST_ELLIPSIZE_START\nST_ELLIPSIZE_MIDDLE = _controls_.ST_ELLIPSIZE_MIDDLE\nST_ELLIPSIZE_END = _controls_.ST_ELLIPSIZE_END\nclass StaticText(_core.Control):\n    \"\"\"Proxy of C++ StaticText class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, String label=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, String name=StaticTextNameStr) -> StaticText\n        \"\"\"\n        _controls_.StaticText_swiginit(self,_controls_.new_StaticText(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, String label=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, String name=StaticTextNameStr) -> bool\n        \"\"\"\n        return _controls_.StaticText_Create(*args, **kwargs)\n\n    def Wrap(*args, **kwargs):\n        \"\"\"\n        Wrap(self, int width)\n\n        This functions wraps the control's label so that each of its lines\n        becomes at most ``width`` pixels wide if possible (the lines are\n        broken at words boundaries so it might not be the case if words are\n        too long). If ``width`` is negative, no wrapping is done.\n        \"\"\"\n        return _controls_.StaticText_Wrap(*args, **kwargs)\n\n    def IsEllipsized(*args, **kwargs):\n        \"\"\"IsEllipsized(self) -> bool\"\"\"\n        return _controls_.StaticText_IsEllipsized(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.StaticText_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n_controls_.StaticText_swigregister(StaticText)\n\ndef PreStaticText(*args, **kwargs):\n    \"\"\"PreStaticText() -> StaticText\"\"\"\n    val = _controls_.new_PreStaticText(*args, **kwargs)\n    return val\n\ndef StaticText_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    StaticText_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.StaticText_GetClassDefaultAttributes(*args, **kwargs)\n\n#---------------------------------------------------------------------------\n\nclass StaticBitmap(_core.Control):\n    \"\"\"Proxy of C++ StaticBitmap class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, Bitmap bitmap=wxNullBitmap, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, String name=StaticBitmapNameStr) -> StaticBitmap\n        \"\"\"\n        _controls_.StaticBitmap_swiginit(self,_controls_.new_StaticBitmap(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, Bitmap bitmap=wxNullBitmap, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, String name=StaticBitmapNameStr) -> bool\n        \"\"\"\n        return _controls_.StaticBitmap_Create(*args, **kwargs)\n\n    def GetBitmap(*args, **kwargs):\n        \"\"\"GetBitmap(self) -> Bitmap\"\"\"\n        return _controls_.StaticBitmap_GetBitmap(*args, **kwargs)\n\n    def SetBitmap(*args, **kwargs):\n        \"\"\"SetBitmap(self, Bitmap bitmap)\"\"\"\n        return _controls_.StaticBitmap_SetBitmap(*args, **kwargs)\n\n    def SetIcon(*args, **kwargs):\n        \"\"\"SetIcon(self, Icon icon)\"\"\"\n        return _controls_.StaticBitmap_SetIcon(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.StaticBitmap_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n_controls_.StaticBitmap_swigregister(StaticBitmap)\n\ndef PreStaticBitmap(*args, **kwargs):\n    \"\"\"PreStaticBitmap() -> StaticBitmap\"\"\"\n    val = _controls_.new_PreStaticBitmap(*args, **kwargs)\n    return val\n\ndef StaticBitmap_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    StaticBitmap_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.StaticBitmap_GetClassDefaultAttributes(*args, **kwargs)\n\n#---------------------------------------------------------------------------\n\nclass ListBox(_core.ControlWithItems):\n    \"\"\"Proxy of C++ ListBox class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, wxArrayString choices=wxPyEmptyStringArray, \n            long style=0, Validator validator=DefaultValidator, \n            String name=ListBoxNameStr) -> ListBox\n        \"\"\"\n        _controls_.ListBox_swiginit(self,_controls_.new_ListBox(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, wxArrayString choices=wxPyEmptyStringArray, \n            long style=0, Validator validator=DefaultValidator, \n            String name=ListBoxNameStr) -> bool\n        \"\"\"\n        return _controls_.ListBox_Create(*args, **kwargs)\n\n    def Insert(*args, **kwargs):\n        \"\"\"\n        Insert(self, String item, int pos, PyObject clientData=None)\n\n        Insert an item into the control before the item at the ``pos`` index,\n        optionally associating some data object with the item.\n        \"\"\"\n        return _controls_.ListBox_Insert(*args, **kwargs)\n\n    def InsertItems(*args, **kwargs):\n        \"\"\"InsertItems(self, wxArrayString items, unsigned int pos)\"\"\"\n        return _controls_.ListBox_InsertItems(*args, **kwargs)\n\n    def Set(*args, **kwargs):\n        \"\"\"\n        Set(self, List strings)\n\n        Replace all the items in the control\n        \"\"\"\n        return _controls_.ListBox_Set(*args, **kwargs)\n\n    def IsSelected(*args, **kwargs):\n        \"\"\"IsSelected(self, int n) -> bool\"\"\"\n        return _controls_.ListBox_IsSelected(*args, **kwargs)\n\n    def SetSelection(*args, **kwargs):\n        \"\"\"SetSelection(self, int n, bool select=True)\"\"\"\n        return _controls_.ListBox_SetSelection(*args, **kwargs)\n\n    def Select(*args, **kwargs):\n        \"\"\"\n        Select(self, int n)\n\n        This is the same as `SetSelection` and exists only because it is\n        slightly more natural for controls which support multiple selection.\n        \"\"\"\n        return _controls_.ListBox_Select(*args, **kwargs)\n\n    def Deselect(*args, **kwargs):\n        \"\"\"Deselect(self, int n)\"\"\"\n        return _controls_.ListBox_Deselect(*args, **kwargs)\n\n    def DeselectAll(*args, **kwargs):\n        \"\"\"DeselectAll(self, int itemToLeaveSelected=-1)\"\"\"\n        return _controls_.ListBox_DeselectAll(*args, **kwargs)\n\n    def SetStringSelection(*args, **kwargs):\n        \"\"\"SetStringSelection(self, String s, bool select=True) -> bool\"\"\"\n        return _controls_.ListBox_SetStringSelection(*args, **kwargs)\n\n    def GetSelections(*args, **kwargs):\n        \"\"\"GetSelections(self) -> PyObject\"\"\"\n        return _controls_.ListBox_GetSelections(*args, **kwargs)\n\n    def SetFirstItem(*args, **kwargs):\n        \"\"\"SetFirstItem(self, int n)\"\"\"\n        return _controls_.ListBox_SetFirstItem(*args, **kwargs)\n\n    def SetFirstItemStr(*args, **kwargs):\n        \"\"\"SetFirstItemStr(self, String s)\"\"\"\n        return _controls_.ListBox_SetFirstItemStr(*args, **kwargs)\n\n    def EnsureVisible(*args, **kwargs):\n        \"\"\"EnsureVisible(self, int n)\"\"\"\n        return _controls_.ListBox_EnsureVisible(*args, **kwargs)\n\n    def AppendAndEnsureVisible(*args, **kwargs):\n        \"\"\"AppendAndEnsureVisible(self, String s)\"\"\"\n        return _controls_.ListBox_AppendAndEnsureVisible(*args, **kwargs)\n\n    def HitTest(*args, **kwargs):\n        \"\"\"\n        HitTest(self, Point pt) -> int\n\n        Test where the given (in client coords) point lies\n        \"\"\"\n        return _controls_.ListBox_HitTest(*args, **kwargs)\n\n    def SetItemForegroundColour(*args, **kwargs):\n        \"\"\"SetItemForegroundColour(self, int item, Colour c)\"\"\"\n        return _controls_.ListBox_SetItemForegroundColour(*args, **kwargs)\n\n    def SetItemBackgroundColour(*args, **kwargs):\n        \"\"\"SetItemBackgroundColour(self, int item, Colour c)\"\"\"\n        return _controls_.ListBox_SetItemBackgroundColour(*args, **kwargs)\n\n    def SetItemFont(*args, **kwargs):\n        \"\"\"SetItemFont(self, int item, Font f)\"\"\"\n        return _controls_.ListBox_SetItemFont(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.ListBox_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n    Selections = property(GetSelections,doc=\"See `GetSelections`\") \n_controls_.ListBox_swigregister(ListBox)\nListBoxNameStr = cvar.ListBoxNameStr\n\ndef PreListBox(*args, **kwargs):\n    \"\"\"PreListBox() -> ListBox\"\"\"\n    val = _controls_.new_PreListBox(*args, **kwargs)\n    return val\n\ndef ListBox_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    ListBox_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.ListBox_GetClassDefaultAttributes(*args, **kwargs)\n\n#---------------------------------------------------------------------------\n\nclass CheckListBox(ListBox):\n    \"\"\"Proxy of C++ CheckListBox class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, wxArrayString choices=wxPyEmptyStringArray, \n            long style=0, Validator validator=DefaultValidator, \n            String name=ListBoxNameStr) -> CheckListBox\n        \"\"\"\n        _controls_.CheckListBox_swiginit(self,_controls_.new_CheckListBox(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, wxArrayString choices=wxPyEmptyStringArray, \n            long style=0, Validator validator=DefaultValidator, \n            String name=ListBoxNameStr) -> bool\n        \"\"\"\n        return _controls_.CheckListBox_Create(*args, **kwargs)\n\n    def IsChecked(*args, **kwargs):\n        \"\"\"IsChecked(self, unsigned int index) -> bool\"\"\"\n        return _controls_.CheckListBox_IsChecked(*args, **kwargs)\n\n    def Check(*args, **kwargs):\n        \"\"\"Check(self, unsigned int index, int check=True)\"\"\"\n        return _controls_.CheckListBox_Check(*args, **kwargs)\n\n    def GetChecked(self):\n        \"\"\"\n        GetChecked(self)\n\n        Return a tuple of integers corresponding to the checked items in\n        the control, based on `IsChecked`.\n        \"\"\"\n        return tuple([i for i in range(self.Count) if self.IsChecked(i)])\n\n    def GetCheckedStrings(self):\n        \"\"\"\n        GetCheckedStrings(self)\n\n        Return a tuple of strings corresponding to the checked\n        items of the control, based on `GetChecked`.\n        \"\"\"\n        return tuple([self.GetString(i) for i in self.GetChecked()])\n\n    def SetChecked(self, indexes):\n        \"\"\"\n        SetChecked(self, indexes)\n\n        Sets the checked state of items if the index of the item is \n        found in the indexes sequence.\n        \"\"\"\n        for i in indexes:\n            assert 0 <= i < self.Count, \"Index (%s) out of range\" % i\n        for i in range(self.Count):\n            self.Check(i, i in indexes)\n\n    def SetCheckedStrings(self, strings):\n        \"\"\"\n        SetCheckedStrings(self, indexes)\n\n        Sets the checked state of items if the item's string is found\n        in the strings sequence.\n        \"\"\"\n        for s in strings:\n            assert s in self.GetStrings(), \"String ('%s') not found\" % s\n        for i in range(self.Count):\n            self.Check(i, self.GetString(i) in strings)\n\n    Checked = property(GetChecked,SetChecked)\n    CheckedStrings = property(GetCheckedStrings,SetCheckedStrings)\n\n_controls_.CheckListBox_swigregister(CheckListBox)\n\ndef PreCheckListBox(*args, **kwargs):\n    \"\"\"PreCheckListBox() -> CheckListBox\"\"\"\n    val = _controls_.new_PreCheckListBox(*args, **kwargs)\n    return val\n\n#---------------------------------------------------------------------------\n\nTE_NO_VSCROLL = _controls_.TE_NO_VSCROLL\nTE_AUTO_SCROLL = _controls_.TE_AUTO_SCROLL\nTE_READONLY = _controls_.TE_READONLY\nTE_MULTILINE = _controls_.TE_MULTILINE\nTE_PROCESS_TAB = _controls_.TE_PROCESS_TAB\nTE_LEFT = _controls_.TE_LEFT\nTE_CENTER = _controls_.TE_CENTER\nTE_RIGHT = _controls_.TE_RIGHT\nTE_CENTRE = _controls_.TE_CENTRE\nTE_RICH = _controls_.TE_RICH\nTE_PROCESS_ENTER = _controls_.TE_PROCESS_ENTER\nTE_PASSWORD = _controls_.TE_PASSWORD\nTE_AUTO_URL = _controls_.TE_AUTO_URL\nTE_NOHIDESEL = _controls_.TE_NOHIDESEL\nTE_DONTWRAP = _controls_.TE_DONTWRAP\nTE_CHARWRAP = _controls_.TE_CHARWRAP\nTE_WORDWRAP = _controls_.TE_WORDWRAP\nTE_BESTWRAP = _controls_.TE_BESTWRAP\nTE_RICH2 = _controls_.TE_RICH2\nTE_CAPITALIZE = _controls_.TE_CAPITALIZE\nTE_LINEWRAP = TE_CHARWRAP \nPROCESS_ENTER = TE_PROCESS_ENTER\nPASSWORD = TE_PASSWORD\n\nTEXT_ALIGNMENT_DEFAULT = _controls_.TEXT_ALIGNMENT_DEFAULT\nTEXT_ALIGNMENT_LEFT = _controls_.TEXT_ALIGNMENT_LEFT\nTEXT_ALIGNMENT_CENTRE = _controls_.TEXT_ALIGNMENT_CENTRE\nTEXT_ALIGNMENT_CENTER = _controls_.TEXT_ALIGNMENT_CENTER\nTEXT_ALIGNMENT_RIGHT = _controls_.TEXT_ALIGNMENT_RIGHT\nTEXT_ALIGNMENT_JUSTIFIED = _controls_.TEXT_ALIGNMENT_JUSTIFIED\nTEXT_ATTR_TEXT_COLOUR = _controls_.TEXT_ATTR_TEXT_COLOUR\nTEXT_ATTR_BACKGROUND_COLOUR = _controls_.TEXT_ATTR_BACKGROUND_COLOUR\nTEXT_ATTR_FONT_FACE = _controls_.TEXT_ATTR_FONT_FACE\nTEXT_ATTR_FONT_SIZE = _controls_.TEXT_ATTR_FONT_SIZE\nTEXT_ATTR_FONT_WEIGHT = _controls_.TEXT_ATTR_FONT_WEIGHT\nTEXT_ATTR_FONT_ITALIC = _controls_.TEXT_ATTR_FONT_ITALIC\nTEXT_ATTR_FONT_UNDERLINE = _controls_.TEXT_ATTR_FONT_UNDERLINE\nTEXT_ATTR_FONT_STRIKETHROUGH = _controls_.TEXT_ATTR_FONT_STRIKETHROUGH\nTEXT_ATTR_FONT_ENCODING = _controls_.TEXT_ATTR_FONT_ENCODING\nTEXT_ATTR_FONT_FAMILY = _controls_.TEXT_ATTR_FONT_FAMILY\nTEXT_ATTR_FONT = _controls_.TEXT_ATTR_FONT\nTEXT_ATTR_ALIGNMENT = _controls_.TEXT_ATTR_ALIGNMENT\nTEXT_ATTR_LEFT_INDENT = _controls_.TEXT_ATTR_LEFT_INDENT\nTEXT_ATTR_RIGHT_INDENT = _controls_.TEXT_ATTR_RIGHT_INDENT\nTEXT_ATTR_TABS = _controls_.TEXT_ATTR_TABS\nTEXT_ATTR_PARA_SPACING_AFTER = _controls_.TEXT_ATTR_PARA_SPACING_AFTER\nTEXT_ATTR_LINE_SPACING = _controls_.TEXT_ATTR_LINE_SPACING\nTEXT_ATTR_CHARACTER_STYLE_NAME = _controls_.TEXT_ATTR_CHARACTER_STYLE_NAME\nTEXT_ATTR_PARAGRAPH_STYLE_NAME = _controls_.TEXT_ATTR_PARAGRAPH_STYLE_NAME\nTEXT_ATTR_LIST_STYLE_NAME = _controls_.TEXT_ATTR_LIST_STYLE_NAME\nTEXT_ATTR_BULLET_STYLE = _controls_.TEXT_ATTR_BULLET_STYLE\nTEXT_ATTR_BULLET_NUMBER = _controls_.TEXT_ATTR_BULLET_NUMBER\nTEXT_ATTR_BULLET_TEXT = _controls_.TEXT_ATTR_BULLET_TEXT\nTEXT_ATTR_BULLET_NAME = _controls_.TEXT_ATTR_BULLET_NAME\nTEXT_ATTR_BULLET = _controls_.TEXT_ATTR_BULLET\nTEXT_ATTR_URL = _controls_.TEXT_ATTR_URL\nTEXT_ATTR_PAGE_BREAK = _controls_.TEXT_ATTR_PAGE_BREAK\nTEXT_ATTR_EFFECTS = _controls_.TEXT_ATTR_EFFECTS\nTEXT_ATTR_OUTLINE_LEVEL = _controls_.TEXT_ATTR_OUTLINE_LEVEL\nTEXT_ATTR_CHARACTER = _controls_.TEXT_ATTR_CHARACTER\nTEXT_ATTR_PARAGRAPH = _controls_.TEXT_ATTR_PARAGRAPH\nTEXT_ATTR_ALL = _controls_.TEXT_ATTR_ALL\nTEXT_ATTR_BULLET_STYLE_NONE = _controls_.TEXT_ATTR_BULLET_STYLE_NONE\nTEXT_ATTR_BULLET_STYLE_ARABIC = _controls_.TEXT_ATTR_BULLET_STYLE_ARABIC\nTEXT_ATTR_BULLET_STYLE_LETTERS_UPPER = _controls_.TEXT_ATTR_BULLET_STYLE_LETTERS_UPPER\nTEXT_ATTR_BULLET_STYLE_LETTERS_LOWER = _controls_.TEXT_ATTR_BULLET_STYLE_LETTERS_LOWER\nTEXT_ATTR_BULLET_STYLE_ROMAN_UPPER = _controls_.TEXT_ATTR_BULLET_STYLE_ROMAN_UPPER\nTEXT_ATTR_BULLET_STYLE_ROMAN_LOWER = _controls_.TEXT_ATTR_BULLET_STYLE_ROMAN_LOWER\nTEXT_ATTR_BULLET_STYLE_SYMBOL = _controls_.TEXT_ATTR_BULLET_STYLE_SYMBOL\nTEXT_ATTR_BULLET_STYLE_BITMAP = _controls_.TEXT_ATTR_BULLET_STYLE_BITMAP\nTEXT_ATTR_BULLET_STYLE_PARENTHESES = _controls_.TEXT_ATTR_BULLET_STYLE_PARENTHESES\nTEXT_ATTR_BULLET_STYLE_PERIOD = _controls_.TEXT_ATTR_BULLET_STYLE_PERIOD\nTEXT_ATTR_BULLET_STYLE_STANDARD = _controls_.TEXT_ATTR_BULLET_STYLE_STANDARD\nTEXT_ATTR_BULLET_STYLE_RIGHT_PARENTHESIS = _controls_.TEXT_ATTR_BULLET_STYLE_RIGHT_PARENTHESIS\nTEXT_ATTR_BULLET_STYLE_OUTLINE = _controls_.TEXT_ATTR_BULLET_STYLE_OUTLINE\nTEXT_ATTR_BULLET_STYLE_ALIGN_LEFT = _controls_.TEXT_ATTR_BULLET_STYLE_ALIGN_LEFT\nTEXT_ATTR_BULLET_STYLE_ALIGN_RIGHT = _controls_.TEXT_ATTR_BULLET_STYLE_ALIGN_RIGHT\nTEXT_ATTR_BULLET_STYLE_ALIGN_CENTRE = _controls_.TEXT_ATTR_BULLET_STYLE_ALIGN_CENTRE\nTEXT_ATTR_EFFECT_NONE = _controls_.TEXT_ATTR_EFFECT_NONE\nTEXT_ATTR_EFFECT_CAPITALS = _controls_.TEXT_ATTR_EFFECT_CAPITALS\nTEXT_ATTR_EFFECT_SMALL_CAPITALS = _controls_.TEXT_ATTR_EFFECT_SMALL_CAPITALS\nTEXT_ATTR_EFFECT_STRIKETHROUGH = _controls_.TEXT_ATTR_EFFECT_STRIKETHROUGH\nTEXT_ATTR_EFFECT_DOUBLE_STRIKETHROUGH = _controls_.TEXT_ATTR_EFFECT_DOUBLE_STRIKETHROUGH\nTEXT_ATTR_EFFECT_SHADOW = _controls_.TEXT_ATTR_EFFECT_SHADOW\nTEXT_ATTR_EFFECT_EMBOSS = _controls_.TEXT_ATTR_EFFECT_EMBOSS\nTEXT_ATTR_EFFECT_OUTLINE = _controls_.TEXT_ATTR_EFFECT_OUTLINE\nTEXT_ATTR_EFFECT_ENGRAVE = _controls_.TEXT_ATTR_EFFECT_ENGRAVE\nTEXT_ATTR_EFFECT_SUPERSCRIPT = _controls_.TEXT_ATTR_EFFECT_SUPERSCRIPT\nTEXT_ATTR_EFFECT_SUBSCRIPT = _controls_.TEXT_ATTR_EFFECT_SUBSCRIPT\nTEXT_ATTR_LINE_SPACING_NORMAL = _controls_.TEXT_ATTR_LINE_SPACING_NORMAL\nTEXT_ATTR_LINE_SPACING_HALF = _controls_.TEXT_ATTR_LINE_SPACING_HALF\nTEXT_ATTR_LINE_SPACING_TWICE = _controls_.TEXT_ATTR_LINE_SPACING_TWICE\nOutOfRangeTextCoord = _controls_.OutOfRangeTextCoord\nInvalidTextCoord = _controls_.InvalidTextCoord\nTEXT_TYPE_ANY = _controls_.TEXT_TYPE_ANY\nclass TextAttr(object):\n    \"\"\"Proxy of C++ TextAttr class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Colour colText=wxNullColour, Colour colBack=wxNullColour, \n            Font font=wxNullFont, int alignment=TEXT_ALIGNMENT_DEFAULT) -> TextAttr\n        \"\"\"\n        _controls_.TextAttr_swiginit(self,_controls_.new_TextAttr(*args, **kwargs))\n    __swig_destroy__ = _controls_.delete_TextAttr\n    __del__ = lambda self : None;\n    def Init(*args, **kwargs):\n        \"\"\"Init(self)\"\"\"\n        return _controls_.TextAttr_Init(*args, **kwargs)\n\n    def Copy(*args, **kwargs):\n        \"\"\"Copy(self, TextAttr attr)\"\"\"\n        return _controls_.TextAttr_Copy(*args, **kwargs)\n\n    def EqPartial(*args, **kwargs):\n        \"\"\"EqPartial(self, TextAttr attr) -> bool\"\"\"\n        return _controls_.TextAttr_EqPartial(*args, **kwargs)\n\n    def GetFontAttributes(*args, **kwargs):\n        \"\"\"GetFontAttributes(self, Font font, int flags=TEXT_ATTR_FONT) -> bool\"\"\"\n        return _controls_.TextAttr_GetFontAttributes(*args, **kwargs)\n\n    def SetTextColour(*args, **kwargs):\n        \"\"\"SetTextColour(self, Colour colText)\"\"\"\n        return _controls_.TextAttr_SetTextColour(*args, **kwargs)\n\n    def SetBackgroundColour(*args, **kwargs):\n        \"\"\"SetBackgroundColour(self, Colour colBack)\"\"\"\n        return _controls_.TextAttr_SetBackgroundColour(*args, **kwargs)\n\n    def SetAlignment(*args, **kwargs):\n        \"\"\"SetAlignment(self, int alignment)\"\"\"\n        return _controls_.TextAttr_SetAlignment(*args, **kwargs)\n\n    def SetTabs(*args, **kwargs):\n        \"\"\"SetTabs(self, wxArrayInt tabs)\"\"\"\n        return _controls_.TextAttr_SetTabs(*args, **kwargs)\n\n    def SetLeftIndent(*args, **kwargs):\n        \"\"\"SetLeftIndent(self, int indent, int subIndent=0)\"\"\"\n        return _controls_.TextAttr_SetLeftIndent(*args, **kwargs)\n\n    def SetRightIndent(*args, **kwargs):\n        \"\"\"SetRightIndent(self, int indent)\"\"\"\n        return _controls_.TextAttr_SetRightIndent(*args, **kwargs)\n\n    def SetFontSize(*args, **kwargs):\n        \"\"\"SetFontSize(self, int pointSize)\"\"\"\n        return _controls_.TextAttr_SetFontSize(*args, **kwargs)\n\n    def SetFontStyle(*args, **kwargs):\n        \"\"\"SetFontStyle(self, int fontStyle)\"\"\"\n        return _controls_.TextAttr_SetFontStyle(*args, **kwargs)\n\n    def SetFontWeight(*args, **kwargs):\n        \"\"\"SetFontWeight(self, int fontWeight)\"\"\"\n        return _controls_.TextAttr_SetFontWeight(*args, **kwargs)\n\n    def SetFontFaceName(*args, **kwargs):\n        \"\"\"SetFontFaceName(self, String faceName)\"\"\"\n        return _controls_.TextAttr_SetFontFaceName(*args, **kwargs)\n\n    def SetFontUnderlined(*args, **kwargs):\n        \"\"\"SetFontUnderlined(self, bool underlined)\"\"\"\n        return _controls_.TextAttr_SetFontUnderlined(*args, **kwargs)\n\n    def SetFontStrikethrough(*args, **kwargs):\n        \"\"\"SetFontStrikethrough(self, bool strikethrough)\"\"\"\n        return _controls_.TextAttr_SetFontStrikethrough(*args, **kwargs)\n\n    def SetFontEncoding(*args, **kwargs):\n        \"\"\"SetFontEncoding(self, int encoding)\"\"\"\n        return _controls_.TextAttr_SetFontEncoding(*args, **kwargs)\n\n    def SetFontFamily(*args, **kwargs):\n        \"\"\"SetFontFamily(self, int family)\"\"\"\n        return _controls_.TextAttr_SetFontFamily(*args, **kwargs)\n\n    def SetFont(*args, **kwargs):\n        \"\"\"SetFont(self, Font font, int flags=TEXT_ATTR_FONT)\"\"\"\n        return _controls_.TextAttr_SetFont(*args, **kwargs)\n\n    def SetFlags(*args, **kwargs):\n        \"\"\"SetFlags(self, long flags)\"\"\"\n        return _controls_.TextAttr_SetFlags(*args, **kwargs)\n\n    def SetCharacterStyleName(*args, **kwargs):\n        \"\"\"SetCharacterStyleName(self, String name)\"\"\"\n        return _controls_.TextAttr_SetCharacterStyleName(*args, **kwargs)\n\n    def SetParagraphStyleName(*args, **kwargs):\n        \"\"\"SetParagraphStyleName(self, String name)\"\"\"\n        return _controls_.TextAttr_SetParagraphStyleName(*args, **kwargs)\n\n    def SetListStyleName(*args, **kwargs):\n        \"\"\"SetListStyleName(self, String name)\"\"\"\n        return _controls_.TextAttr_SetListStyleName(*args, **kwargs)\n\n    def SetParagraphSpacingAfter(*args, **kwargs):\n        \"\"\"SetParagraphSpacingAfter(self, int spacing)\"\"\"\n        return _controls_.TextAttr_SetParagraphSpacingAfter(*args, **kwargs)\n\n    def SetParagraphSpacingBefore(*args, **kwargs):\n        \"\"\"SetParagraphSpacingBefore(self, int spacing)\"\"\"\n        return _controls_.TextAttr_SetParagraphSpacingBefore(*args, **kwargs)\n\n    def SetLineSpacing(*args, **kwargs):\n        \"\"\"SetLineSpacing(self, int spacing)\"\"\"\n        return _controls_.TextAttr_SetLineSpacing(*args, **kwargs)\n\n    def SetBulletStyle(*args, **kwargs):\n        \"\"\"SetBulletStyle(self, int style)\"\"\"\n        return _controls_.TextAttr_SetBulletStyle(*args, **kwargs)\n\n    def SetBulletNumber(*args, **kwargs):\n        \"\"\"SetBulletNumber(self, int n)\"\"\"\n        return _controls_.TextAttr_SetBulletNumber(*args, **kwargs)\n\n    def SetBulletText(*args, **kwargs):\n        \"\"\"SetBulletText(self, String text)\"\"\"\n        return _controls_.TextAttr_SetBulletText(*args, **kwargs)\n\n    def SetBulletFont(*args, **kwargs):\n        \"\"\"SetBulletFont(self, String bulletFont)\"\"\"\n        return _controls_.TextAttr_SetBulletFont(*args, **kwargs)\n\n    def SetBulletName(*args, **kwargs):\n        \"\"\"SetBulletName(self, String name)\"\"\"\n        return _controls_.TextAttr_SetBulletName(*args, **kwargs)\n\n    def SetURL(*args, **kwargs):\n        \"\"\"SetURL(self, String url)\"\"\"\n        return _controls_.TextAttr_SetURL(*args, **kwargs)\n\n    def SetPageBreak(*args, **kwargs):\n        \"\"\"SetPageBreak(self, bool pageBreak=True)\"\"\"\n        return _controls_.TextAttr_SetPageBreak(*args, **kwargs)\n\n    def SetTextEffects(*args, **kwargs):\n        \"\"\"SetTextEffects(self, int effects)\"\"\"\n        return _controls_.TextAttr_SetTextEffects(*args, **kwargs)\n\n    def SetTextEffectFlags(*args, **kwargs):\n        \"\"\"SetTextEffectFlags(self, int effects)\"\"\"\n        return _controls_.TextAttr_SetTextEffectFlags(*args, **kwargs)\n\n    def SetOutlineLevel(*args, **kwargs):\n        \"\"\"SetOutlineLevel(self, int level)\"\"\"\n        return _controls_.TextAttr_SetOutlineLevel(*args, **kwargs)\n\n    def GetTextColour(*args, **kwargs):\n        \"\"\"GetTextColour(self) -> Colour\"\"\"\n        return _controls_.TextAttr_GetTextColour(*args, **kwargs)\n\n    def GetBackgroundColour(*args, **kwargs):\n        \"\"\"GetBackgroundColour(self) -> Colour\"\"\"\n        return _controls_.TextAttr_GetBackgroundColour(*args, **kwargs)\n\n    def GetAlignment(*args, **kwargs):\n        \"\"\"GetAlignment(self) -> int\"\"\"\n        return _controls_.TextAttr_GetAlignment(*args, **kwargs)\n\n    def GetTabs(*args, **kwargs):\n        \"\"\"GetTabs(self) -> wxArrayInt\"\"\"\n        return _controls_.TextAttr_GetTabs(*args, **kwargs)\n\n    def GetLeftIndent(*args, **kwargs):\n        \"\"\"GetLeftIndent(self) -> long\"\"\"\n        return _controls_.TextAttr_GetLeftIndent(*args, **kwargs)\n\n    def GetLeftSubIndent(*args, **kwargs):\n        \"\"\"GetLeftSubIndent(self) -> long\"\"\"\n        return _controls_.TextAttr_GetLeftSubIndent(*args, **kwargs)\n\n    def GetRightIndent(*args, **kwargs):\n        \"\"\"GetRightIndent(self) -> long\"\"\"\n        return _controls_.TextAttr_GetRightIndent(*args, **kwargs)\n\n    def GetFlags(*args, **kwargs):\n        \"\"\"GetFlags(self) -> long\"\"\"\n        return _controls_.TextAttr_GetFlags(*args, **kwargs)\n\n    def GetFontSize(*args, **kwargs):\n        \"\"\"GetFontSize(self) -> int\"\"\"\n        return _controls_.TextAttr_GetFontSize(*args, **kwargs)\n\n    def GetFontStyle(*args, **kwargs):\n        \"\"\"GetFontStyle(self) -> int\"\"\"\n        return _controls_.TextAttr_GetFontStyle(*args, **kwargs)\n\n    def GetFontWeight(*args, **kwargs):\n        \"\"\"GetFontWeight(self) -> int\"\"\"\n        return _controls_.TextAttr_GetFontWeight(*args, **kwargs)\n\n    def GetFontUnderlined(*args, **kwargs):\n        \"\"\"GetFontUnderlined(self) -> bool\"\"\"\n        return _controls_.TextAttr_GetFontUnderlined(*args, **kwargs)\n\n    def GetFontStrikethrough(*args, **kwargs):\n        \"\"\"GetFontStrikethrough(self) -> bool\"\"\"\n        return _controls_.TextAttr_GetFontStrikethrough(*args, **kwargs)\n\n    def GetFontFaceName(*args, **kwargs):\n        \"\"\"GetFontFaceName(self) -> String\"\"\"\n        return _controls_.TextAttr_GetFontFaceName(*args, **kwargs)\n\n    def GetFontEncoding(*args, **kwargs):\n        \"\"\"GetFontEncoding(self) -> int\"\"\"\n        return _controls_.TextAttr_GetFontEncoding(*args, **kwargs)\n\n    def GetFontFamily(*args, **kwargs):\n        \"\"\"GetFontFamily(self) -> int\"\"\"\n        return _controls_.TextAttr_GetFontFamily(*args, **kwargs)\n\n    def GetFont(*args, **kwargs):\n        \"\"\"GetFont(self) -> Font\"\"\"\n        return _controls_.TextAttr_GetFont(*args, **kwargs)\n\n    CreateFont = GetFont \n    def GetCharacterStyleName(*args, **kwargs):\n        \"\"\"GetCharacterStyleName(self) -> String\"\"\"\n        return _controls_.TextAttr_GetCharacterStyleName(*args, **kwargs)\n\n    def GetParagraphStyleName(*args, **kwargs):\n        \"\"\"GetParagraphStyleName(self) -> String\"\"\"\n        return _controls_.TextAttr_GetParagraphStyleName(*args, **kwargs)\n\n    def GetListStyleName(*args, **kwargs):\n        \"\"\"GetListStyleName(self) -> String\"\"\"\n        return _controls_.TextAttr_GetListStyleName(*args, **kwargs)\n\n    def GetParagraphSpacingAfter(*args, **kwargs):\n        \"\"\"GetParagraphSpacingAfter(self) -> int\"\"\"\n        return _controls_.TextAttr_GetParagraphSpacingAfter(*args, **kwargs)\n\n    def GetParagraphSpacingBefore(*args, **kwargs):\n        \"\"\"GetParagraphSpacingBefore(self) -> int\"\"\"\n        return _controls_.TextAttr_GetParagraphSpacingBefore(*args, **kwargs)\n\n    def GetLineSpacing(*args, **kwargs):\n        \"\"\"GetLineSpacing(self) -> int\"\"\"\n        return _controls_.TextAttr_GetLineSpacing(*args, **kwargs)\n\n    def GetBulletStyle(*args, **kwargs):\n        \"\"\"GetBulletStyle(self) -> int\"\"\"\n        return _controls_.TextAttr_GetBulletStyle(*args, **kwargs)\n\n    def GetBulletNumber(*args, **kwargs):\n        \"\"\"GetBulletNumber(self) -> int\"\"\"\n        return _controls_.TextAttr_GetBulletNumber(*args, **kwargs)\n\n    def GetBulletText(*args, **kwargs):\n        \"\"\"GetBulletText(self) -> String\"\"\"\n        return _controls_.TextAttr_GetBulletText(*args, **kwargs)\n\n    def GetBulletFont(*args, **kwargs):\n        \"\"\"GetBulletFont(self) -> String\"\"\"\n        return _controls_.TextAttr_GetBulletFont(*args, **kwargs)\n\n    def GetBulletName(*args, **kwargs):\n        \"\"\"GetBulletName(self) -> String\"\"\"\n        return _controls_.TextAttr_GetBulletName(*args, **kwargs)\n\n    def GetURL(*args, **kwargs):\n        \"\"\"GetURL(self) -> String\"\"\"\n        return _controls_.TextAttr_GetURL(*args, **kwargs)\n\n    def GetTextEffects(*args, **kwargs):\n        \"\"\"GetTextEffects(self) -> int\"\"\"\n        return _controls_.TextAttr_GetTextEffects(*args, **kwargs)\n\n    def GetTextEffectFlags(*args, **kwargs):\n        \"\"\"GetTextEffectFlags(self) -> int\"\"\"\n        return _controls_.TextAttr_GetTextEffectFlags(*args, **kwargs)\n\n    def GetOutlineLevel(*args, **kwargs):\n        \"\"\"GetOutlineLevel(self) -> int\"\"\"\n        return _controls_.TextAttr_GetOutlineLevel(*args, **kwargs)\n\n    def HasTextColour(*args, **kwargs):\n        \"\"\"HasTextColour(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasTextColour(*args, **kwargs)\n\n    def HasBackgroundColour(*args, **kwargs):\n        \"\"\"HasBackgroundColour(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasBackgroundColour(*args, **kwargs)\n\n    def HasAlignment(*args, **kwargs):\n        \"\"\"HasAlignment(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasAlignment(*args, **kwargs)\n\n    def HasTabs(*args, **kwargs):\n        \"\"\"HasTabs(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasTabs(*args, **kwargs)\n\n    def HasLeftIndent(*args, **kwargs):\n        \"\"\"HasLeftIndent(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasLeftIndent(*args, **kwargs)\n\n    def HasRightIndent(*args, **kwargs):\n        \"\"\"HasRightIndent(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasRightIndent(*args, **kwargs)\n\n    def HasFontWeight(*args, **kwargs):\n        \"\"\"HasFontWeight(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasFontWeight(*args, **kwargs)\n\n    def HasFontSize(*args, **kwargs):\n        \"\"\"HasFontSize(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasFontSize(*args, **kwargs)\n\n    def HasFontItalic(*args, **kwargs):\n        \"\"\"HasFontItalic(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasFontItalic(*args, **kwargs)\n\n    def HasFontUnderlined(*args, **kwargs):\n        \"\"\"HasFontUnderlined(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasFontUnderlined(*args, **kwargs)\n\n    def HasFontStrikethrough(*args, **kwargs):\n        \"\"\"HasFontStrikethrough(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasFontStrikethrough(*args, **kwargs)\n\n    def HasFontFaceName(*args, **kwargs):\n        \"\"\"HasFontFaceName(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasFontFaceName(*args, **kwargs)\n\n    def HasFontEncoding(*args, **kwargs):\n        \"\"\"HasFontEncoding(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasFontEncoding(*args, **kwargs)\n\n    def HasFontFamily(*args, **kwargs):\n        \"\"\"HasFontFamily(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasFontFamily(*args, **kwargs)\n\n    def HasFont(*args, **kwargs):\n        \"\"\"HasFont(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasFont(*args, **kwargs)\n\n    def HasParagraphSpacingAfter(*args, **kwargs):\n        \"\"\"HasParagraphSpacingAfter(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasParagraphSpacingAfter(*args, **kwargs)\n\n    def HasParagraphSpacingBefore(*args, **kwargs):\n        \"\"\"HasParagraphSpacingBefore(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasParagraphSpacingBefore(*args, **kwargs)\n\n    def HasLineSpacing(*args, **kwargs):\n        \"\"\"HasLineSpacing(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasLineSpacing(*args, **kwargs)\n\n    def HasCharacterStyleName(*args, **kwargs):\n        \"\"\"HasCharacterStyleName(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasCharacterStyleName(*args, **kwargs)\n\n    def HasParagraphStyleName(*args, **kwargs):\n        \"\"\"HasParagraphStyleName(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasParagraphStyleName(*args, **kwargs)\n\n    def HasListStyleName(*args, **kwargs):\n        \"\"\"HasListStyleName(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasListStyleName(*args, **kwargs)\n\n    def HasBulletStyle(*args, **kwargs):\n        \"\"\"HasBulletStyle(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasBulletStyle(*args, **kwargs)\n\n    def HasBulletNumber(*args, **kwargs):\n        \"\"\"HasBulletNumber(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasBulletNumber(*args, **kwargs)\n\n    def HasBulletText(*args, **kwargs):\n        \"\"\"HasBulletText(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasBulletText(*args, **kwargs)\n\n    def HasBulletName(*args, **kwargs):\n        \"\"\"HasBulletName(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasBulletName(*args, **kwargs)\n\n    def HasURL(*args, **kwargs):\n        \"\"\"HasURL(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasURL(*args, **kwargs)\n\n    def HasPageBreak(*args, **kwargs):\n        \"\"\"HasPageBreak(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasPageBreak(*args, **kwargs)\n\n    def HasTextEffects(*args, **kwargs):\n        \"\"\"HasTextEffects(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasTextEffects(*args, **kwargs)\n\n    def HasTextEffect(*args, **kwargs):\n        \"\"\"HasTextEffect(self, int effect) -> bool\"\"\"\n        return _controls_.TextAttr_HasTextEffect(*args, **kwargs)\n\n    def HasOutlineLevel(*args, **kwargs):\n        \"\"\"HasOutlineLevel(self) -> bool\"\"\"\n        return _controls_.TextAttr_HasOutlineLevel(*args, **kwargs)\n\n    def HasFlag(*args, **kwargs):\n        \"\"\"HasFlag(self, long flag) -> bool\"\"\"\n        return _controls_.TextAttr_HasFlag(*args, **kwargs)\n\n    def RemoveFlag(*args, **kwargs):\n        \"\"\"RemoveFlag(self, long flag)\"\"\"\n        return _controls_.TextAttr_RemoveFlag(*args, **kwargs)\n\n    def AddFlag(*args, **kwargs):\n        \"\"\"AddFlag(self, long flag)\"\"\"\n        return _controls_.TextAttr_AddFlag(*args, **kwargs)\n\n    def IsCharacterStyle(*args, **kwargs):\n        \"\"\"IsCharacterStyle(self) -> bool\"\"\"\n        return _controls_.TextAttr_IsCharacterStyle(*args, **kwargs)\n\n    def IsParagraphStyle(*args, **kwargs):\n        \"\"\"IsParagraphStyle(self) -> bool\"\"\"\n        return _controls_.TextAttr_IsParagraphStyle(*args, **kwargs)\n\n    def IsDefault(*args, **kwargs):\n        \"\"\"IsDefault(self) -> bool\"\"\"\n        return _controls_.TextAttr_IsDefault(*args, **kwargs)\n\n    def Apply(*args, **kwargs):\n        \"\"\"Apply(self, TextAttr style, TextAttr compareWith=None) -> bool\"\"\"\n        return _controls_.TextAttr_Apply(*args, **kwargs)\n\n    def Merge(*args, **kwargs):\n        \"\"\"Merge(self, TextAttr overlay)\"\"\"\n        return _controls_.TextAttr_Merge(*args, **kwargs)\n\n    def Combine(*args, **kwargs):\n        \"\"\"Combine(TextAttr attr, TextAttr attrDef, TextCtrl text) -> TextAttr\"\"\"\n        return _controls_.TextAttr_Combine(*args, **kwargs)\n\n    Combine = staticmethod(Combine)\n    def TabsEq(*args, **kwargs):\n        \"\"\"TabsEq(wxArrayInt tabs1, wxArrayInt tabs2) -> bool\"\"\"\n        return _controls_.TextAttr_TabsEq(*args, **kwargs)\n\n    TabsEq = staticmethod(TabsEq)\n    def RemoveStyle(*args, **kwargs):\n        \"\"\"RemoveStyle(TextAttr destStyle, TextAttr style) -> bool\"\"\"\n        return _controls_.TextAttr_RemoveStyle(*args, **kwargs)\n\n    RemoveStyle = staticmethod(RemoveStyle)\n    def CombineBitlists(*args, **kwargs):\n        \"\"\"CombineBitlists(int valueA, int valueB, int flagsA, int flagsB) -> bool\"\"\"\n        return _controls_.TextAttr_CombineBitlists(*args, **kwargs)\n\n    CombineBitlists = staticmethod(CombineBitlists)\n    def BitlistsEqPartial(*args, **kwargs):\n        \"\"\"BitlistsEqPartial(int valueA, int valueB, int flags) -> bool\"\"\"\n        return _controls_.TextAttr_BitlistsEqPartial(*args, **kwargs)\n\n    BitlistsEqPartial = staticmethod(BitlistsEqPartial)\n    def SplitParaCharStyles(*args, **kwargs):\n        \"\"\"SplitParaCharStyles(TextAttr style, TextAttr parStyle, TextAttr charStyle) -> bool\"\"\"\n        return _controls_.TextAttr_SplitParaCharStyles(*args, **kwargs)\n\n    SplitParaCharStyles = staticmethod(SplitParaCharStyles)\n    Alignment = property(GetAlignment,SetAlignment) \n    BackgroundColour = property(GetBackgroundColour,SetBackgroundColour) \n    Flags = property(GetFlags,SetFlags) \n    Font = property(GetFont,SetFont) \n    LeftIndent = property(GetLeftIndent,SetLeftIndent) \n    LeftSubIndent = property(GetLeftSubIndent) \n    RightIndent = property(GetRightIndent,SetRightIndent) \n    Tabs = property(GetTabs,SetTabs) \n    TextColour = property(GetTextColour,SetTextColour) \n    FontSize = property(GetFontSize,SetFontSize) \n    FontStyle = property(GetFontStyle,SetFontStyle) \n    FontWeight = property(GetFontWeight,SetFontWeight) \n    FontUnderlined = property(GetFontUnderlined,SetFontUnderlined) \n    FontFaceName = property(GetFontFaceName,SetFontFaceName) \n    FontEncoding = property(GetFontEncoding,SetFontEncoding) \n    FontFamily = property(GetFontFamily,SetFontFamily) \n    CharacterStyleName = property(GetCharacterStyleName,SetCharacterStyleName) \n    ParagraphStyleName = property(GetParagraphStyleName,SetParagraphStyleName) \n    ListStyleName = property(GetListStyleName,SetListStyleName) \n    ParagraphSpacingAfter = property(GetParagraphSpacingAfter,SetParagraphSpacingAfter) \n    ParagraphSpacingBefore = property(GetParagraphSpacingBefore,SetParagraphSpacingBefore) \n    LineSpacing = property(GetLineSpacing,SetLineSpacing) \n    BulletStyle = property(GetBulletStyle,SetBulletStyle) \n    BulletNumber = property(GetBulletNumber,SetBulletNumber) \n    BulletText = property(GetBulletText,SetBulletText) \n    BulletFont = property(GetBulletFont,SetBulletFont) \n    BulletName = property(GetBulletName,SetBulletName) \n    URL = property(GetURL,SetURL) \n    TextEffects = property(GetTextEffects,SetTextEffects) \n    TextEffectFlags = property(GetTextEffectFlags,SetTextEffectFlags) \n    OutlineLevel = property(GetOutlineLevel,SetOutlineLevel) \n_controls_.TextAttr_swigregister(TextAttr)\nTextCtrlNameStr = cvar.TextCtrlNameStr\n\ndef TextAttr_Combine(*args, **kwargs):\n  \"\"\"TextAttr_Combine(TextAttr attr, TextAttr attrDef, TextCtrl text) -> TextAttr\"\"\"\n  return _controls_.TextAttr_Combine(*args, **kwargs)\n\ndef TextAttr_TabsEq(*args, **kwargs):\n  \"\"\"TextAttr_TabsEq(wxArrayInt tabs1, wxArrayInt tabs2) -> bool\"\"\"\n  return _controls_.TextAttr_TabsEq(*args, **kwargs)\n\ndef TextAttr_RemoveStyle(*args, **kwargs):\n  \"\"\"TextAttr_RemoveStyle(TextAttr destStyle, TextAttr style) -> bool\"\"\"\n  return _controls_.TextAttr_RemoveStyle(*args, **kwargs)\n\ndef TextAttr_CombineBitlists(*args, **kwargs):\n  \"\"\"TextAttr_CombineBitlists(int valueA, int valueB, int flagsA, int flagsB) -> bool\"\"\"\n  return _controls_.TextAttr_CombineBitlists(*args, **kwargs)\n\ndef TextAttr_BitlistsEqPartial(*args, **kwargs):\n  \"\"\"TextAttr_BitlistsEqPartial(int valueA, int valueB, int flags) -> bool\"\"\"\n  return _controls_.TextAttr_BitlistsEqPartial(*args, **kwargs)\n\ndef TextAttr_SplitParaCharStyles(*args, **kwargs):\n  \"\"\"TextAttr_SplitParaCharStyles(TextAttr style, TextAttr parStyle, TextAttr charStyle) -> bool\"\"\"\n  return _controls_.TextAttr_SplitParaCharStyles(*args, **kwargs)\n\nclass TextCtrl(_core.TextCtrlBase):\n    \"\"\"Proxy of C++ TextCtrl class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, String value=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, Validator validator=DefaultValidator, \n            String name=TextCtrlNameStr) -> TextCtrl\n        \"\"\"\n        _controls_.TextCtrl_swiginit(self,_controls_.new_TextCtrl(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, String value=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, Validator validator=DefaultValidator, \n            String name=TextCtrlNameStr) -> bool\n        \"\"\"\n        return _controls_.TextCtrl_Create(*args, **kwargs)\n\n    def IsSingleLine(*args, **kwargs):\n        \"\"\"IsSingleLine(self) -> bool\"\"\"\n        return _controls_.TextCtrl_IsSingleLine(*args, **kwargs)\n\n    def IsMultiLine(*args, **kwargs):\n        \"\"\"IsMultiLine(self) -> bool\"\"\"\n        return _controls_.TextCtrl_IsMultiLine(*args, **kwargs)\n\n    def EmulateKeyPress(*args, **kwargs):\n        \"\"\"EmulateKeyPress(self, KeyEvent event) -> bool\"\"\"\n        return _controls_.TextCtrl_EmulateKeyPress(*args, **kwargs)\n\n    def MacCheckSpelling(*args, **kwargs):\n        \"\"\"MacCheckSpelling(self, bool check)\"\"\"\n        return _controls_.TextCtrl_MacCheckSpelling(*args, **kwargs)\n\n    def SendTextUpdatedEvent(*args, **kwargs):\n        \"\"\"SendTextUpdatedEvent(self)\"\"\"\n        return _controls_.TextCtrl_SendTextUpdatedEvent(*args, **kwargs)\n\n    def write(*args, **kwargs):\n        \"\"\"write(self, String text)\"\"\"\n        return _controls_.TextCtrl_write(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.TextCtrl_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n_controls_.TextCtrl_swigregister(TextCtrl)\n\ndef PreTextCtrl(*args, **kwargs):\n    \"\"\"PreTextCtrl() -> TextCtrl\"\"\"\n    val = _controls_.new_PreTextCtrl(*args, **kwargs)\n    return val\n\ndef TextCtrl_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    TextCtrl_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.TextCtrl_GetClassDefaultAttributes(*args, **kwargs)\n\nwxEVT_COMMAND_TEXT_UPDATED = _controls_.wxEVT_COMMAND_TEXT_UPDATED\nwxEVT_COMMAND_TEXT_ENTER = _controls_.wxEVT_COMMAND_TEXT_ENTER\nwxEVT_COMMAND_TEXT_URL = _controls_.wxEVT_COMMAND_TEXT_URL\nwxEVT_COMMAND_TEXT_MAXLEN = _controls_.wxEVT_COMMAND_TEXT_MAXLEN\nclass TextUrlEvent(_core.CommandEvent):\n    \"\"\"Proxy of C++ TextUrlEvent class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"__init__(self, int winid, MouseEvent evtMouse, long start, long end) -> TextUrlEvent\"\"\"\n        _controls_.TextUrlEvent_swiginit(self,_controls_.new_TextUrlEvent(*args, **kwargs))\n    def GetMouseEvent(*args, **kwargs):\n        \"\"\"GetMouseEvent(self) -> MouseEvent\"\"\"\n        return _controls_.TextUrlEvent_GetMouseEvent(*args, **kwargs)\n\n    def GetURLStart(*args, **kwargs):\n        \"\"\"GetURLStart(self) -> long\"\"\"\n        return _controls_.TextUrlEvent_GetURLStart(*args, **kwargs)\n\n    def GetURLEnd(*args, **kwargs):\n        \"\"\"GetURLEnd(self) -> long\"\"\"\n        return _controls_.TextUrlEvent_GetURLEnd(*args, **kwargs)\n\n    MouseEvent = property(GetMouseEvent,doc=\"See `GetMouseEvent`\") \n    URLEnd = property(GetURLEnd,doc=\"See `GetURLEnd`\") \n    URLStart = property(GetURLStart,doc=\"See `GetURLStart`\") \n_controls_.TextUrlEvent_swigregister(TextUrlEvent)\n\nEVT_TEXT        = wx.PyEventBinder( wxEVT_COMMAND_TEXT_UPDATED, 1)\nEVT_TEXT_ENTER  = wx.PyEventBinder( wxEVT_COMMAND_TEXT_ENTER, 1)\nEVT_TEXT_URL    = wx.PyEventBinder( wxEVT_COMMAND_TEXT_URL, 1)\nEVT_TEXT_MAXLEN = wx.PyEventBinder( wxEVT_COMMAND_TEXT_MAXLEN, 1)\n\n#---------------------------------------------------------------------------\n\nclass ScrollBar(_core.Control):\n    \"\"\"Proxy of C++ ScrollBar class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=SB_HORIZONTAL, \n            Validator validator=DefaultValidator, String name=ScrollBarNameStr) -> ScrollBar\n        \"\"\"\n        _controls_.ScrollBar_swiginit(self,_controls_.new_ScrollBar(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=SB_HORIZONTAL, \n            Validator validator=DefaultValidator, String name=ScrollBarNameStr) -> bool\n\n        Do the 2nd phase and create the GUI control.\n        \"\"\"\n        return _controls_.ScrollBar_Create(*args, **kwargs)\n\n    def GetThumbPosition(*args, **kwargs):\n        \"\"\"GetThumbPosition(self) -> int\"\"\"\n        return _controls_.ScrollBar_GetThumbPosition(*args, **kwargs)\n\n    def GetThumbSize(*args, **kwargs):\n        \"\"\"GetThumbSize(self) -> int\"\"\"\n        return _controls_.ScrollBar_GetThumbSize(*args, **kwargs)\n\n    GetThumbLength = GetThumbSize \n    def GetPageSize(*args, **kwargs):\n        \"\"\"GetPageSize(self) -> int\"\"\"\n        return _controls_.ScrollBar_GetPageSize(*args, **kwargs)\n\n    def GetRange(*args, **kwargs):\n        \"\"\"GetRange(self) -> int\"\"\"\n        return _controls_.ScrollBar_GetRange(*args, **kwargs)\n\n    def IsVertical(*args, **kwargs):\n        \"\"\"IsVertical(self) -> bool\"\"\"\n        return _controls_.ScrollBar_IsVertical(*args, **kwargs)\n\n    def SetThumbPosition(*args, **kwargs):\n        \"\"\"SetThumbPosition(self, int viewStart)\"\"\"\n        return _controls_.ScrollBar_SetThumbPosition(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.ScrollBar_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n    PageSize = property(GetPageSize,doc=\"See `GetPageSize`\") \n    Range = property(GetRange,doc=\"See `GetRange`\") \n    ThumbPosition = property(GetThumbPosition,SetThumbPosition,doc=\"See `GetThumbPosition` and `SetThumbPosition`\") \n    ThumbSize = property(GetThumbSize,doc=\"See `GetThumbSize`\") \n_controls_.ScrollBar_swigregister(ScrollBar)\nScrollBarNameStr = cvar.ScrollBarNameStr\n\ndef PreScrollBar(*args, **kwargs):\n    \"\"\"PreScrollBar() -> ScrollBar\"\"\"\n    val = _controls_.new_PreScrollBar(*args, **kwargs)\n    return val\n\ndef ScrollBar_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    ScrollBar_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.ScrollBar_GetClassDefaultAttributes(*args, **kwargs)\n\n#---------------------------------------------------------------------------\n\nSP_HORIZONTAL = _controls_.SP_HORIZONTAL\nSP_VERTICAL = _controls_.SP_VERTICAL\nSP_ARROW_KEYS = _controls_.SP_ARROW_KEYS\nSP_WRAP = _controls_.SP_WRAP\nclass SpinButton(_core.Control):\n    \"\"\"Proxy of C++ SpinButton class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=SP_HORIZONTAL, \n            String name=SPIN_BUTTON_NAME) -> SpinButton\n        \"\"\"\n        _controls_.SpinButton_swiginit(self,_controls_.new_SpinButton(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=SP_HORIZONTAL, \n            String name=SPIN_BUTTON_NAME) -> bool\n        \"\"\"\n        return _controls_.SpinButton_Create(*args, **kwargs)\n\n    def GetValue(*args, **kwargs):\n        \"\"\"GetValue(self) -> int\"\"\"\n        return _controls_.SpinButton_GetValue(*args, **kwargs)\n\n    def GetMin(*args, **kwargs):\n        \"\"\"GetMin(self) -> int\"\"\"\n        return _controls_.SpinButton_GetMin(*args, **kwargs)\n\n    def GetMax(*args, **kwargs):\n        \"\"\"GetMax(self) -> int\"\"\"\n        return _controls_.SpinButton_GetMax(*args, **kwargs)\n\n    def SetValue(*args, **kwargs):\n        \"\"\"SetValue(self, int val)\"\"\"\n        return _controls_.SpinButton_SetValue(*args, **kwargs)\n\n    def SetMin(*args, **kwargs):\n        \"\"\"SetMin(self, int minVal)\"\"\"\n        return _controls_.SpinButton_SetMin(*args, **kwargs)\n\n    def SetMax(*args, **kwargs):\n        \"\"\"SetMax(self, int maxVal)\"\"\"\n        return _controls_.SpinButton_SetMax(*args, **kwargs)\n\n    def SetRange(*args, **kwargs):\n        \"\"\"SetRange(self, int minVal, int maxVal)\"\"\"\n        return _controls_.SpinButton_SetRange(*args, **kwargs)\n\n    def IsVertical(*args, **kwargs):\n        \"\"\"IsVertical(self) -> bool\"\"\"\n        return _controls_.SpinButton_IsVertical(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.SpinButton_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n    Max = property(GetMax,SetMax,doc=\"See `GetMax` and `SetMax`\") \n    Min = property(GetMin,SetMin,doc=\"See `GetMin` and `SetMin`\") \n    Value = property(GetValue,SetValue,doc=\"See `GetValue` and `SetValue`\") \n_controls_.SpinButton_swigregister(SpinButton)\nSPIN_BUTTON_NAME = cvar.SPIN_BUTTON_NAME\nSpinCtrlNameStr = cvar.SpinCtrlNameStr\n\ndef PreSpinButton(*args, **kwargs):\n    \"\"\"PreSpinButton() -> SpinButton\"\"\"\n    val = _controls_.new_PreSpinButton(*args, **kwargs)\n    return val\n\ndef SpinButton_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    SpinButton_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.SpinButton_GetClassDefaultAttributes(*args, **kwargs)\n\nclass SpinCtrl(_core.Control):\n    \"\"\"Proxy of C++ SpinCtrl class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, String value=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=wxSP_ARROW_KEYS|wxALIGN_RIGHT, \n            int min=0, int max=100, int initial=0, String name=SpinCtrlNameStr) -> SpinCtrl\n        \"\"\"\n        _controls_.SpinCtrl_swiginit(self,_controls_.new_SpinCtrl(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, String value=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=SP_ARROW_KEYS, int min=0, int max=100, \n            int initial=0, String name=SpinCtrlNameStr) -> bool\n        \"\"\"\n        return _controls_.SpinCtrl_Create(*args, **kwargs)\n\n    def GetValue(*args, **kwargs):\n        \"\"\"GetValue(self) -> int\"\"\"\n        return _controls_.SpinCtrl_GetValue(*args, **kwargs)\n\n    def SetValue(*args, **kwargs):\n        \"\"\"SetValue(self, int value)\"\"\"\n        return _controls_.SpinCtrl_SetValue(*args, **kwargs)\n\n    def SetValueString(*args, **kwargs):\n        \"\"\"SetValueString(self, String text)\"\"\"\n        return _controls_.SpinCtrl_SetValueString(*args, **kwargs)\n\n    def SetRange(*args, **kwargs):\n        \"\"\"SetRange(self, int minVal, int maxVal)\"\"\"\n        return _controls_.SpinCtrl_SetRange(*args, **kwargs)\n\n    def GetMin(*args, **kwargs):\n        \"\"\"GetMin(self) -> int\"\"\"\n        return _controls_.SpinCtrl_GetMin(*args, **kwargs)\n\n    def GetMax(*args, **kwargs):\n        \"\"\"GetMax(self) -> int\"\"\"\n        return _controls_.SpinCtrl_GetMax(*args, **kwargs)\n\n    def SetSelection(*args, **kwargs):\n        \"\"\"SetSelection(self, long from, long to)\"\"\"\n        return _controls_.SpinCtrl_SetSelection(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.SpinCtrl_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n    Max = property(GetMax,doc=\"See `GetMax`\") \n    Min = property(GetMin,doc=\"See `GetMin`\") \n    Value = property(GetValue,SetValue,doc=\"See `GetValue` and `SetValue`\") \n_controls_.SpinCtrl_swigregister(SpinCtrl)\n\ndef PreSpinCtrl(*args, **kwargs):\n    \"\"\"PreSpinCtrl() -> SpinCtrl\"\"\"\n    val = _controls_.new_PreSpinCtrl(*args, **kwargs)\n    return val\n\ndef SpinCtrl_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    SpinCtrl_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.SpinCtrl_GetClassDefaultAttributes(*args, **kwargs)\n\nclass SpinEvent(_core.NotifyEvent):\n    \"\"\"Proxy of C++ SpinEvent class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"__init__(self, EventType commandType=wxEVT_NULL, int winid=0) -> SpinEvent\"\"\"\n        _controls_.SpinEvent_swiginit(self,_controls_.new_SpinEvent(*args, **kwargs))\n    def GetPosition(*args, **kwargs):\n        \"\"\"GetPosition(self) -> int\"\"\"\n        return _controls_.SpinEvent_GetPosition(*args, **kwargs)\n\n    def SetPosition(*args, **kwargs):\n        \"\"\"SetPosition(self, int pos)\"\"\"\n        return _controls_.SpinEvent_SetPosition(*args, **kwargs)\n\n    def GetValue(*args, **kwargs):\n        \"\"\"GetValue(self) -> int\"\"\"\n        return _controls_.SpinEvent_GetValue(*args, **kwargs)\n\n    def SetValue(*args, **kwargs):\n        \"\"\"SetValue(self, int value)\"\"\"\n        return _controls_.SpinEvent_SetValue(*args, **kwargs)\n\n    Position = property(GetPosition,SetPosition) \n    Value = property(GetValue,SetValue) \n_controls_.SpinEvent_swigregister(SpinEvent)\n\nwxEVT_SPIN_UP = _controls_.wxEVT_SPIN_UP\nwxEVT_SPIN_DOWN = _controls_.wxEVT_SPIN_DOWN\nwxEVT_SPIN = _controls_.wxEVT_SPIN\nwxEVT_COMMAND_SPINCTRL_UPDATED = _controls_.wxEVT_COMMAND_SPINCTRL_UPDATED\nwxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED = _controls_.wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED\nEVT_SPIN_UP   = wx.PyEventBinder( wxEVT_SPIN_UP, 1)\nEVT_SPIN_DOWN = wx.PyEventBinder( wxEVT_SPIN_DOWN, 1)\nEVT_SPIN      = wx.PyEventBinder( wxEVT_SPIN, 1)\nEVT_SPINCTRL  = wx.PyEventBinder( wxEVT_COMMAND_SPINCTRL_UPDATED, 1)\nEVT_SPINCTRLDOUBLE  = wx.PyEventBinder( wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED, 1)    \n\nclass SpinCtrlDouble(_core.Control):\n    \"\"\"Proxy of C++ SpinCtrlDouble class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=ID_ANY, String value=wxEmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=wxSP_ARROW_KEYS|wxALIGN_RIGHT, \n            double min=0, double max=100, double initial=0, \n            double inc=1, String name=\"wxSpinCtrlDouble\") -> SpinCtrlDouble\n        \"\"\"\n        _controls_.SpinCtrlDouble_swiginit(self,_controls_.new_SpinCtrlDouble(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=ID_ANY, String value=wxEmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=SP_ARROW_KEYS, double min=0, \n            double max=100, double initial=0, double inc=1, \n            String name=\"wxSpinCtrlDouble\") -> bool\n        \"\"\"\n        return _controls_.SpinCtrlDouble_Create(*args, **kwargs)\n\n    def GetValue(*args, **kwargs):\n        \"\"\"GetValue(self) -> double\"\"\"\n        return _controls_.SpinCtrlDouble_GetValue(*args, **kwargs)\n\n    def GetMin(*args, **kwargs):\n        \"\"\"GetMin(self) -> double\"\"\"\n        return _controls_.SpinCtrlDouble_GetMin(*args, **kwargs)\n\n    def GetMax(*args, **kwargs):\n        \"\"\"GetMax(self) -> double\"\"\"\n        return _controls_.SpinCtrlDouble_GetMax(*args, **kwargs)\n\n    def GetIncrement(*args, **kwargs):\n        \"\"\"GetIncrement(self) -> double\"\"\"\n        return _controls_.SpinCtrlDouble_GetIncrement(*args, **kwargs)\n\n    def GetDigits(*args, **kwargs):\n        \"\"\"GetDigits(self) -> unsigned int\"\"\"\n        return _controls_.SpinCtrlDouble_GetDigits(*args, **kwargs)\n\n    def SetValue(*args, **kwargs):\n        \"\"\"SetValue(self, double value)\"\"\"\n        return _controls_.SpinCtrlDouble_SetValue(*args, **kwargs)\n\n    def SetRange(*args, **kwargs):\n        \"\"\"SetRange(self, double minVal, double maxVal)\"\"\"\n        return _controls_.SpinCtrlDouble_SetRange(*args, **kwargs)\n\n    def SetMin(self, minVal):\n        self.SetRange(minVal, self.GetMax())\n    def SetMax(self, maxVal):\n        self.SetRange(self.GetMin(), maxVal)\n\n    def SetIncrement(*args, **kwargs):\n        \"\"\"SetIncrement(self, double inc)\"\"\"\n        return _controls_.SpinCtrlDouble_SetIncrement(*args, **kwargs)\n\n    def SetDigits(*args, **kwargs):\n        \"\"\"SetDigits(self, unsigned int digits)\"\"\"\n        return _controls_.SpinCtrlDouble_SetDigits(*args, **kwargs)\n\n    Value = property(GetValue,SetValue) \n    Min = property(GetMin,SetMin) \n    Max = property(GetMax,SetMax) \n    Increment = property(GetIncrement,SetIncrement) \n    Digits = property(GetDigits,SetDigits) \n_controls_.SpinCtrlDouble_swigregister(SpinCtrlDouble)\n\ndef PreSpinCtrlDouble(*args, **kwargs):\n    \"\"\"PreSpinCtrlDouble() -> SpinCtrlDouble\"\"\"\n    val = _controls_.new_PreSpinCtrlDouble(*args, **kwargs)\n    return val\n\nclass SpinDoubleEvent(_core.NotifyEvent):\n    \"\"\"Proxy of C++ SpinDoubleEvent class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"__init__(self, EventType commandType=wxEVT_NULL, int winid=0, double value=0) -> SpinDoubleEvent\"\"\"\n        _controls_.SpinDoubleEvent_swiginit(self,_controls_.new_SpinDoubleEvent(*args, **kwargs))\n    def GetValue(*args, **kwargs):\n        \"\"\"GetValue(self) -> double\"\"\"\n        return _controls_.SpinDoubleEvent_GetValue(*args, **kwargs)\n\n    def SetValue(*args, **kwargs):\n        \"\"\"SetValue(self, double value)\"\"\"\n        return _controls_.SpinDoubleEvent_SetValue(*args, **kwargs)\n\n    Value = property(GetValue,SetValue) \n_controls_.SpinDoubleEvent_swigregister(SpinDoubleEvent)\n\nEVT_SPINCTRLDOUBLE = wx.PyEventBinder( wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED, 1 )\n\n#---------------------------------------------------------------------------\n\nclass RadioBox(_core.Control):\n    \"\"\"Proxy of C++ RadioBox class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, String label=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            wxArrayString choices=wxPyEmptyStringArray, \n            int majorDimension=0, long style=RA_HORIZONTAL, \n            Validator validator=DefaultValidator, \n            String name=RadioBoxNameStr) -> RadioBox\n        \"\"\"\n        if kwargs.has_key('point'): kwargs['pos'] = kwargs['point'];del kwargs['point']\n        _controls_.RadioBox_swiginit(self,_controls_.new_RadioBox(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, String label=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            wxArrayString choices=wxPyEmptyStringArray, \n            int majorDimension=0, long style=RA_HORIZONTAL, \n            Validator validator=DefaultValidator, \n            String name=RadioBoxNameStr) -> bool\n        \"\"\"\n        return _controls_.RadioBox_Create(*args, **kwargs)\n\n    def SetSelection(*args, **kwargs):\n        \"\"\"SetSelection(self, int n)\"\"\"\n        return _controls_.RadioBox_SetSelection(*args, **kwargs)\n\n    def GetSelection(*args, **kwargs):\n        \"\"\"GetSelection(self) -> int\"\"\"\n        return _controls_.RadioBox_GetSelection(*args, **kwargs)\n\n    def GetStringSelection(*args, **kwargs):\n        \"\"\"GetStringSelection(self) -> String\"\"\"\n        return _controls_.RadioBox_GetStringSelection(*args, **kwargs)\n\n    def SetStringSelection(*args, **kwargs):\n        \"\"\"SetStringSelection(self, String s) -> bool\"\"\"\n        return _controls_.RadioBox_SetStringSelection(*args, **kwargs)\n\n    def GetCount(*args, **kwargs):\n        \"\"\"GetCount(self) -> size_t\"\"\"\n        return _controls_.RadioBox_GetCount(*args, **kwargs)\n\n    def FindString(*args, **kwargs):\n        \"\"\"FindString(self, String s) -> int\"\"\"\n        return _controls_.RadioBox_FindString(*args, **kwargs)\n\n    def GetString(*args, **kwargs):\n        \"\"\"GetString(self, int n) -> String\"\"\"\n        return _controls_.RadioBox_GetString(*args, **kwargs)\n\n    def SetString(*args, **kwargs):\n        \"\"\"SetString(self, int n, String label)\"\"\"\n        return _controls_.RadioBox_SetString(*args, **kwargs)\n\n    GetItemLabel = GetString \n    SetItemLabel = SetString \n    def EnableItem(*args, **kwargs):\n        \"\"\"EnableItem(self, unsigned int n, bool enable=True)\"\"\"\n        return _controls_.RadioBox_EnableItem(*args, **kwargs)\n\n    def ShowItem(*args, **kwargs):\n        \"\"\"ShowItem(self, unsigned int n, bool show=True)\"\"\"\n        return _controls_.RadioBox_ShowItem(*args, **kwargs)\n\n    def IsItemEnabled(*args, **kwargs):\n        \"\"\"IsItemEnabled(self, unsigned int n) -> bool\"\"\"\n        return _controls_.RadioBox_IsItemEnabled(*args, **kwargs)\n\n    def IsItemShown(*args, **kwargs):\n        \"\"\"IsItemShown(self, unsigned int n) -> bool\"\"\"\n        return _controls_.RadioBox_IsItemShown(*args, **kwargs)\n\n    def GetColumnCount(*args, **kwargs):\n        \"\"\"GetColumnCount(self) -> unsigned int\"\"\"\n        return _controls_.RadioBox_GetColumnCount(*args, **kwargs)\n\n    def GetRowCount(*args, **kwargs):\n        \"\"\"GetRowCount(self) -> unsigned int\"\"\"\n        return _controls_.RadioBox_GetRowCount(*args, **kwargs)\n\n    def GetNextItem(*args, **kwargs):\n        \"\"\"GetNextItem(self, int item, int dir, long style) -> int\"\"\"\n        return _controls_.RadioBox_GetNextItem(*args, **kwargs)\n\n    def SetItemToolTip(*args, **kwargs):\n        \"\"\"SetItemToolTip(self, unsigned int item, String text)\"\"\"\n        return _controls_.RadioBox_SetItemToolTip(*args, **kwargs)\n\n    def GetItemToolTip(*args, **kwargs):\n        \"\"\"GetItemToolTip(self, unsigned int item) -> ToolTip\"\"\"\n        return _controls_.RadioBox_GetItemToolTip(*args, **kwargs)\n\n    def SetItemHelpText(*args, **kwargs):\n        \"\"\"SetItemHelpText(self, unsigned int n, String helpText)\"\"\"\n        return _controls_.RadioBox_SetItemHelpText(*args, **kwargs)\n\n    def GetItemHelpText(*args, **kwargs):\n        \"\"\"GetItemHelpText(self, unsigned int n) -> String\"\"\"\n        return _controls_.RadioBox_GetItemHelpText(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.RadioBox_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n    ColumnCount = property(GetColumnCount,doc=\"See `GetColumnCount`\") \n    Count = property(GetCount,doc=\"See `GetCount`\") \n    RowCount = property(GetRowCount,doc=\"See `GetRowCount`\") \n    Selection = property(GetSelection,SetSelection,doc=\"See `GetSelection` and `SetSelection`\") \n    StringSelection = property(GetStringSelection,SetStringSelection,doc=\"See `GetStringSelection` and `SetStringSelection`\") \n_controls_.RadioBox_swigregister(RadioBox)\nRadioBoxNameStr = cvar.RadioBoxNameStr\nRadioButtonNameStr = cvar.RadioButtonNameStr\n\ndef PreRadioBox(*args, **kwargs):\n    \"\"\"PreRadioBox() -> RadioBox\"\"\"\n    val = _controls_.new_PreRadioBox(*args, **kwargs)\n    return val\n\ndef RadioBox_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    RadioBox_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.RadioBox_GetClassDefaultAttributes(*args, **kwargs)\n\n#---------------------------------------------------------------------------\n\nclass RadioButton(_core.Control):\n    \"\"\"Proxy of C++ RadioButton class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, String label=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, Validator validator=DefaultValidator, \n            String name=RadioButtonNameStr) -> RadioButton\n        \"\"\"\n        _controls_.RadioButton_swiginit(self,_controls_.new_RadioButton(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, String label=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, Validator validator=DefaultValidator, \n            String name=RadioButtonNameStr) -> bool\n        \"\"\"\n        return _controls_.RadioButton_Create(*args, **kwargs)\n\n    def GetValue(*args, **kwargs):\n        \"\"\"GetValue(self) -> bool\"\"\"\n        return _controls_.RadioButton_GetValue(*args, **kwargs)\n\n    def SetValue(*args, **kwargs):\n        \"\"\"SetValue(self, bool value)\"\"\"\n        return _controls_.RadioButton_SetValue(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.RadioButton_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n    Value = property(GetValue,SetValue,doc=\"See `GetValue` and `SetValue`\") \n_controls_.RadioButton_swigregister(RadioButton)\n\ndef PreRadioButton(*args, **kwargs):\n    \"\"\"PreRadioButton() -> RadioButton\"\"\"\n    val = _controls_.new_PreRadioButton(*args, **kwargs)\n    return val\n\ndef RadioButton_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    RadioButton_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.RadioButton_GetClassDefaultAttributes(*args, **kwargs)\n\n#---------------------------------------------------------------------------\n\nSL_HORIZONTAL = _controls_.SL_HORIZONTAL\nSL_VERTICAL = _controls_.SL_VERTICAL\nSL_TICKS = _controls_.SL_TICKS\nSL_AUTOTICKS = _controls_.SL_AUTOTICKS\nSL_LEFT = _controls_.SL_LEFT\nSL_TOP = _controls_.SL_TOP\nSL_RIGHT = _controls_.SL_RIGHT\nSL_BOTTOM = _controls_.SL_BOTTOM\nSL_BOTH = _controls_.SL_BOTH\nSL_SELRANGE = _controls_.SL_SELRANGE\nSL_INVERSE = _controls_.SL_INVERSE\nSL_MIN_MAX_LABELS = _controls_.SL_MIN_MAX_LABELS\nSL_VALUE_LABEL = _controls_.SL_VALUE_LABEL\nSL_LABELS = _controls_.SL_LABELS\nclass Slider(_core.Control):\n    \"\"\"Proxy of C++ Slider class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, int value=0, int minValue=0, \n            int maxValue=100, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=SL_HORIZONTAL, \n            Validator validator=DefaultValidator, \n            String name=SliderNameStr) -> Slider\n        \"\"\"\n        if kwargs.has_key('point'): kwargs['pos'] = kwargs['point'];del kwargs['point']\n        _controls_.Slider_swiginit(self,_controls_.new_Slider(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, int value=0, int minValue=0, \n            int maxValue=100, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=SL_HORIZONTAL, \n            Validator validator=DefaultValidator, \n            String name=SliderNameStr) -> bool\n        \"\"\"\n        return _controls_.Slider_Create(*args, **kwargs)\n\n    def GetValue(*args, **kwargs):\n        \"\"\"GetValue(self) -> int\"\"\"\n        return _controls_.Slider_GetValue(*args, **kwargs)\n\n    def SetValue(*args, **kwargs):\n        \"\"\"SetValue(self, int value)\"\"\"\n        return _controls_.Slider_SetValue(*args, **kwargs)\n\n    def GetMin(*args, **kwargs):\n        \"\"\"GetMin(self) -> int\"\"\"\n        return _controls_.Slider_GetMin(*args, **kwargs)\n\n    def GetMax(*args, **kwargs):\n        \"\"\"GetMax(self) -> int\"\"\"\n        return _controls_.Slider_GetMax(*args, **kwargs)\n\n    def SetMin(*args, **kwargs):\n        \"\"\"SetMin(self, int minValue)\"\"\"\n        return _controls_.Slider_SetMin(*args, **kwargs)\n\n    def SetMax(*args, **kwargs):\n        \"\"\"SetMax(self, int maxValue)\"\"\"\n        return _controls_.Slider_SetMax(*args, **kwargs)\n\n    def SetRange(*args, **kwargs):\n        \"\"\"SetRange(self, int minValue, int maxValue)\"\"\"\n        return _controls_.Slider_SetRange(*args, **kwargs)\n\n    def GetRange(self):\n        return self.GetMin(), self.GetMax()\n\n    def SetLineSize(*args, **kwargs):\n        \"\"\"SetLineSize(self, int lineSize)\"\"\"\n        return _controls_.Slider_SetLineSize(*args, **kwargs)\n\n    def SetPageSize(*args, **kwargs):\n        \"\"\"SetPageSize(self, int pageSize)\"\"\"\n        return _controls_.Slider_SetPageSize(*args, **kwargs)\n\n    def GetLineSize(*args, **kwargs):\n        \"\"\"GetLineSize(self) -> int\"\"\"\n        return _controls_.Slider_GetLineSize(*args, **kwargs)\n\n    def GetPageSize(*args, **kwargs):\n        \"\"\"GetPageSize(self) -> int\"\"\"\n        return _controls_.Slider_GetPageSize(*args, **kwargs)\n\n    def SetThumbLength(*args, **kwargs):\n        \"\"\"SetThumbLength(self, int lenPixels)\"\"\"\n        return _controls_.Slider_SetThumbLength(*args, **kwargs)\n\n    def GetThumbLength(*args, **kwargs):\n        \"\"\"GetThumbLength(self) -> int\"\"\"\n        return _controls_.Slider_GetThumbLength(*args, **kwargs)\n\n    def SetTickFreq(*args, **kwargs):\n        \"\"\"SetTickFreq(self, int n, int pos=1)\"\"\"\n        return _controls_.Slider_SetTickFreq(*args, **kwargs)\n\n    def GetTickFreq(*args, **kwargs):\n        \"\"\"GetTickFreq(self) -> int\"\"\"\n        return _controls_.Slider_GetTickFreq(*args, **kwargs)\n\n    def ClearTicks(*args, **kwargs):\n        \"\"\"ClearTicks(self)\"\"\"\n        return _controls_.Slider_ClearTicks(*args, **kwargs)\n\n    def SetTick(*args, **kwargs):\n        \"\"\"SetTick(self, int tickPos)\"\"\"\n        return _controls_.Slider_SetTick(*args, **kwargs)\n\n    def ClearSel(*args, **kwargs):\n        \"\"\"ClearSel(self)\"\"\"\n        return _controls_.Slider_ClearSel(*args, **kwargs)\n\n    def GetSelEnd(*args, **kwargs):\n        \"\"\"GetSelEnd(self) -> int\"\"\"\n        return _controls_.Slider_GetSelEnd(*args, **kwargs)\n\n    def GetSelStart(*args, **kwargs):\n        \"\"\"GetSelStart(self) -> int\"\"\"\n        return _controls_.Slider_GetSelStart(*args, **kwargs)\n\n    def SetSelection(*args, **kwargs):\n        \"\"\"SetSelection(self, int min, int max)\"\"\"\n        return _controls_.Slider_SetSelection(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.Slider_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n    LineSize = property(GetLineSize,SetLineSize,doc=\"See `GetLineSize` and `SetLineSize`\") \n    Max = property(GetMax,SetMax,doc=\"See `GetMax` and `SetMax`\") \n    Min = property(GetMin,SetMin,doc=\"See `GetMin` and `SetMin`\") \n    PageSize = property(GetPageSize,SetPageSize,doc=\"See `GetPageSize` and `SetPageSize`\") \n    SelEnd = property(GetSelEnd,doc=\"See `GetSelEnd`\") \n    SelStart = property(GetSelStart,doc=\"See `GetSelStart`\") \n    ThumbLength = property(GetThumbLength,SetThumbLength,doc=\"See `GetThumbLength` and `SetThumbLength`\") \n    TickFreq = property(GetTickFreq,SetTickFreq,doc=\"See `GetTickFreq` and `SetTickFreq`\") \n    Value = property(GetValue,SetValue,doc=\"See `GetValue` and `SetValue`\") \n_controls_.Slider_swigregister(Slider)\nSliderNameStr = cvar.SliderNameStr\n\ndef PreSlider(*args, **kwargs):\n    \"\"\"PreSlider() -> Slider\"\"\"\n    val = _controls_.new_PreSlider(*args, **kwargs)\n    return val\n\ndef Slider_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    Slider_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.Slider_GetClassDefaultAttributes(*args, **kwargs)\n\n#---------------------------------------------------------------------------\n\nwxEVT_COMMAND_TOGGLEBUTTON_CLICKED = _controls_.wxEVT_COMMAND_TOGGLEBUTTON_CLICKED\nEVT_TOGGLEBUTTON = wx.PyEventBinder( wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, 1)\n\nclass ToggleButton(AnyButton):\n    \"\"\"Proxy of C++ ToggleButton class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, String label=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, Validator validator=DefaultValidator, \n            String name=ToggleButtonNameStr) -> ToggleButton\n        \"\"\"\n        _controls_.ToggleButton_swiginit(self,_controls_.new_ToggleButton(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, String label=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, Validator validator=DefaultValidator, \n            String name=ToggleButtonNameStr) -> bool\n        \"\"\"\n        return _controls_.ToggleButton_Create(*args, **kwargs)\n\n    def SetValue(*args, **kwargs):\n        \"\"\"SetValue(self, bool value)\"\"\"\n        return _controls_.ToggleButton_SetValue(*args, **kwargs)\n\n    def GetValue(*args, **kwargs):\n        \"\"\"GetValue(self) -> bool\"\"\"\n        return _controls_.ToggleButton_GetValue(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.ToggleButton_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n    Value = property(GetValue,SetValue,doc=\"See `GetValue` and `SetValue`\") \n_controls_.ToggleButton_swigregister(ToggleButton)\nToggleButtonNameStr = cvar.ToggleButtonNameStr\n\ndef PreToggleButton(*args, **kwargs):\n    \"\"\"PreToggleButton() -> ToggleButton\"\"\"\n    val = _controls_.new_PreToggleButton(*args, **kwargs)\n    return val\n\ndef ToggleButton_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    ToggleButton_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.ToggleButton_GetClassDefaultAttributes(*args, **kwargs)\n\n#---------------------------------------------------------------------------\n\nNB_FIXEDWIDTH = _controls_.NB_FIXEDWIDTH\nNB_TOP = _controls_.NB_TOP\nNB_LEFT = _controls_.NB_LEFT\nNB_RIGHT = _controls_.NB_RIGHT\nNB_BOTTOM = _controls_.NB_BOTTOM\nNB_MULTILINE = _controls_.NB_MULTILINE\nNB_NOPAGETHEME = _controls_.NB_NOPAGETHEME\nNB_HITTEST_NOWHERE = _controls_.NB_HITTEST_NOWHERE\nNB_HITTEST_ONICON = _controls_.NB_HITTEST_ONICON\nNB_HITTEST_ONLABEL = _controls_.NB_HITTEST_ONLABEL\nNB_HITTEST_ONITEM = _controls_.NB_HITTEST_ONITEM\nNB_HITTEST_ONPAGE = _controls_.NB_HITTEST_ONPAGE\nclass Notebook(_core.BookCtrlBase):\n    \"\"\"Proxy of C++ Notebook class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=0, String name=NotebookNameStr) -> Notebook\n        \"\"\"\n        _controls_.Notebook_swiginit(self,_controls_.new_Notebook(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=0, String name=NotebookNameStr) -> bool\n        \"\"\"\n        return _controls_.Notebook_Create(*args, **kwargs)\n\n    def GetRowCount(*args, **kwargs):\n        \"\"\"GetRowCount(self) -> int\"\"\"\n        return _controls_.Notebook_GetRowCount(*args, **kwargs)\n\n    def SetPadding(*args, **kwargs):\n        \"\"\"SetPadding(self, Size padding)\"\"\"\n        return _controls_.Notebook_SetPadding(*args, **kwargs)\n\n    def SetTabSize(*args, **kwargs):\n        \"\"\"SetTabSize(self, Size sz)\"\"\"\n        return _controls_.Notebook_SetTabSize(*args, **kwargs)\n\n    def GetThemeBackgroundColour(*args, **kwargs):\n        \"\"\"GetThemeBackgroundColour(self) -> Colour\"\"\"\n        return _controls_.Notebook_GetThemeBackgroundColour(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.Notebook_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n    def SendPageChangingEvent(*args, **kwargs):\n        \"\"\"SendPageChangingEvent(self, int nPage) -> bool\"\"\"\n        return _controls_.Notebook_SendPageChangingEvent(*args, **kwargs)\n\n    def SendPageChangedEvent(*args, **kwargs):\n        \"\"\"SendPageChangedEvent(self, int nPageOld, int nPageNew=-1)\"\"\"\n        return _controls_.Notebook_SendPageChangedEvent(*args, **kwargs)\n\n    RowCount = property(GetRowCount,doc=\"See `GetRowCount`\") \n    ThemeBackgroundColour = property(GetThemeBackgroundColour,doc=\"See `GetThemeBackgroundColour`\") \n_controls_.Notebook_swigregister(Notebook)\nNotebookNameStr = cvar.NotebookNameStr\n\ndef PreNotebook(*args, **kwargs):\n    \"\"\"PreNotebook() -> Notebook\"\"\"\n    val = _controls_.new_PreNotebook(*args, **kwargs)\n    return val\n\ndef Notebook_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    Notebook_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.Notebook_GetClassDefaultAttributes(*args, **kwargs)\n\nNotebookEvent = wx.BookCtrlEvent\n\nwxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED = _controls_.wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED\nwxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING = _controls_.wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING\n# wxNotebook events\nEVT_NOTEBOOK_PAGE_CHANGED  = wx.PyEventBinder( wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, 1 )\nEVT_NOTEBOOK_PAGE_CHANGING = wx.PyEventBinder( wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING, 1 )\n\n#----------------------------------------------------------------------------\n\nclass NotebookPage(wx.Panel):\n    \"\"\"\n    There is an old (and apparently unsolvable) bug when placing a\n    window with a nonstandard background colour in a wx.Notebook on\n    wxGTK1, as the notbooks's background colour would always be used\n    when the window is refreshed.  The solution is to place a panel in\n    the notbook and the coloured window on the panel, sized to cover\n    the panel.  This simple class does that for you, just put an\n    instance of this in the notebook and make your regular window a\n    child of this one and it will handle the resize for you.\n    \"\"\"\n    def __init__(self, parent, id=-1,\n                 pos=wx.DefaultPosition, size=wx.DefaultSize,\n                 style=wx.TAB_TRAVERSAL, name=\"panel\"):\n        wx.Panel.__init__(self, parent, id, pos, size, style, name)\n        self.child = None\n        self.Bind(wx.EVT_SIZE, self.OnSize)\n\n    def OnSize(self, evt):\n        if self.child is None:\n            children = self.GetChildren()\n            if len(children):\n                self.child = children[0]\n        if self.child:\n            self.child.SetPosition((0,0))\n            self.child.SetSize(self.GetSize())\n\n\n#---------------------------------------------------------------------------\n\nLB_DEFAULT = _controls_.LB_DEFAULT\nLB_TOP = _controls_.LB_TOP\nLB_BOTTOM = _controls_.LB_BOTTOM\nLB_LEFT = _controls_.LB_LEFT\nLB_RIGHT = _controls_.LB_RIGHT\nLB_ALIGN_MASK = _controls_.LB_ALIGN_MASK\nclass Listbook(_core.BookCtrlBase):\n    \"\"\"Proxy of C++ Listbook class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=0, String name=EmptyString) -> Listbook\n        \"\"\"\n        _controls_.Listbook_swiginit(self,_controls_.new_Listbook(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=0, String name=EmptyString) -> bool\n        \"\"\"\n        return _controls_.Listbook_Create(*args, **kwargs)\n\n    def GetListView(*args, **kwargs):\n        \"\"\"GetListView(self) -> ListView\"\"\"\n        return _controls_.Listbook_GetListView(*args, **kwargs)\n\n    ListView = property(GetListView,doc=\"See `GetListView`\") \n_controls_.Listbook_swigregister(Listbook)\n\ndef PreListbook(*args, **kwargs):\n    \"\"\"PreListbook() -> Listbook\"\"\"\n    val = _controls_.new_PreListbook(*args, **kwargs)\n    return val\n\nListbookEvent = wx.BookCtrlEvent\n\nwxEVT_COMMAND_LISTBOOK_PAGE_CHANGED = _controls_.wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED\nwxEVT_COMMAND_LISTBOOK_PAGE_CHANGING = _controls_.wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING\nEVT_LISTBOOK_PAGE_CHANGED  = wx.PyEventBinder( wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED, 1 )\nEVT_LISTBOOK_PAGE_CHANGING = wx.PyEventBinder( wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING, 1 )\n\nCHB_DEFAULT = _controls_.CHB_DEFAULT\nCHB_TOP = _controls_.CHB_TOP\nCHB_BOTTOM = _controls_.CHB_BOTTOM\nCHB_LEFT = _controls_.CHB_LEFT\nCHB_RIGHT = _controls_.CHB_RIGHT\nCHB_ALIGN_MASK = _controls_.CHB_ALIGN_MASK\nclass Choicebook(_core.BookCtrlBase):\n    \"\"\"Proxy of C++ Choicebook class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, String name=EmptyString) -> Choicebook\n        \"\"\"\n        _controls_.Choicebook_swiginit(self,_controls_.new_Choicebook(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, String name=EmptyString) -> bool\n        \"\"\"\n        return _controls_.Choicebook_Create(*args, **kwargs)\n\n    def GetChoiceCtrl(*args, **kwargs):\n        \"\"\"GetChoiceCtrl(self) -> Choice\"\"\"\n        return _controls_.Choicebook_GetChoiceCtrl(*args, **kwargs)\n\n    ChoiceCtrl = property(GetChoiceCtrl,doc=\"See `GetChoiceCtrl`\") \n_controls_.Choicebook_swigregister(Choicebook)\n\ndef PreChoicebook(*args, **kwargs):\n    \"\"\"PreChoicebook() -> Choicebook\"\"\"\n    val = _controls_.new_PreChoicebook(*args, **kwargs)\n    return val\n\nChoicebookEvent = wx.BookCtrlEvent\n\nwxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED = _controls_.wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED\nwxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING = _controls_.wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING\nEVT_CHOICEBOOK_PAGE_CHANGED  = wx.PyEventBinder( wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED, 1 )\nEVT_CHOICEBOOK_PAGE_CHANGING = wx.PyEventBinder( wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING, 1 )\n\n#---------------------------------------------------------------------------\n\nclass Treebook(_core.BookCtrlBase):\n    \"\"\"Proxy of C++ Treebook class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=BK_DEFAULT, \n            String name=EmptyString) -> Treebook\n        \"\"\"\n        _controls_.Treebook_swiginit(self,_controls_.new_Treebook(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=BK_DEFAULT, \n            String name=EmptyString) -> bool\n        \"\"\"\n        return _controls_.Treebook_Create(*args, **kwargs)\n\n    def InsertSubPage(*args, **kwargs):\n        \"\"\"\n        InsertSubPage(self, size_t pos, Window page, String text, bool select=False, \n            int imageId=NOT_FOUND) -> bool\n        \"\"\"\n        return _controls_.Treebook_InsertSubPage(*args, **kwargs)\n\n    def AddSubPage(*args, **kwargs):\n        \"\"\"AddSubPage(self, Window page, String text, bool select=False, int imageId=NOT_FOUND) -> bool\"\"\"\n        return _controls_.Treebook_AddSubPage(*args, **kwargs)\n\n    def IsNodeExpanded(*args, **kwargs):\n        \"\"\"IsNodeExpanded(self, size_t pos) -> bool\"\"\"\n        return _controls_.Treebook_IsNodeExpanded(*args, **kwargs)\n\n    def ExpandNode(*args, **kwargs):\n        \"\"\"ExpandNode(self, size_t pos, bool expand=True) -> bool\"\"\"\n        return _controls_.Treebook_ExpandNode(*args, **kwargs)\n\n    def CollapseNode(*args, **kwargs):\n        \"\"\"CollapseNode(self, size_t pos) -> bool\"\"\"\n        return _controls_.Treebook_CollapseNode(*args, **kwargs)\n\n    def GetPageParent(*args, **kwargs):\n        \"\"\"GetPageParent(self, size_t pos) -> int\"\"\"\n        return _controls_.Treebook_GetPageParent(*args, **kwargs)\n\n    def GetTreeCtrl(*args, **kwargs):\n        \"\"\"GetTreeCtrl(self) -> TreeCtrl\"\"\"\n        return _controls_.Treebook_GetTreeCtrl(*args, **kwargs)\n\n    TreeCtrl = property(GetTreeCtrl,doc=\"See `GetTreeCtrl`\") \n_controls_.Treebook_swigregister(Treebook)\n\ndef PreTreebook(*args, **kwargs):\n    \"\"\"PreTreebook() -> Treebook\"\"\"\n    val = _controls_.new_PreTreebook(*args, **kwargs)\n    return val\n\nTreebookEvent = wx.BookCtrlEvent\n\nwxEVT_COMMAND_TREEBOOK_PAGE_CHANGED = _controls_.wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED\nwxEVT_COMMAND_TREEBOOK_PAGE_CHANGING = _controls_.wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING\nwxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED = _controls_.wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED\nwxEVT_COMMAND_TREEBOOK_NODE_EXPANDED = _controls_.wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED\nEVT_TREEBOOK_PAGE_CHANGED = wx.PyEventBinder( wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED, 1 )\nEVT_TREEBOOK_PAGE_CHANGING = wx.PyEventBinder( wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING, 1)\nEVT_TREEBOOK_NODE_COLLAPSED = wx.PyEventBinder( wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED, 1 )\nEVT_TREEBOOK_NODE_EXPANDED = wx.PyEventBinder( wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED, 1 )\n\n#---------------------------------------------------------------------------\n\nclass Toolbook(_core.BookCtrlBase):\n    \"\"\"Proxy of C++ Toolbook class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=BK_DEFAULT, \n            String name=EmptyString) -> Toolbook\n        \"\"\"\n        _controls_.Toolbook_swiginit(self,_controls_.new_Toolbook(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id, Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, String name=wxEmptyString) -> bool\n        \"\"\"\n        return _controls_.Toolbook_Create(*args, **kwargs)\n\n    def GetToolBar(*args, **kwargs):\n        \"\"\"GetToolBar(self) -> ToolBarBase\"\"\"\n        return _controls_.Toolbook_GetToolBar(*args, **kwargs)\n\n    def Realize(*args, **kwargs):\n        \"\"\"Realize(self)\"\"\"\n        return _controls_.Toolbook_Realize(*args, **kwargs)\n\n    ToolBar = property(GetToolBar,doc=\"See `GetToolBar`\") \n_controls_.Toolbook_swigregister(Toolbook)\n\ndef PreToolbook(*args, **kwargs):\n    \"\"\"PreToolbook() -> Toolbook\"\"\"\n    val = _controls_.new_PreToolbook(*args, **kwargs)\n    return val\n\nToolbookEvent = wx.BookCtrlEvent\n\nwxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED = _controls_.wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED\nwxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING = _controls_.wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING\nEVT_TOOLBOOK_PAGE_CHANGED = wx.PyEventBinder( wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED, 1)\nEVT_TOOLBOOK_PAGE_CHANGING = wx.PyEventBinder( wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING, 1)\n\n#---------------------------------------------------------------------------\n\nTOOL_STYLE_BUTTON = _controls_.TOOL_STYLE_BUTTON\nTOOL_STYLE_SEPARATOR = _controls_.TOOL_STYLE_SEPARATOR\nTOOL_STYLE_CONTROL = _controls_.TOOL_STYLE_CONTROL\nTB_HORIZONTAL = _controls_.TB_HORIZONTAL\nTB_VERTICAL = _controls_.TB_VERTICAL\nTB_TOP = _controls_.TB_TOP\nTB_LEFT = _controls_.TB_LEFT\nTB_BOTTOM = _controls_.TB_BOTTOM\nTB_RIGHT = _controls_.TB_RIGHT\nTB_3DBUTTONS = _controls_.TB_3DBUTTONS\nTB_FLAT = _controls_.TB_FLAT\nTB_DOCKABLE = _controls_.TB_DOCKABLE\nTB_NOICONS = _controls_.TB_NOICONS\nTB_TEXT = _controls_.TB_TEXT\nTB_NODIVIDER = _controls_.TB_NODIVIDER\nTB_NOALIGN = _controls_.TB_NOALIGN\nTB_HORZ_LAYOUT = _controls_.TB_HORZ_LAYOUT\nTB_HORZ_TEXT = _controls_.TB_HORZ_TEXT\nTB_NO_TOOLTIPS = _controls_.TB_NO_TOOLTIPS\nclass ToolBarToolBase(_core.Object):\n    \"\"\"Proxy of C++ ToolBarToolBase class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    def __init__(self): raise AttributeError, \"No constructor defined\"\n    __repr__ = _swig_repr\n    def GetId(*args, **kwargs):\n        \"\"\"GetId(self) -> int\"\"\"\n        return _controls_.ToolBarToolBase_GetId(*args, **kwargs)\n\n    def GetControl(*args, **kwargs):\n        \"\"\"GetControl(self) -> Control\"\"\"\n        return _controls_.ToolBarToolBase_GetControl(*args, **kwargs)\n\n    def GetToolBar(*args, **kwargs):\n        \"\"\"GetToolBar(self) -> ToolBarBase\"\"\"\n        return _controls_.ToolBarToolBase_GetToolBar(*args, **kwargs)\n\n    def IsStretchable(*args, **kwargs):\n        \"\"\"IsStretchable(self) -> bool\"\"\"\n        return _controls_.ToolBarToolBase_IsStretchable(*args, **kwargs)\n\n    def IsButton(*args, **kwargs):\n        \"\"\"IsButton(self) -> int\"\"\"\n        return _controls_.ToolBarToolBase_IsButton(*args, **kwargs)\n\n    def IsControl(*args, **kwargs):\n        \"\"\"IsControl(self) -> int\"\"\"\n        return _controls_.ToolBarToolBase_IsControl(*args, **kwargs)\n\n    def IsSeparator(*args, **kwargs):\n        \"\"\"IsSeparator(self) -> int\"\"\"\n        return _controls_.ToolBarToolBase_IsSeparator(*args, **kwargs)\n\n    def IsStretchableSpace(*args, **kwargs):\n        \"\"\"IsStretchableSpace(self) -> bool\"\"\"\n        return _controls_.ToolBarToolBase_IsStretchableSpace(*args, **kwargs)\n\n    def GetStyle(*args, **kwargs):\n        \"\"\"GetStyle(self) -> int\"\"\"\n        return _controls_.ToolBarToolBase_GetStyle(*args, **kwargs)\n\n    def GetKind(*args, **kwargs):\n        \"\"\"GetKind(self) -> int\"\"\"\n        return _controls_.ToolBarToolBase_GetKind(*args, **kwargs)\n\n    def MakeStretchable(*args, **kwargs):\n        \"\"\"MakeStretchable(self)\"\"\"\n        return _controls_.ToolBarToolBase_MakeStretchable(*args, **kwargs)\n\n    def IsEnabled(*args, **kwargs):\n        \"\"\"IsEnabled(self) -> bool\"\"\"\n        return _controls_.ToolBarToolBase_IsEnabled(*args, **kwargs)\n\n    def IsToggled(*args, **kwargs):\n        \"\"\"IsToggled(self) -> bool\"\"\"\n        return _controls_.ToolBarToolBase_IsToggled(*args, **kwargs)\n\n    def CanBeToggled(*args, **kwargs):\n        \"\"\"CanBeToggled(self) -> bool\"\"\"\n        return _controls_.ToolBarToolBase_CanBeToggled(*args, **kwargs)\n\n    def GetNormalBitmap(*args, **kwargs):\n        \"\"\"GetNormalBitmap(self) -> Bitmap\"\"\"\n        return _controls_.ToolBarToolBase_GetNormalBitmap(*args, **kwargs)\n\n    def GetDisabledBitmap(*args, **kwargs):\n        \"\"\"GetDisabledBitmap(self) -> Bitmap\"\"\"\n        return _controls_.ToolBarToolBase_GetDisabledBitmap(*args, **kwargs)\n\n    def GetBitmap(*args, **kwargs):\n        \"\"\"GetBitmap(self) -> Bitmap\"\"\"\n        return _controls_.ToolBarToolBase_GetBitmap(*args, **kwargs)\n\n    def GetLabel(*args, **kwargs):\n        \"\"\"GetLabel(self) -> String\"\"\"\n        return _controls_.ToolBarToolBase_GetLabel(*args, **kwargs)\n\n    def GetShortHelp(*args, **kwargs):\n        \"\"\"GetShortHelp(self) -> String\"\"\"\n        return _controls_.ToolBarToolBase_GetShortHelp(*args, **kwargs)\n\n    def GetLongHelp(*args, **kwargs):\n        \"\"\"GetLongHelp(self) -> String\"\"\"\n        return _controls_.ToolBarToolBase_GetLongHelp(*args, **kwargs)\n\n    def Enable(*args, **kwargs):\n        \"\"\"Enable(self, bool enable) -> bool\"\"\"\n        return _controls_.ToolBarToolBase_Enable(*args, **kwargs)\n\n    def Toggle(*args, **kwargs):\n        \"\"\"Toggle(self)\"\"\"\n        return _controls_.ToolBarToolBase_Toggle(*args, **kwargs)\n\n    def SetToggle(*args, **kwargs):\n        \"\"\"SetToggle(self, bool toggle) -> bool\"\"\"\n        return _controls_.ToolBarToolBase_SetToggle(*args, **kwargs)\n\n    def SetShortHelp(*args, **kwargs):\n        \"\"\"SetShortHelp(self, String help) -> bool\"\"\"\n        return _controls_.ToolBarToolBase_SetShortHelp(*args, **kwargs)\n\n    def SetLongHelp(*args, **kwargs):\n        \"\"\"SetLongHelp(self, String help) -> bool\"\"\"\n        return _controls_.ToolBarToolBase_SetLongHelp(*args, **kwargs)\n\n    def SetNormalBitmap(*args, **kwargs):\n        \"\"\"SetNormalBitmap(self, Bitmap bmp)\"\"\"\n        return _controls_.ToolBarToolBase_SetNormalBitmap(*args, **kwargs)\n\n    def SetDisabledBitmap(*args, **kwargs):\n        \"\"\"SetDisabledBitmap(self, Bitmap bmp)\"\"\"\n        return _controls_.ToolBarToolBase_SetDisabledBitmap(*args, **kwargs)\n\n    def SetLabel(*args, **kwargs):\n        \"\"\"SetLabel(self, String label)\"\"\"\n        return _controls_.ToolBarToolBase_SetLabel(*args, **kwargs)\n\n    def Detach(*args, **kwargs):\n        \"\"\"Detach(self)\"\"\"\n        return _controls_.ToolBarToolBase_Detach(*args, **kwargs)\n\n    def Attach(*args, **kwargs):\n        \"\"\"Attach(self, ToolBarBase tbar)\"\"\"\n        return _controls_.ToolBarToolBase_Attach(*args, **kwargs)\n\n    def SetDropdownMenu(*args, **kwargs):\n        \"\"\"SetDropdownMenu(self, Menu menu)\"\"\"\n        return _controls_.ToolBarToolBase_SetDropdownMenu(*args, **kwargs)\n\n    def GetDropdownMenu(*args, **kwargs):\n        \"\"\"GetDropdownMenu(self) -> Menu\"\"\"\n        return _controls_.ToolBarToolBase_GetDropdownMenu(*args, **kwargs)\n\n    def GetClientData(*args, **kwargs):\n        \"\"\"GetClientData(self) -> PyObject\"\"\"\n        return _controls_.ToolBarToolBase_GetClientData(*args, **kwargs)\n\n    def SetClientData(*args, **kwargs):\n        \"\"\"SetClientData(self, PyObject clientData)\"\"\"\n        return _controls_.ToolBarToolBase_SetClientData(*args, **kwargs)\n\n    GetBitmap1 = GetNormalBitmap\n    GetBitmap2 = GetDisabledBitmap\n    SetBitmap1 = SetNormalBitmap\n    SetBitmap2 = SetDisabledBitmap\n\n    Bitmap = property(GetBitmap,doc=\"See `GetBitmap`\") \n    ClientData = property(GetClientData,SetClientData,doc=\"See `GetClientData` and `SetClientData`\") \n    Control = property(GetControl,doc=\"See `GetControl`\") \n    DisabledBitmap = property(GetDisabledBitmap,SetDisabledBitmap,doc=\"See `GetDisabledBitmap` and `SetDisabledBitmap`\") \n    Id = property(GetId,doc=\"See `GetId`\") \n    Kind = property(GetKind,doc=\"See `GetKind`\") \n    Label = property(GetLabel,SetLabel,doc=\"See `GetLabel` and `SetLabel`\") \n    LongHelp = property(GetLongHelp,SetLongHelp,doc=\"See `GetLongHelp` and `SetLongHelp`\") \n    NormalBitmap = property(GetNormalBitmap,SetNormalBitmap,doc=\"See `GetNormalBitmap` and `SetNormalBitmap`\") \n    ShortHelp = property(GetShortHelp,SetShortHelp,doc=\"See `GetShortHelp` and `SetShortHelp`\") \n    Style = property(GetStyle,doc=\"See `GetStyle`\") \n    ToolBar = property(GetToolBar,doc=\"See `GetToolBar`\") \n_controls_.ToolBarToolBase_swigregister(ToolBarToolBase)\n\nclass ToolBarBase(_core.Control):\n    \"\"\"Proxy of C++ ToolBarBase class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    def __init__(self): raise AttributeError, \"No constructor defined\"\n    __repr__ = _swig_repr\n    def DoAddTool(*args, **kwargs):\n        \"\"\"\n        DoAddTool(self, int id, String label, Bitmap bitmap, Bitmap bmpDisabled=wxNullBitmap, \n            int kind=ITEM_NORMAL, String shortHelp=EmptyString, \n            String longHelp=EmptyString, \n            PyObject clientData=None) -> ToolBarToolBase\n        \"\"\"\n        return _controls_.ToolBarBase_DoAddTool(*args, **kwargs)\n\n    def DoInsertTool(*args, **kwargs):\n        \"\"\"\n        DoInsertTool(self, size_t pos, int id, String label, Bitmap bitmap, Bitmap bmpDisabled=wxNullBitmap, \n            int kind=ITEM_NORMAL, \n            String shortHelp=EmptyString, String longHelp=EmptyString, \n            PyObject clientData=None) -> ToolBarToolBase\n        \"\"\"\n        return _controls_.ToolBarBase_DoInsertTool(*args, **kwargs)\n\n    # These match the original Add methods for this class, kept for\n    # backwards compatibility with versions < 2.3.3.\n\n\n    def AddTool(self, id, bitmap,\n                pushedBitmap = wx.NullBitmap,\n                isToggle = 0,\n                clientData = None,\n                shortHelpString = '',\n                longHelpString = '') :\n        '''Old style method to add a tool to the toolbar.'''\n        kind = wx.ITEM_NORMAL\n        if isToggle: kind = wx.ITEM_CHECK\n        return self.DoAddTool(id, '', bitmap, pushedBitmap, kind,\n                              shortHelpString, longHelpString, clientData)\n\n    def AddSimpleTool(self, id, bitmap,\n                      shortHelpString = '',\n                      longHelpString = '',\n                      isToggle = 0):\n        '''Old style method to add a tool to the toolbar.'''\n        kind = wx.ITEM_NORMAL\n        if isToggle: kind = wx.ITEM_CHECK\n        return self.DoAddTool(id, '', bitmap, wx.NullBitmap, kind,\n                              shortHelpString, longHelpString, None)\n\n    def InsertTool(self, pos, id, bitmap,\n                   pushedBitmap = wx.NullBitmap,\n                   isToggle = 0,\n                   clientData = None,\n                   shortHelpString = '',\n                   longHelpString = ''):\n        '''Old style method to insert a tool in the toolbar.'''\n        kind = wx.ITEM_NORMAL\n        if isToggle: kind = wx.ITEM_CHECK\n        return self.DoInsertTool(pos, id, '', bitmap, pushedBitmap, kind,\n                                 shortHelpString, longHelpString, clientData)\n\n    def InsertSimpleTool(self, pos, id, bitmap,\n                         shortHelpString = '',\n                         longHelpString = '',\n                         isToggle = 0):\n        '''Old style method to insert a tool in the toolbar.'''\n        kind = wx.ITEM_NORMAL\n        if isToggle: kind = wx.ITEM_CHECK\n        return self.DoInsertTool(pos, id, '', bitmap, wx.NullBitmap, kind,\n                                 shortHelpString, longHelpString, None)\n\n\n    # The following are the new toolbar Add methods starting with\n    # 2.3.3.  They are renamed to have 'Label' in the name so as to be\n    # able to keep backwards compatibility with using the above\n    # methods.  Eventually these should migrate to be the methods used\n    # primarily and lose the 'Label' in the name...\n\n    def AddLabelTool(self, id, label, bitmap,\n                     bmpDisabled = wx.NullBitmap,\n                     kind = wx.ITEM_NORMAL,\n                     shortHelp = '', longHelp = '',\n                     clientData = None):\n        '''\n        The full AddTool() function.\n\n        If bmpDisabled is wx.NullBitmap, a shadowed version of the normal bitmap\n        is created and used as the disabled image.\n        '''\n        return self.DoAddTool(id, label, bitmap, bmpDisabled, kind,\n                              shortHelp, longHelp, clientData)\n\n\n    def InsertLabelTool(self, pos, id, label, bitmap,\n                        bmpDisabled = wx.NullBitmap,\n                        kind = wx.ITEM_NORMAL,\n                        shortHelp = '', longHelp = '',\n                        clientData = None):\n        '''\n        Insert the new tool at the given position, if pos == GetToolsCount(), it\n        is equivalent to AddTool()\n        '''\n        return self.DoInsertTool(pos, id, label, bitmap, bmpDisabled, kind,\n                                 shortHelp, longHelp, clientData)\n\n    def AddCheckLabelTool(self, id, label, bitmap,\n                        bmpDisabled = wx.NullBitmap,\n                        shortHelp = '', longHelp = '',\n                        clientData = None):\n        '''Add a check tool, i.e. a tool which can be toggled'''\n        return self.DoAddTool(id, label, bitmap, bmpDisabled, wx.ITEM_CHECK,\n                              shortHelp, longHelp, clientData)\n\n    def AddRadioLabelTool(self, id, label, bitmap,\n                          bmpDisabled = wx.NullBitmap,\n                          shortHelp = '', longHelp = '',\n                          clientData = None):\n        '''\n        Add a radio tool, i.e. a tool which can be toggled and releases any\n        other toggled radio tools in the same group when it happens\n        '''\n        return self.DoAddTool(id, label, bitmap, bmpDisabled, wx.ITEM_RADIO,\n                              shortHelp, longHelp, clientData)\n\n\n    # For consistency with the backwards compatible methods above, here are\n    # some non-'Label' versions of the Check and Radio methods\n\n    def AddCheckTool(self, id, bitmap,\n                     bmpDisabled = wx.NullBitmap,\n                     shortHelp = '', longHelp = '',\n                     clientData = None):\n        '''Add a check tool, i.e. a tool which can be toggled'''\n        return self.DoAddTool(id, '', bitmap, bmpDisabled, wx.ITEM_CHECK,\n                              shortHelp, longHelp, clientData)\n\n    def AddRadioTool(self, id, bitmap,\n                     bmpDisabled = wx.NullBitmap,\n                     shortHelp = '', longHelp = '',\n                     clientData = None):\n        '''\n        Add a radio tool, i.e. a tool which can be toggled and releases any\n        other toggled radio tools in the same group when it happens\n        '''\n        return self.DoAddTool(id, '', bitmap, bmpDisabled, wx.ITEM_RADIO,\n                              shortHelp, longHelp, clientData)\n\n    def AddToolItem(*args, **kwargs):\n        \"\"\"AddToolItem(self, ToolBarToolBase tool) -> ToolBarToolBase\"\"\"\n        return _controls_.ToolBarBase_AddToolItem(*args, **kwargs)\n\n    def InsertToolItem(*args, **kwargs):\n        \"\"\"InsertToolItem(self, size_t pos, ToolBarToolBase tool) -> ToolBarToolBase\"\"\"\n        return _controls_.ToolBarBase_InsertToolItem(*args, **kwargs)\n\n    def AddControl(*args, **kwargs):\n        \"\"\"AddControl(self, Control control, String label=wxEmptyString) -> ToolBarToolBase\"\"\"\n        return _controls_.ToolBarBase_AddControl(*args, **kwargs)\n\n    def InsertControl(*args, **kwargs):\n        \"\"\"InsertControl(self, size_t pos, Control control, String label=wxEmptyString) -> ToolBarToolBase\"\"\"\n        return _controls_.ToolBarBase_InsertControl(*args, **kwargs)\n\n    def FindControl(*args, **kwargs):\n        \"\"\"FindControl(self, int id) -> Control\"\"\"\n        return _controls_.ToolBarBase_FindControl(*args, **kwargs)\n\n    def AddSeparator(*args, **kwargs):\n        \"\"\"AddSeparator(self) -> ToolBarToolBase\"\"\"\n        return _controls_.ToolBarBase_AddSeparator(*args, **kwargs)\n\n    def InsertSeparator(*args, **kwargs):\n        \"\"\"InsertSeparator(self, size_t pos) -> ToolBarToolBase\"\"\"\n        return _controls_.ToolBarBase_InsertSeparator(*args, **kwargs)\n\n    def AddStretchableSpace(*args, **kwargs):\n        \"\"\"AddStretchableSpace(self) -> ToolBarToolBase\"\"\"\n        return _controls_.ToolBarBase_AddStretchableSpace(*args, **kwargs)\n\n    def InsertStretchableSpace(*args, **kwargs):\n        \"\"\"InsertStretchableSpace(self, size_t pos) -> ToolBarToolBase\"\"\"\n        return _controls_.ToolBarBase_InsertStretchableSpace(*args, **kwargs)\n\n    def RemoveTool(*args, **kwargs):\n        \"\"\"RemoveTool(self, int id) -> ToolBarToolBase\"\"\"\n        return _controls_.ToolBarBase_RemoveTool(*args, **kwargs)\n\n    def DeleteToolByPos(*args, **kwargs):\n        \"\"\"DeleteToolByPos(self, size_t pos) -> bool\"\"\"\n        return _controls_.ToolBarBase_DeleteToolByPos(*args, **kwargs)\n\n    def DeleteTool(*args, **kwargs):\n        \"\"\"DeleteTool(self, int id) -> bool\"\"\"\n        return _controls_.ToolBarBase_DeleteTool(*args, **kwargs)\n\n    def ClearTools(*args, **kwargs):\n        \"\"\"ClearTools(self)\"\"\"\n        return _controls_.ToolBarBase_ClearTools(*args, **kwargs)\n\n    def Realize(*args, **kwargs):\n        \"\"\"Realize(self) -> bool\"\"\"\n        return _controls_.ToolBarBase_Realize(*args, **kwargs)\n\n    def EnableTool(*args, **kwargs):\n        \"\"\"EnableTool(self, int id, bool enable)\"\"\"\n        return _controls_.ToolBarBase_EnableTool(*args, **kwargs)\n\n    def ToggleTool(*args, **kwargs):\n        \"\"\"ToggleTool(self, int id, bool toggle)\"\"\"\n        return _controls_.ToolBarBase_ToggleTool(*args, **kwargs)\n\n    def SetToggle(*args, **kwargs):\n        \"\"\"SetToggle(self, int id, bool toggle)\"\"\"\n        return _controls_.ToolBarBase_SetToggle(*args, **kwargs)\n\n    def GetToolClientData(*args, **kwargs):\n        \"\"\"GetToolClientData(self, int id) -> PyObject\"\"\"\n        return _controls_.ToolBarBase_GetToolClientData(*args, **kwargs)\n\n    def SetToolClientData(*args, **kwargs):\n        \"\"\"SetToolClientData(self, int id, PyObject clientData)\"\"\"\n        return _controls_.ToolBarBase_SetToolClientData(*args, **kwargs)\n\n    def GetToolPos(*args, **kwargs):\n        \"\"\"GetToolPos(self, int id) -> int\"\"\"\n        return _controls_.ToolBarBase_GetToolPos(*args, **kwargs)\n\n    def GetToolState(*args, **kwargs):\n        \"\"\"GetToolState(self, int id) -> bool\"\"\"\n        return _controls_.ToolBarBase_GetToolState(*args, **kwargs)\n\n    def GetToolEnabled(*args, **kwargs):\n        \"\"\"GetToolEnabled(self, int id) -> bool\"\"\"\n        return _controls_.ToolBarBase_GetToolEnabled(*args, **kwargs)\n\n    def SetToolShortHelp(*args, **kwargs):\n        \"\"\"SetToolShortHelp(self, int id, String helpString)\"\"\"\n        return _controls_.ToolBarBase_SetToolShortHelp(*args, **kwargs)\n\n    def GetToolShortHelp(*args, **kwargs):\n        \"\"\"GetToolShortHelp(self, int id) -> String\"\"\"\n        return _controls_.ToolBarBase_GetToolShortHelp(*args, **kwargs)\n\n    def SetToolLongHelp(*args, **kwargs):\n        \"\"\"SetToolLongHelp(self, int id, String helpString)\"\"\"\n        return _controls_.ToolBarBase_SetToolLongHelp(*args, **kwargs)\n\n    def GetToolLongHelp(*args, **kwargs):\n        \"\"\"GetToolLongHelp(self, int id) -> String\"\"\"\n        return _controls_.ToolBarBase_GetToolLongHelp(*args, **kwargs)\n\n    def SetMarginsXY(*args, **kwargs):\n        \"\"\"SetMarginsXY(self, int x, int y)\"\"\"\n        return _controls_.ToolBarBase_SetMarginsXY(*args, **kwargs)\n\n    def SetMargins(*args, **kwargs):\n        \"\"\"SetMargins(self, Size size)\"\"\"\n        return _controls_.ToolBarBase_SetMargins(*args, **kwargs)\n\n    def SetToolPacking(*args, **kwargs):\n        \"\"\"SetToolPacking(self, int packing)\"\"\"\n        return _controls_.ToolBarBase_SetToolPacking(*args, **kwargs)\n\n    def SetToolSeparation(*args, **kwargs):\n        \"\"\"SetToolSeparation(self, int separation)\"\"\"\n        return _controls_.ToolBarBase_SetToolSeparation(*args, **kwargs)\n\n    def GetToolMargins(*args, **kwargs):\n        \"\"\"GetToolMargins(self) -> Size\"\"\"\n        return _controls_.ToolBarBase_GetToolMargins(*args, **kwargs)\n\n    def GetMargins(*args, **kwargs):\n        \"\"\"GetMargins(self) -> Size\"\"\"\n        return _controls_.ToolBarBase_GetMargins(*args, **kwargs)\n\n    def GetToolPacking(*args, **kwargs):\n        \"\"\"GetToolPacking(self) -> int\"\"\"\n        return _controls_.ToolBarBase_GetToolPacking(*args, **kwargs)\n\n    def GetToolSeparation(*args, **kwargs):\n        \"\"\"GetToolSeparation(self) -> int\"\"\"\n        return _controls_.ToolBarBase_GetToolSeparation(*args, **kwargs)\n\n    def SetRows(*args, **kwargs):\n        \"\"\"SetRows(self, int nRows)\"\"\"\n        return _controls_.ToolBarBase_SetRows(*args, **kwargs)\n\n    def SetMaxRowsCols(*args, **kwargs):\n        \"\"\"SetMaxRowsCols(self, int rows, int cols)\"\"\"\n        return _controls_.ToolBarBase_SetMaxRowsCols(*args, **kwargs)\n\n    def GetMaxRows(*args, **kwargs):\n        \"\"\"GetMaxRows(self) -> int\"\"\"\n        return _controls_.ToolBarBase_GetMaxRows(*args, **kwargs)\n\n    def GetMaxCols(*args, **kwargs):\n        \"\"\"GetMaxCols(self) -> int\"\"\"\n        return _controls_.ToolBarBase_GetMaxCols(*args, **kwargs)\n\n    def SetToolBitmapSize(*args, **kwargs):\n        \"\"\"SetToolBitmapSize(self, Size size)\"\"\"\n        return _controls_.ToolBarBase_SetToolBitmapSize(*args, **kwargs)\n\n    def GetToolBitmapSize(*args, **kwargs):\n        \"\"\"GetToolBitmapSize(self) -> Size\"\"\"\n        return _controls_.ToolBarBase_GetToolBitmapSize(*args, **kwargs)\n\n    def GetToolSize(*args, **kwargs):\n        \"\"\"GetToolSize(self) -> Size\"\"\"\n        return _controls_.ToolBarBase_GetToolSize(*args, **kwargs)\n\n    def FindToolForPosition(*args, **kwargs):\n        \"\"\"FindToolForPosition(self, int x, int y) -> ToolBarToolBase\"\"\"\n        return _controls_.ToolBarBase_FindToolForPosition(*args, **kwargs)\n\n    def FindById(*args, **kwargs):\n        \"\"\"FindById(self, int toolid) -> ToolBarToolBase\"\"\"\n        return _controls_.ToolBarBase_FindById(*args, **kwargs)\n\n    def IsVertical(*args, **kwargs):\n        \"\"\"IsVertical(self) -> bool\"\"\"\n        return _controls_.ToolBarBase_IsVertical(*args, **kwargs)\n\n    def GetToolsCount(*args, **kwargs):\n        \"\"\"GetToolsCount(self) -> size_t\"\"\"\n        return _controls_.ToolBarBase_GetToolsCount(*args, **kwargs)\n\n    def GetToolByPos(*args, **kwargs):\n        \"\"\"GetToolByPos(self, int pos) -> ToolBarToolBase\"\"\"\n        return _controls_.ToolBarBase_GetToolByPos(*args, **kwargs)\n\n    def SetDropdownMenu(*args, **kwargs):\n        \"\"\"SetDropdownMenu(self, int toolid, Menu menu) -> bool\"\"\"\n        return _controls_.ToolBarBase_SetDropdownMenu(*args, **kwargs)\n\n    Margins = property(GetMargins,SetMargins,doc=\"See `GetMargins` and `SetMargins`\") \n    MaxCols = property(GetMaxCols,doc=\"See `GetMaxCols`\") \n    MaxRows = property(GetMaxRows,doc=\"See `GetMaxRows`\") \n    ToolBitmapSize = property(GetToolBitmapSize,SetToolBitmapSize,doc=\"See `GetToolBitmapSize` and `SetToolBitmapSize`\") \n    ToolMargins = property(GetToolMargins,doc=\"See `GetToolMargins`\") \n    ToolPacking = property(GetToolPacking,SetToolPacking,doc=\"See `GetToolPacking` and `SetToolPacking`\") \n    ToolSeparation = property(GetToolSeparation,SetToolSeparation,doc=\"See `GetToolSeparation` and `SetToolSeparation`\") \n    ToolSize = property(GetToolSize,doc=\"See `GetToolSize`\") \n    ToolsCount = property(GetToolsCount,doc=\"See `GetToolsCount`\") \n_controls_.ToolBarBase_swigregister(ToolBarBase)\n\nclass ToolBar(ToolBarBase):\n    \"\"\"Proxy of C++ ToolBar class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=wxNO_BORDER|wxTB_HORIZONTAL, \n            String name=wxPyToolBarNameStr) -> ToolBar\n        \"\"\"\n        _controls_.ToolBar_swiginit(self,_controls_.new_ToolBar(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=wxNO_BORDER|wxTB_HORIZONTAL, \n            String name=wxPyToolBarNameStr) -> bool\n        \"\"\"\n        return _controls_.ToolBar_Create(*args, **kwargs)\n\n    def SetToolNormalBitmap(*args, **kwargs):\n        \"\"\"SetToolNormalBitmap(self, int id, Bitmap bitmap)\"\"\"\n        return _controls_.ToolBar_SetToolNormalBitmap(*args, **kwargs)\n\n    def SetToolDisabledBitmap(*args, **kwargs):\n        \"\"\"SetToolDisabledBitmap(self, int id, Bitmap bitmap)\"\"\"\n        return _controls_.ToolBar_SetToolDisabledBitmap(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.ToolBar_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n_controls_.ToolBar_swigregister(ToolBar)\n\ndef PreToolBar(*args, **kwargs):\n    \"\"\"PreToolBar() -> ToolBar\"\"\"\n    val = _controls_.new_PreToolBar(*args, **kwargs)\n    return val\n\ndef ToolBar_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    ToolBar_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.ToolBar_GetClassDefaultAttributes(*args, **kwargs)\n\n#---------------------------------------------------------------------------\n\nLC_VRULES = _controls_.LC_VRULES\nLC_HRULES = _controls_.LC_HRULES\nLC_ICON = _controls_.LC_ICON\nLC_SMALL_ICON = _controls_.LC_SMALL_ICON\nLC_LIST = _controls_.LC_LIST\nLC_REPORT = _controls_.LC_REPORT\nLC_ALIGN_TOP = _controls_.LC_ALIGN_TOP\nLC_ALIGN_LEFT = _controls_.LC_ALIGN_LEFT\nLC_AUTOARRANGE = _controls_.LC_AUTOARRANGE\nLC_VIRTUAL = _controls_.LC_VIRTUAL\nLC_EDIT_LABELS = _controls_.LC_EDIT_LABELS\nLC_NO_HEADER = _controls_.LC_NO_HEADER\nLC_NO_SORT_HEADER = _controls_.LC_NO_SORT_HEADER\nLC_SINGLE_SEL = _controls_.LC_SINGLE_SEL\nLC_SORT_ASCENDING = _controls_.LC_SORT_ASCENDING\nLC_SORT_DESCENDING = _controls_.LC_SORT_DESCENDING\nLC_MASK_TYPE = _controls_.LC_MASK_TYPE\nLC_MASK_ALIGN = _controls_.LC_MASK_ALIGN\nLC_MASK_SORT = _controls_.LC_MASK_SORT\nLIST_MASK_STATE = _controls_.LIST_MASK_STATE\nLIST_MASK_TEXT = _controls_.LIST_MASK_TEXT\nLIST_MASK_IMAGE = _controls_.LIST_MASK_IMAGE\nLIST_MASK_DATA = _controls_.LIST_MASK_DATA\nLIST_SET_ITEM = _controls_.LIST_SET_ITEM\nLIST_MASK_WIDTH = _controls_.LIST_MASK_WIDTH\nLIST_MASK_FORMAT = _controls_.LIST_MASK_FORMAT\nLIST_STATE_DONTCARE = _controls_.LIST_STATE_DONTCARE\nLIST_STATE_DROPHILITED = _controls_.LIST_STATE_DROPHILITED\nLIST_STATE_FOCUSED = _controls_.LIST_STATE_FOCUSED\nLIST_STATE_SELECTED = _controls_.LIST_STATE_SELECTED\nLIST_STATE_CUT = _controls_.LIST_STATE_CUT\nLIST_STATE_DISABLED = _controls_.LIST_STATE_DISABLED\nLIST_STATE_FILTERED = _controls_.LIST_STATE_FILTERED\nLIST_STATE_INUSE = _controls_.LIST_STATE_INUSE\nLIST_STATE_PICKED = _controls_.LIST_STATE_PICKED\nLIST_STATE_SOURCE = _controls_.LIST_STATE_SOURCE\nLIST_HITTEST_ABOVE = _controls_.LIST_HITTEST_ABOVE\nLIST_HITTEST_BELOW = _controls_.LIST_HITTEST_BELOW\nLIST_HITTEST_NOWHERE = _controls_.LIST_HITTEST_NOWHERE\nLIST_HITTEST_ONITEMICON = _controls_.LIST_HITTEST_ONITEMICON\nLIST_HITTEST_ONITEMLABEL = _controls_.LIST_HITTEST_ONITEMLABEL\nLIST_HITTEST_ONITEMRIGHT = _controls_.LIST_HITTEST_ONITEMRIGHT\nLIST_HITTEST_ONITEMSTATEICON = _controls_.LIST_HITTEST_ONITEMSTATEICON\nLIST_HITTEST_TOLEFT = _controls_.LIST_HITTEST_TOLEFT\nLIST_HITTEST_TORIGHT = _controls_.LIST_HITTEST_TORIGHT\nLIST_HITTEST_ONITEM = _controls_.LIST_HITTEST_ONITEM\nLIST_GETSUBITEMRECT_WHOLEITEM = _controls_.LIST_GETSUBITEMRECT_WHOLEITEM\nLIST_NEXT_ABOVE = _controls_.LIST_NEXT_ABOVE\nLIST_NEXT_ALL = _controls_.LIST_NEXT_ALL\nLIST_NEXT_BELOW = _controls_.LIST_NEXT_BELOW\nLIST_NEXT_LEFT = _controls_.LIST_NEXT_LEFT\nLIST_NEXT_RIGHT = _controls_.LIST_NEXT_RIGHT\nLIST_ALIGN_DEFAULT = _controls_.LIST_ALIGN_DEFAULT\nLIST_ALIGN_LEFT = _controls_.LIST_ALIGN_LEFT\nLIST_ALIGN_TOP = _controls_.LIST_ALIGN_TOP\nLIST_ALIGN_SNAP_TO_GRID = _controls_.LIST_ALIGN_SNAP_TO_GRID\nLIST_FORMAT_LEFT = _controls_.LIST_FORMAT_LEFT\nLIST_FORMAT_RIGHT = _controls_.LIST_FORMAT_RIGHT\nLIST_FORMAT_CENTRE = _controls_.LIST_FORMAT_CENTRE\nLIST_FORMAT_CENTER = _controls_.LIST_FORMAT_CENTER\nLIST_AUTOSIZE = _controls_.LIST_AUTOSIZE\nLIST_AUTOSIZE_USEHEADER = _controls_.LIST_AUTOSIZE_USEHEADER\nLIST_RECT_BOUNDS = _controls_.LIST_RECT_BOUNDS\nLIST_RECT_ICON = _controls_.LIST_RECT_ICON\nLIST_RECT_LABEL = _controls_.LIST_RECT_LABEL\nLIST_FIND_UP = _controls_.LIST_FIND_UP\nLIST_FIND_DOWN = _controls_.LIST_FIND_DOWN\nLIST_FIND_LEFT = _controls_.LIST_FIND_LEFT\nLIST_FIND_RIGHT = _controls_.LIST_FIND_RIGHT\n#---------------------------------------------------------------------------\n\nclass ListItemAttr(object):\n    \"\"\"Proxy of C++ ListItemAttr class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Colour colText=wxNullColour, Colour colBack=wxNullColour, \n            Font font=wxNullFont) -> ListItemAttr\n        \"\"\"\n        _controls_.ListItemAttr_swiginit(self,_controls_.new_ListItemAttr(*args, **kwargs))\n    __swig_destroy__ = _controls_.delete_ListItemAttr\n    __del__ = lambda self : None;\n    def SetTextColour(*args, **kwargs):\n        \"\"\"SetTextColour(self, Colour colText)\"\"\"\n        return _controls_.ListItemAttr_SetTextColour(*args, **kwargs)\n\n    def SetBackgroundColour(*args, **kwargs):\n        \"\"\"SetBackgroundColour(self, Colour colBack)\"\"\"\n        return _controls_.ListItemAttr_SetBackgroundColour(*args, **kwargs)\n\n    def SetFont(*args, **kwargs):\n        \"\"\"SetFont(self, Font font)\"\"\"\n        return _controls_.ListItemAttr_SetFont(*args, **kwargs)\n\n    def HasTextColour(*args, **kwargs):\n        \"\"\"HasTextColour(self) -> bool\"\"\"\n        return _controls_.ListItemAttr_HasTextColour(*args, **kwargs)\n\n    def HasBackgroundColour(*args, **kwargs):\n        \"\"\"HasBackgroundColour(self) -> bool\"\"\"\n        return _controls_.ListItemAttr_HasBackgroundColour(*args, **kwargs)\n\n    def HasFont(*args, **kwargs):\n        \"\"\"HasFont(self) -> bool\"\"\"\n        return _controls_.ListItemAttr_HasFont(*args, **kwargs)\n\n    def GetTextColour(*args, **kwargs):\n        \"\"\"GetTextColour(self) -> Colour\"\"\"\n        return _controls_.ListItemAttr_GetTextColour(*args, **kwargs)\n\n    def GetBackgroundColour(*args, **kwargs):\n        \"\"\"GetBackgroundColour(self) -> Colour\"\"\"\n        return _controls_.ListItemAttr_GetBackgroundColour(*args, **kwargs)\n\n    def GetFont(*args, **kwargs):\n        \"\"\"GetFont(self) -> Font\"\"\"\n        return _controls_.ListItemAttr_GetFont(*args, **kwargs)\n\n    def AssignFrom(*args, **kwargs):\n        \"\"\"AssignFrom(self, ListItemAttr source)\"\"\"\n        return _controls_.ListItemAttr_AssignFrom(*args, **kwargs)\n\n    def Destroy(*args, **kwargs):\n        \"\"\"Destroy(self)\"\"\"\n        args[0].this.own(False)\n        return _controls_.ListItemAttr_Destroy(*args, **kwargs)\n\n    BackgroundColour = property(GetBackgroundColour,SetBackgroundColour,doc=\"See `GetBackgroundColour` and `SetBackgroundColour`\") \n    Font = property(GetFont,SetFont,doc=\"See `GetFont` and `SetFont`\") \n    TextColour = property(GetTextColour,SetTextColour,doc=\"See `GetTextColour` and `SetTextColour`\") \n_controls_.ListItemAttr_swigregister(ListItemAttr)\nListCtrlNameStr = cvar.ListCtrlNameStr\n\n#---------------------------------------------------------------------------\n\nclass ListItem(_core.Object):\n    \"\"\"Proxy of C++ ListItem class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"__init__(self) -> ListItem\"\"\"\n        _controls_.ListItem_swiginit(self,_controls_.new_ListItem(*args, **kwargs))\n    __swig_destroy__ = _controls_.delete_ListItem\n    __del__ = lambda self : None;\n    def Clear(*args, **kwargs):\n        \"\"\"Clear(self)\"\"\"\n        return _controls_.ListItem_Clear(*args, **kwargs)\n\n    def ClearAttributes(*args, **kwargs):\n        \"\"\"ClearAttributes(self)\"\"\"\n        return _controls_.ListItem_ClearAttributes(*args, **kwargs)\n\n    def SetMask(*args, **kwargs):\n        \"\"\"SetMask(self, long mask)\"\"\"\n        return _controls_.ListItem_SetMask(*args, **kwargs)\n\n    def SetId(*args, **kwargs):\n        \"\"\"SetId(self, long id)\"\"\"\n        return _controls_.ListItem_SetId(*args, **kwargs)\n\n    def SetColumn(*args, **kwargs):\n        \"\"\"SetColumn(self, int col)\"\"\"\n        return _controls_.ListItem_SetColumn(*args, **kwargs)\n\n    def SetState(*args, **kwargs):\n        \"\"\"SetState(self, long state)\"\"\"\n        return _controls_.ListItem_SetState(*args, **kwargs)\n\n    def SetStateMask(*args, **kwargs):\n        \"\"\"SetStateMask(self, long stateMask)\"\"\"\n        return _controls_.ListItem_SetStateMask(*args, **kwargs)\n\n    def SetText(*args, **kwargs):\n        \"\"\"SetText(self, String text)\"\"\"\n        return _controls_.ListItem_SetText(*args, **kwargs)\n\n    def SetImage(*args, **kwargs):\n        \"\"\"SetImage(self, int image)\"\"\"\n        return _controls_.ListItem_SetImage(*args, **kwargs)\n\n    def SetData(*args, **kwargs):\n        \"\"\"SetData(self, long data)\"\"\"\n        return _controls_.ListItem_SetData(*args, **kwargs)\n\n    def SetWidth(*args, **kwargs):\n        \"\"\"SetWidth(self, int width)\"\"\"\n        return _controls_.ListItem_SetWidth(*args, **kwargs)\n\n    def SetAlign(*args, **kwargs):\n        \"\"\"SetAlign(self, int align)\"\"\"\n        return _controls_.ListItem_SetAlign(*args, **kwargs)\n\n    def SetTextColour(*args, **kwargs):\n        \"\"\"SetTextColour(self, Colour colText)\"\"\"\n        return _controls_.ListItem_SetTextColour(*args, **kwargs)\n\n    def SetBackgroundColour(*args, **kwargs):\n        \"\"\"SetBackgroundColour(self, Colour colBack)\"\"\"\n        return _controls_.ListItem_SetBackgroundColour(*args, **kwargs)\n\n    def SetFont(*args, **kwargs):\n        \"\"\"SetFont(self, Font font)\"\"\"\n        return _controls_.ListItem_SetFont(*args, **kwargs)\n\n    def GetMask(*args, **kwargs):\n        \"\"\"GetMask(self) -> long\"\"\"\n        return _controls_.ListItem_GetMask(*args, **kwargs)\n\n    def GetId(*args, **kwargs):\n        \"\"\"GetId(self) -> long\"\"\"\n        return _controls_.ListItem_GetId(*args, **kwargs)\n\n    def GetColumn(*args, **kwargs):\n        \"\"\"GetColumn(self) -> int\"\"\"\n        return _controls_.ListItem_GetColumn(*args, **kwargs)\n\n    def GetState(*args, **kwargs):\n        \"\"\"GetState(self) -> long\"\"\"\n        return _controls_.ListItem_GetState(*args, **kwargs)\n\n    def GetText(*args, **kwargs):\n        \"\"\"GetText(self) -> String\"\"\"\n        return _controls_.ListItem_GetText(*args, **kwargs)\n\n    def GetImage(*args, **kwargs):\n        \"\"\"GetImage(self) -> int\"\"\"\n        return _controls_.ListItem_GetImage(*args, **kwargs)\n\n    def GetData(*args, **kwargs):\n        \"\"\"GetData(self) -> long\"\"\"\n        return _controls_.ListItem_GetData(*args, **kwargs)\n\n    def GetWidth(*args, **kwargs):\n        \"\"\"GetWidth(self) -> int\"\"\"\n        return _controls_.ListItem_GetWidth(*args, **kwargs)\n\n    def GetAlign(*args, **kwargs):\n        \"\"\"GetAlign(self) -> int\"\"\"\n        return _controls_.ListItem_GetAlign(*args, **kwargs)\n\n    def GetAttributes(*args, **kwargs):\n        \"\"\"GetAttributes(self) -> ListItemAttr\"\"\"\n        return _controls_.ListItem_GetAttributes(*args, **kwargs)\n\n    def HasAttributes(*args, **kwargs):\n        \"\"\"HasAttributes(self) -> bool\"\"\"\n        return _controls_.ListItem_HasAttributes(*args, **kwargs)\n\n    def GetTextColour(*args, **kwargs):\n        \"\"\"GetTextColour(self) -> Colour\"\"\"\n        return _controls_.ListItem_GetTextColour(*args, **kwargs)\n\n    def GetBackgroundColour(*args, **kwargs):\n        \"\"\"GetBackgroundColour(self) -> Colour\"\"\"\n        return _controls_.ListItem_GetBackgroundColour(*args, **kwargs)\n\n    def GetFont(*args, **kwargs):\n        \"\"\"GetFont(self) -> Font\"\"\"\n        return _controls_.ListItem_GetFont(*args, **kwargs)\n\n    m_mask = property(_controls_.ListItem_m_mask_get, _controls_.ListItem_m_mask_set)\n    m_itemId = property(_controls_.ListItem_m_itemId_get, _controls_.ListItem_m_itemId_set)\n    m_col = property(_controls_.ListItem_m_col_get, _controls_.ListItem_m_col_set)\n    m_state = property(_controls_.ListItem_m_state_get, _controls_.ListItem_m_state_set)\n    m_stateMask = property(_controls_.ListItem_m_stateMask_get, _controls_.ListItem_m_stateMask_set)\n    m_text = property(_controls_.ListItem_m_text_get, _controls_.ListItem_m_text_set)\n    m_image = property(_controls_.ListItem_m_image_get, _controls_.ListItem_m_image_set)\n    m_data = property(_controls_.ListItem_m_data_get, _controls_.ListItem_m_data_set)\n    m_format = property(_controls_.ListItem_m_format_get, _controls_.ListItem_m_format_set)\n    m_width = property(_controls_.ListItem_m_width_get, _controls_.ListItem_m_width_set)\n    Align = property(GetAlign,SetAlign,doc=\"See `GetAlign` and `SetAlign`\") \n    Attributes = property(GetAttributes,doc=\"See `GetAttributes`\") \n    BackgroundColour = property(GetBackgroundColour,SetBackgroundColour,doc=\"See `GetBackgroundColour` and `SetBackgroundColour`\") \n    Column = property(GetColumn,SetColumn,doc=\"See `GetColumn` and `SetColumn`\") \n    Data = property(GetData,SetData,doc=\"See `GetData` and `SetData`\") \n    Font = property(GetFont,SetFont,doc=\"See `GetFont` and `SetFont`\") \n    Id = property(GetId,SetId,doc=\"See `GetId` and `SetId`\") \n    Image = property(GetImage,SetImage,doc=\"See `GetImage` and `SetImage`\") \n    Mask = property(GetMask,SetMask,doc=\"See `GetMask` and `SetMask`\") \n    State = property(GetState,SetState,doc=\"See `GetState` and `SetState`\") \n    Text = property(GetText,SetText,doc=\"See `GetText` and `SetText`\") \n    TextColour = property(GetTextColour,SetTextColour,doc=\"See `GetTextColour` and `SetTextColour`\") \n    Width = property(GetWidth,SetWidth,doc=\"See `GetWidth` and `SetWidth`\") \n_controls_.ListItem_swigregister(ListItem)\n\n#---------------------------------------------------------------------------\n\nclass ListEvent(_core.NotifyEvent):\n    \"\"\"Proxy of C++ ListEvent class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"__init__(self, EventType commandType=wxEVT_NULL, int id=0) -> ListEvent\"\"\"\n        _controls_.ListEvent_swiginit(self,_controls_.new_ListEvent(*args, **kwargs))\n    m_code = property(_controls_.ListEvent_m_code_get, _controls_.ListEvent_m_code_set)\n    m_oldItemIndex = property(_controls_.ListEvent_m_oldItemIndex_get, _controls_.ListEvent_m_oldItemIndex_set)\n    m_itemIndex = property(_controls_.ListEvent_m_itemIndex_get, _controls_.ListEvent_m_itemIndex_set)\n    m_col = property(_controls_.ListEvent_m_col_get, _controls_.ListEvent_m_col_set)\n    m_pointDrag = property(_controls_.ListEvent_m_pointDrag_get, _controls_.ListEvent_m_pointDrag_set)\n    m_item = property(_controls_.ListEvent_m_item_get)\n    def GetKeyCode(*args, **kwargs):\n        \"\"\"GetKeyCode(self) -> int\"\"\"\n        return _controls_.ListEvent_GetKeyCode(*args, **kwargs)\n\n    GetCode = GetKeyCode \n    def GetIndex(*args, **kwargs):\n        \"\"\"GetIndex(self) -> long\"\"\"\n        return _controls_.ListEvent_GetIndex(*args, **kwargs)\n\n    def GetColumn(*args, **kwargs):\n        \"\"\"GetColumn(self) -> int\"\"\"\n        return _controls_.ListEvent_GetColumn(*args, **kwargs)\n\n    def GetPoint(*args, **kwargs):\n        \"\"\"GetPoint(self) -> Point\"\"\"\n        return _controls_.ListEvent_GetPoint(*args, **kwargs)\n\n    GetPosition = GetPoint \n    def GetLabel(*args, **kwargs):\n        \"\"\"GetLabel(self) -> String\"\"\"\n        return _controls_.ListEvent_GetLabel(*args, **kwargs)\n\n    def GetText(*args, **kwargs):\n        \"\"\"GetText(self) -> String\"\"\"\n        return _controls_.ListEvent_GetText(*args, **kwargs)\n\n    def GetImage(*args, **kwargs):\n        \"\"\"GetImage(self) -> int\"\"\"\n        return _controls_.ListEvent_GetImage(*args, **kwargs)\n\n    def GetData(*args, **kwargs):\n        \"\"\"GetData(self) -> long\"\"\"\n        return _controls_.ListEvent_GetData(*args, **kwargs)\n\n    def GetMask(*args, **kwargs):\n        \"\"\"GetMask(self) -> long\"\"\"\n        return _controls_.ListEvent_GetMask(*args, **kwargs)\n\n    def GetItem(*args, **kwargs):\n        \"\"\"GetItem(self) -> ListItem\"\"\"\n        return _controls_.ListEvent_GetItem(*args, **kwargs)\n\n    def GetCacheFrom(*args, **kwargs):\n        \"\"\"GetCacheFrom(self) -> long\"\"\"\n        return _controls_.ListEvent_GetCacheFrom(*args, **kwargs)\n\n    def GetCacheTo(*args, **kwargs):\n        \"\"\"GetCacheTo(self) -> long\"\"\"\n        return _controls_.ListEvent_GetCacheTo(*args, **kwargs)\n\n    def IsEditCancelled(*args, **kwargs):\n        \"\"\"IsEditCancelled(self) -> bool\"\"\"\n        return _controls_.ListEvent_IsEditCancelled(*args, **kwargs)\n\n    def SetEditCanceled(*args, **kwargs):\n        \"\"\"SetEditCanceled(self, bool editCancelled)\"\"\"\n        return _controls_.ListEvent_SetEditCanceled(*args, **kwargs)\n\n    CacheFrom = property(GetCacheFrom,doc=\"See `GetCacheFrom`\") \n    CacheTo = property(GetCacheTo,doc=\"See `GetCacheTo`\") \n    Column = property(GetColumn,doc=\"See `GetColumn`\") \n    Data = property(GetData,doc=\"See `GetData`\") \n    Image = property(GetImage,doc=\"See `GetImage`\") \n    Index = property(GetIndex,doc=\"See `GetIndex`\") \n    Item = property(GetItem,doc=\"See `GetItem`\") \n    KeyCode = property(GetKeyCode,doc=\"See `GetKeyCode`\") \n    Label = property(GetLabel,doc=\"See `GetLabel`\") \n    Mask = property(GetMask,doc=\"See `GetMask`\") \n    Point = property(GetPoint,doc=\"See `GetPoint`\") \n    Text = property(GetText,doc=\"See `GetText`\") \n_controls_.ListEvent_swigregister(ListEvent)\n\nwxEVT_COMMAND_LIST_BEGIN_DRAG = _controls_.wxEVT_COMMAND_LIST_BEGIN_DRAG\nwxEVT_COMMAND_LIST_BEGIN_RDRAG = _controls_.wxEVT_COMMAND_LIST_BEGIN_RDRAG\nwxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT = _controls_.wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT\nwxEVT_COMMAND_LIST_END_LABEL_EDIT = _controls_.wxEVT_COMMAND_LIST_END_LABEL_EDIT\nwxEVT_COMMAND_LIST_DELETE_ITEM = _controls_.wxEVT_COMMAND_LIST_DELETE_ITEM\nwxEVT_COMMAND_LIST_DELETE_ALL_ITEMS = _controls_.wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS\nwxEVT_COMMAND_LIST_ITEM_SELECTED = _controls_.wxEVT_COMMAND_LIST_ITEM_SELECTED\nwxEVT_COMMAND_LIST_ITEM_DESELECTED = _controls_.wxEVT_COMMAND_LIST_ITEM_DESELECTED\nwxEVT_COMMAND_LIST_KEY_DOWN = _controls_.wxEVT_COMMAND_LIST_KEY_DOWN\nwxEVT_COMMAND_LIST_INSERT_ITEM = _controls_.wxEVT_COMMAND_LIST_INSERT_ITEM\nwxEVT_COMMAND_LIST_COL_CLICK = _controls_.wxEVT_COMMAND_LIST_COL_CLICK\nwxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK = _controls_.wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK\nwxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK = _controls_.wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK\nwxEVT_COMMAND_LIST_ITEM_ACTIVATED = _controls_.wxEVT_COMMAND_LIST_ITEM_ACTIVATED\nwxEVT_COMMAND_LIST_CACHE_HINT = _controls_.wxEVT_COMMAND_LIST_CACHE_HINT\nwxEVT_COMMAND_LIST_COL_RIGHT_CLICK = _controls_.wxEVT_COMMAND_LIST_COL_RIGHT_CLICK\nwxEVT_COMMAND_LIST_COL_BEGIN_DRAG = _controls_.wxEVT_COMMAND_LIST_COL_BEGIN_DRAG\nwxEVT_COMMAND_LIST_COL_DRAGGING = _controls_.wxEVT_COMMAND_LIST_COL_DRAGGING\nwxEVT_COMMAND_LIST_COL_END_DRAG = _controls_.wxEVT_COMMAND_LIST_COL_END_DRAG\nwxEVT_COMMAND_LIST_ITEM_FOCUSED = _controls_.wxEVT_COMMAND_LIST_ITEM_FOCUSED\nEVT_LIST_BEGIN_DRAG        = wx.PyEventBinder(wxEVT_COMMAND_LIST_BEGIN_DRAG       , 1)\nEVT_LIST_BEGIN_RDRAG       = wx.PyEventBinder(wxEVT_COMMAND_LIST_BEGIN_RDRAG      , 1)\nEVT_LIST_BEGIN_LABEL_EDIT  = wx.PyEventBinder(wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT , 1)\nEVT_LIST_END_LABEL_EDIT    = wx.PyEventBinder(wxEVT_COMMAND_LIST_END_LABEL_EDIT   , 1)\nEVT_LIST_DELETE_ITEM       = wx.PyEventBinder(wxEVT_COMMAND_LIST_DELETE_ITEM      , 1)\nEVT_LIST_DELETE_ALL_ITEMS  = wx.PyEventBinder(wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS , 1)\n\n\n\n\nEVT_LIST_ITEM_SELECTED     = wx.PyEventBinder(wxEVT_COMMAND_LIST_ITEM_SELECTED    , 1)\nEVT_LIST_ITEM_DESELECTED   = wx.PyEventBinder(wxEVT_COMMAND_LIST_ITEM_DESELECTED  , 1)\nEVT_LIST_KEY_DOWN          = wx.PyEventBinder(wxEVT_COMMAND_LIST_KEY_DOWN         , 1)\nEVT_LIST_INSERT_ITEM       = wx.PyEventBinder(wxEVT_COMMAND_LIST_INSERT_ITEM      , 1)\nEVT_LIST_COL_CLICK         = wx.PyEventBinder(wxEVT_COMMAND_LIST_COL_CLICK        , 1)\nEVT_LIST_ITEM_RIGHT_CLICK  = wx.PyEventBinder(wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK , 1)\nEVT_LIST_ITEM_MIDDLE_CLICK = wx.PyEventBinder(wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK, 1)\nEVT_LIST_ITEM_ACTIVATED    = wx.PyEventBinder(wxEVT_COMMAND_LIST_ITEM_ACTIVATED   , 1)\nEVT_LIST_CACHE_HINT        = wx.PyEventBinder(wxEVT_COMMAND_LIST_CACHE_HINT       , 1)\nEVT_LIST_COL_RIGHT_CLICK   = wx.PyEventBinder(wxEVT_COMMAND_LIST_COL_RIGHT_CLICK  , 1)\nEVT_LIST_COL_BEGIN_DRAG    = wx.PyEventBinder(wxEVT_COMMAND_LIST_COL_BEGIN_DRAG   , 1)\nEVT_LIST_COL_DRAGGING      = wx.PyEventBinder(wxEVT_COMMAND_LIST_COL_DRAGGING     , 1)\nEVT_LIST_COL_END_DRAG      = wx.PyEventBinder(wxEVT_COMMAND_LIST_COL_END_DRAG     , 1)\nEVT_LIST_ITEM_FOCUSED      = wx.PyEventBinder(wxEVT_COMMAND_LIST_ITEM_FOCUSED     , 1)\n\n\n\n\n\n#---------------------------------------------------------------------------\n\nclass ListCtrl(_core.Control):\n    \"\"\"Proxy of C++ ListCtrl class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=LC_ICON, \n            Validator validator=DefaultValidator, String name=ListCtrlNameStr) -> ListCtrl\n        \"\"\"\n        _controls_.ListCtrl_swiginit(self,_controls_.new_ListCtrl(*args, **kwargs))\n        self._setOORInfo(self);ListCtrl._setCallbackInfo(self, self, ListCtrl)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=LC_ICON, \n            Validator validator=DefaultValidator, String name=ListCtrlNameStr) -> bool\n\n        Do the 2nd phase and create the GUI control.\n        \"\"\"\n        return _controls_.ListCtrl_Create(*args, **kwargs)\n\n    def _setCallbackInfo(*args, **kwargs):\n        \"\"\"_setCallbackInfo(self, PyObject self, PyObject _class)\"\"\"\n        return _controls_.ListCtrl__setCallbackInfo(*args, **kwargs)\n\n    def GetColumn(*args, **kwargs):\n        \"\"\"GetColumn(self, int col) -> ListItem\"\"\"\n        val = _controls_.ListCtrl_GetColumn(*args, **kwargs)\n        if val is not None: val.thisown = 1\n        return val\n\n    def SetColumn(*args, **kwargs):\n        \"\"\"SetColumn(self, int col, ListItem item) -> bool\"\"\"\n        return _controls_.ListCtrl_SetColumn(*args, **kwargs)\n\n    def GetColumnWidth(*args, **kwargs):\n        \"\"\"GetColumnWidth(self, int col) -> int\"\"\"\n        return _controls_.ListCtrl_GetColumnWidth(*args, **kwargs)\n\n    def SetColumnWidth(*args, **kwargs):\n        \"\"\"SetColumnWidth(self, int col, int width) -> bool\"\"\"\n        return _controls_.ListCtrl_SetColumnWidth(*args, **kwargs)\n\n    def HasColumnOrderSupport(*args, **kwargs):\n        \"\"\"HasColumnOrderSupport() -> bool\"\"\"\n        return _controls_.ListCtrl_HasColumnOrderSupport(*args, **kwargs)\n\n    HasColumnOrderSupport = staticmethod(HasColumnOrderSupport)\n    def GetColumnOrder(*args, **kwargs):\n        \"\"\"GetColumnOrder(self, int col) -> int\"\"\"\n        return _controls_.ListCtrl_GetColumnOrder(*args, **kwargs)\n\n    def GetColumnIndexFromOrder(*args, **kwargs):\n        \"\"\"GetColumnIndexFromOrder(self, int order) -> int\"\"\"\n        return _controls_.ListCtrl_GetColumnIndexFromOrder(*args, **kwargs)\n\n    def GetColumnsOrder(*args, **kwargs):\n        \"\"\"GetColumnsOrder(self) -> wxArrayInt\"\"\"\n        return _controls_.ListCtrl_GetColumnsOrder(*args, **kwargs)\n\n    def SetColumnsOrder(*args, **kwargs):\n        \"\"\"SetColumnsOrder(self, wxArrayInt orders) -> bool\"\"\"\n        return _controls_.ListCtrl_SetColumnsOrder(*args, **kwargs)\n\n    def GetCountPerPage(*args, **kwargs):\n        \"\"\"GetCountPerPage(self) -> int\"\"\"\n        return _controls_.ListCtrl_GetCountPerPage(*args, **kwargs)\n\n    def GetViewRect(*args, **kwargs):\n        \"\"\"GetViewRect(self) -> Rect\"\"\"\n        return _controls_.ListCtrl_GetViewRect(*args, **kwargs)\n\n    def GetEditControl(*args, **kwargs):\n        \"\"\"GetEditControl(self) -> TextCtrl\"\"\"\n        return _controls_.ListCtrl_GetEditControl(*args, **kwargs)\n\n    def GetItem(*args, **kwargs):\n        \"\"\"GetItem(self, long itemId, int col=0) -> ListItem\"\"\"\n        val = _controls_.ListCtrl_GetItem(*args, **kwargs)\n        if val is not None: val.thisown = 1\n        return val\n\n    def SetItem(*args, **kwargs):\n        \"\"\"SetItem(self, ListItem info) -> bool\"\"\"\n        return _controls_.ListCtrl_SetItem(*args, **kwargs)\n\n    def SetStringItem(*args, **kwargs):\n        \"\"\"SetStringItem(self, long index, int col, String label, int imageId=-1) -> long\"\"\"\n        return _controls_.ListCtrl_SetStringItem(*args, **kwargs)\n\n    def GetItemState(*args, **kwargs):\n        \"\"\"GetItemState(self, long item, long stateMask) -> int\"\"\"\n        return _controls_.ListCtrl_GetItemState(*args, **kwargs)\n\n    def SetItemState(*args, **kwargs):\n        \"\"\"SetItemState(self, long item, long state, long stateMask) -> bool\"\"\"\n        return _controls_.ListCtrl_SetItemState(*args, **kwargs)\n\n    def SetItemImage(*args, **kwargs):\n        \"\"\"SetItemImage(self, long item, int image, int selImage=-1) -> bool\"\"\"\n        return _controls_.ListCtrl_SetItemImage(*args, **kwargs)\n\n    def SetItemColumnImage(*args, **kwargs):\n        \"\"\"SetItemColumnImage(self, long item, long column, int image) -> bool\"\"\"\n        return _controls_.ListCtrl_SetItemColumnImage(*args, **kwargs)\n\n    def GetItemText(*args, **kwargs):\n        \"\"\"GetItemText(self, long item, int col=0) -> String\"\"\"\n        return _controls_.ListCtrl_GetItemText(*args, **kwargs)\n\n    def SetItemText(*args, **kwargs):\n        \"\"\"SetItemText(self, long item, String str)\"\"\"\n        return _controls_.ListCtrl_SetItemText(*args, **kwargs)\n\n    def GetItemData(*args, **kwargs):\n        \"\"\"GetItemData(self, long item) -> long\"\"\"\n        return _controls_.ListCtrl_GetItemData(*args, **kwargs)\n\n    def SetItemData(*args, **kwargs):\n        \"\"\"SetItemData(self, long item, long data) -> bool\"\"\"\n        return _controls_.ListCtrl_SetItemData(*args, **kwargs)\n\n    def GetItemPosition(*args, **kwargs):\n        \"\"\"GetItemPosition(self, long item) -> Point\"\"\"\n        return _controls_.ListCtrl_GetItemPosition(*args, **kwargs)\n\n    def GetItemRect(*args, **kwargs):\n        \"\"\"GetItemRect(self, long item, int code=LIST_RECT_BOUNDS) -> Rect\"\"\"\n        return _controls_.ListCtrl_GetItemRect(*args, **kwargs)\n\n    def SetItemPosition(*args, **kwargs):\n        \"\"\"SetItemPosition(self, long item, Point pos) -> bool\"\"\"\n        return _controls_.ListCtrl_SetItemPosition(*args, **kwargs)\n\n    def GetItemCount(*args, **kwargs):\n        \"\"\"GetItemCount(self) -> int\"\"\"\n        return _controls_.ListCtrl_GetItemCount(*args, **kwargs)\n\n    def GetColumnCount(*args, **kwargs):\n        \"\"\"GetColumnCount(self) -> int\"\"\"\n        return _controls_.ListCtrl_GetColumnCount(*args, **kwargs)\n\n    def GetItemSpacing(*args, **kwargs):\n        \"\"\"GetItemSpacing(self) -> Size\"\"\"\n        return _controls_.ListCtrl_GetItemSpacing(*args, **kwargs)\n\n    GetItemSpacing = wx.deprecated(GetItemSpacing) \n    def SetItemSpacing(*args, **kwargs):\n        \"\"\"SetItemSpacing(self, int spacing, bool isSmall=False)\"\"\"\n        return _controls_.ListCtrl_SetItemSpacing(*args, **kwargs)\n\n    SetItemSpacing = wx.deprecated(SetItemSpacing) \n    def GetSelectedItemCount(*args, **kwargs):\n        \"\"\"GetSelectedItemCount(self) -> int\"\"\"\n        return _controls_.ListCtrl_GetSelectedItemCount(*args, **kwargs)\n\n    def GetTextColour(*args, **kwargs):\n        \"\"\"GetTextColour(self) -> Colour\"\"\"\n        return _controls_.ListCtrl_GetTextColour(*args, **kwargs)\n\n    def SetTextColour(*args, **kwargs):\n        \"\"\"SetTextColour(self, Colour col)\"\"\"\n        return _controls_.ListCtrl_SetTextColour(*args, **kwargs)\n\n    def GetTopItem(*args, **kwargs):\n        \"\"\"GetTopItem(self) -> long\"\"\"\n        return _controls_.ListCtrl_GetTopItem(*args, **kwargs)\n\n    def SetSingleStyle(*args, **kwargs):\n        \"\"\"SetSingleStyle(self, long style, bool add=True)\"\"\"\n        return _controls_.ListCtrl_SetSingleStyle(*args, **kwargs)\n\n    def GetNextItem(*args, **kwargs):\n        \"\"\"GetNextItem(self, long item, int geometry=LIST_NEXT_ALL, int state=LIST_STATE_DONTCARE) -> long\"\"\"\n        return _controls_.ListCtrl_GetNextItem(*args, **kwargs)\n\n    def GetImageList(*args, **kwargs):\n        \"\"\"GetImageList(self, int which) -> ImageList\"\"\"\n        return _controls_.ListCtrl_GetImageList(*args, **kwargs)\n\n    def SetImageList(*args, **kwargs):\n        \"\"\"SetImageList(self, ImageList imageList, int which)\"\"\"\n        return _controls_.ListCtrl_SetImageList(*args, **kwargs)\n\n    def AssignImageList(*args, **kwargs):\n        \"\"\"AssignImageList(self, ImageList imageList, int which)\"\"\"\n        return _controls_.ListCtrl_AssignImageList(*args, **kwargs)\n\n    def InReportView(*args, **kwargs):\n        \"\"\"InReportView(self) -> bool\"\"\"\n        return _controls_.ListCtrl_InReportView(*args, **kwargs)\n\n    def IsVirtual(*args, **kwargs):\n        \"\"\"IsVirtual(self) -> bool\"\"\"\n        return _controls_.ListCtrl_IsVirtual(*args, **kwargs)\n\n    def RefreshItem(*args, **kwargs):\n        \"\"\"RefreshItem(self, long item)\"\"\"\n        return _controls_.ListCtrl_RefreshItem(*args, **kwargs)\n\n    def RefreshItems(*args, **kwargs):\n        \"\"\"RefreshItems(self, long itemFrom, long itemTo)\"\"\"\n        return _controls_.ListCtrl_RefreshItems(*args, **kwargs)\n\n    def Arrange(*args, **kwargs):\n        \"\"\"Arrange(self, int flag=LIST_ALIGN_DEFAULT) -> bool\"\"\"\n        return _controls_.ListCtrl_Arrange(*args, **kwargs)\n\n    def DeleteItem(*args, **kwargs):\n        \"\"\"DeleteItem(self, long item) -> bool\"\"\"\n        return _controls_.ListCtrl_DeleteItem(*args, **kwargs)\n\n    def DeleteAllItems(*args, **kwargs):\n        \"\"\"DeleteAllItems(self) -> bool\"\"\"\n        return _controls_.ListCtrl_DeleteAllItems(*args, **kwargs)\n\n    def DeleteColumn(*args, **kwargs):\n        \"\"\"DeleteColumn(self, int col) -> bool\"\"\"\n        return _controls_.ListCtrl_DeleteColumn(*args, **kwargs)\n\n    def DeleteAllColumns(*args, **kwargs):\n        \"\"\"DeleteAllColumns(self) -> bool\"\"\"\n        return _controls_.ListCtrl_DeleteAllColumns(*args, **kwargs)\n\n    def ClearAll(*args, **kwargs):\n        \"\"\"ClearAll(self)\"\"\"\n        return _controls_.ListCtrl_ClearAll(*args, **kwargs)\n\n    def EditLabel(*args, **kwargs):\n        \"\"\"EditLabel(self, long item)\"\"\"\n        return _controls_.ListCtrl_EditLabel(*args, **kwargs)\n\n    def EnsureVisible(*args, **kwargs):\n        \"\"\"EnsureVisible(self, long item) -> bool\"\"\"\n        return _controls_.ListCtrl_EnsureVisible(*args, **kwargs)\n\n    def FindItem(*args, **kwargs):\n        \"\"\"FindItem(self, long start, String str, bool partial=False) -> long\"\"\"\n        return _controls_.ListCtrl_FindItem(*args, **kwargs)\n\n    def FindItemData(*args, **kwargs):\n        \"\"\"FindItemData(self, long start, long data) -> long\"\"\"\n        return _controls_.ListCtrl_FindItemData(*args, **kwargs)\n\n    def FindItemAtPos(*args, **kwargs):\n        \"\"\"FindItemAtPos(self, long start, Point pt, int direction) -> long\"\"\"\n        return _controls_.ListCtrl_FindItemAtPos(*args, **kwargs)\n\n    def HitTest(*args, **kwargs):\n        \"\"\"\n        HitTest(Point point) -> (item, where)\n\n        Determines which item (if any) is at the specified point, giving\n         in the second return value (see wx.LIST_HITTEST flags.)\n        \"\"\"\n        return _controls_.ListCtrl_HitTest(*args, **kwargs)\n\n    def HitTestSubItem(*args, **kwargs):\n        \"\"\"\n        HitTestSubItem(Point point) -> (item, where, subItem)\n\n        Determines which item (if any) is at the specified point, giving  in\n        the second return value (see wx.LIST_HITTEST flags) and also the subItem, if\n        any.\n        \"\"\"\n        return _controls_.ListCtrl_HitTestSubItem(*args, **kwargs)\n\n    def InsertItem(*args, **kwargs):\n        \"\"\"InsertItem(self, ListItem info) -> long\"\"\"\n        return _controls_.ListCtrl_InsertItem(*args, **kwargs)\n\n    def InsertStringItem(*args, **kwargs):\n        \"\"\"InsertStringItem(self, long index, String label, int imageIndex=-1) -> long\"\"\"\n        return _controls_.ListCtrl_InsertStringItem(*args, **kwargs)\n\n    def InsertImageItem(*args, **kwargs):\n        \"\"\"InsertImageItem(self, long index, int imageIndex) -> long\"\"\"\n        return _controls_.ListCtrl_InsertImageItem(*args, **kwargs)\n\n    def InsertImageStringItem(*args, **kwargs):\n        \"\"\"InsertImageStringItem(self, long index, String label, int imageIndex) -> long\"\"\"\n        return _controls_.ListCtrl_InsertImageStringItem(*args, **kwargs)\n\n    def InsertColumnItem(*args, **kwargs):\n        \"\"\"InsertColumnItem(self, long col, ListItem info) -> long\"\"\"\n        return _controls_.ListCtrl_InsertColumnItem(*args, **kwargs)\n\n    InsertColumnInfo = InsertColumnItem \n    def InsertColumn(*args, **kwargs):\n        \"\"\"\n        InsertColumn(self, long col, String heading, int format=LIST_FORMAT_LEFT, \n            int width=-1) -> long\n        \"\"\"\n        return _controls_.ListCtrl_InsertColumn(*args, **kwargs)\n\n    def SetItemCount(*args, **kwargs):\n        \"\"\"SetItemCount(self, long count)\"\"\"\n        return _controls_.ListCtrl_SetItemCount(*args, **kwargs)\n\n    def ScrollList(*args, **kwargs):\n        \"\"\"ScrollList(self, int dx, int dy) -> bool\"\"\"\n        return _controls_.ListCtrl_ScrollList(*args, **kwargs)\n\n    def SetItemTextColour(*args, **kwargs):\n        \"\"\"SetItemTextColour(self, long item, Colour col)\"\"\"\n        return _controls_.ListCtrl_SetItemTextColour(*args, **kwargs)\n\n    def GetItemTextColour(*args, **kwargs):\n        \"\"\"GetItemTextColour(self, long item) -> Colour\"\"\"\n        return _controls_.ListCtrl_GetItemTextColour(*args, **kwargs)\n\n    def SetItemBackgroundColour(*args, **kwargs):\n        \"\"\"SetItemBackgroundColour(self, long item, Colour col)\"\"\"\n        return _controls_.ListCtrl_SetItemBackgroundColour(*args, **kwargs)\n\n    def GetItemBackgroundColour(*args, **kwargs):\n        \"\"\"GetItemBackgroundColour(self, long item) -> Colour\"\"\"\n        return _controls_.ListCtrl_GetItemBackgroundColour(*args, **kwargs)\n\n    def SetItemFont(*args, **kwargs):\n        \"\"\"SetItemFont(self, long item, Font f)\"\"\"\n        return _controls_.ListCtrl_SetItemFont(*args, **kwargs)\n\n    def GetItemFont(*args, **kwargs):\n        \"\"\"GetItemFont(self, long item) -> Font\"\"\"\n        return _controls_.ListCtrl_GetItemFont(*args, **kwargs)\n\n    #\n    # Some helpers...\n    def Select(self, idx, on=1):\n        '''[de]select an item'''\n        if on: state = wx.LIST_STATE_SELECTED\n        else: state = 0\n        self.SetItemState(idx, state, wx.LIST_STATE_SELECTED)\n\n    def Focus(self, idx):\n        '''Focus and show the given item'''\n        self.SetItemState(idx, wx.LIST_STATE_FOCUSED, wx.LIST_STATE_FOCUSED)\n        self.EnsureVisible(idx)\n\n    def GetFocusedItem(self):\n        '''get the currently focused item or -1 if none'''\n        return self.GetNextItem(-1, wx.LIST_NEXT_ALL, wx.LIST_STATE_FOCUSED)\n\n    def GetFirstSelected(self, *args):\n        '''return first selected item, or -1 when none'''\n        return self.GetNextSelected(-1)\n\n    def GetNextSelected(self, item):\n        '''return subsequent selected items, or -1 when no more'''\n        return self.GetNextItem(item, wx.LIST_NEXT_ALL, wx.LIST_STATE_SELECTED)\n\n    def IsSelected(self, idx):\n        '''return True if the item is selected'''\n        return (self.GetItemState(idx, wx.LIST_STATE_SELECTED) & wx.LIST_STATE_SELECTED) != 0\n\n    def SetColumnImage(self, col, image):\n        item = self.GetColumn(col)\n        # preserve all other attributes too\n        item.SetMask( wx.LIST_MASK_STATE |\n                      wx.LIST_MASK_TEXT  |\n                      wx.LIST_MASK_IMAGE |\n                      wx.LIST_MASK_DATA  |\n                      wx.LIST_SET_ITEM   |\n                      wx.LIST_MASK_WIDTH |\n                      wx.LIST_MASK_FORMAT )\n        item.SetImage(image)\n        self.SetColumn(col, item)\n\n    def ClearColumnImage(self, col):\n        self.SetColumnImage(col, -1)\n\n    def Append(self, entry):\n        '''Append an item to the list control.  The entry parameter should be a\n           sequence with an item for each column'''\n        if len(entry):\n            if wx.USE_UNICODE:\n                cvtfunc = unicode\n            else:\n                cvtfunc = str\n            pos = self.GetItemCount()\n            self.InsertStringItem(pos, cvtfunc(entry[0]))\n            for i in range(1, len(entry)):\n                self.SetStringItem(pos, i, cvtfunc(entry[i]))\n            return pos\n\n    def SortItems(*args, **kwargs):\n        \"\"\"SortItems(self, PyObject func) -> bool\"\"\"\n        return _controls_.ListCtrl_SortItems(*args, **kwargs)\n\n    def GetMainWindow(*args, **kwargs):\n        \"\"\"GetMainWindow(self) -> Window\"\"\"\n        return _controls_.ListCtrl_GetMainWindow(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.ListCtrl_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n    ColumnCount = property(GetColumnCount,doc=\"See `GetColumnCount`\") \n    CountPerPage = property(GetCountPerPage,doc=\"See `GetCountPerPage`\") \n    EditControl = property(GetEditControl,doc=\"See `GetEditControl`\") \n    FocusedItem = property(GetFocusedItem,doc=\"See `GetFocusedItem`\") \n    ItemCount = property(GetItemCount,SetItemCount,doc=\"See `GetItemCount` and `SetItemCount`\") \n    MainWindow = property(GetMainWindow,doc=\"See `GetMainWindow`\") \n    SelectedItemCount = property(GetSelectedItemCount,doc=\"See `GetSelectedItemCount`\") \n    TextColour = property(GetTextColour,SetTextColour,doc=\"See `GetTextColour` and `SetTextColour`\") \n    TopItem = property(GetTopItem,doc=\"See `GetTopItem`\") \n    ViewRect = property(GetViewRect,doc=\"See `GetViewRect`\") \n_controls_.ListCtrl_swigregister(ListCtrl)\n\ndef PreListCtrl(*args, **kwargs):\n    \"\"\"PreListCtrl() -> ListCtrl\"\"\"\n    val = _controls_.new_PreListCtrl(*args, **kwargs)\n    return val\n\ndef ListCtrl_HasColumnOrderSupport(*args):\n  \"\"\"ListCtrl_HasColumnOrderSupport() -> bool\"\"\"\n  return _controls_.ListCtrl_HasColumnOrderSupport(*args)\n\ndef ListCtrl_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    ListCtrl_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.ListCtrl_GetClassDefaultAttributes(*args, **kwargs)\n\n#---------------------------------------------------------------------------\n\nclass ListView(ListCtrl):\n    \"\"\"Proxy of C++ ListView class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=LC_REPORT, \n            Validator validator=DefaultValidator, String name=ListCtrlNameStr) -> ListView\n        \"\"\"\n        _controls_.ListView_swiginit(self,_controls_.new_ListView(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=LC_REPORT, \n            Validator validator=DefaultValidator, String name=ListCtrlNameStr) -> bool\n\n        Do the 2nd phase and create the GUI control.\n        \"\"\"\n        return _controls_.ListView_Create(*args, **kwargs)\n\n    def Select(*args, **kwargs):\n        \"\"\"Select(self, long n, bool on=True)\"\"\"\n        return _controls_.ListView_Select(*args, **kwargs)\n\n    def Focus(*args, **kwargs):\n        \"\"\"Focus(self, long index)\"\"\"\n        return _controls_.ListView_Focus(*args, **kwargs)\n\n    def GetFocusedItem(*args, **kwargs):\n        \"\"\"GetFocusedItem(self) -> long\"\"\"\n        return _controls_.ListView_GetFocusedItem(*args, **kwargs)\n\n    def GetNextSelected(*args, **kwargs):\n        \"\"\"GetNextSelected(self, long item) -> long\"\"\"\n        return _controls_.ListView_GetNextSelected(*args, **kwargs)\n\n    def GetFirstSelected(*args, **kwargs):\n        \"\"\"GetFirstSelected(self) -> long\"\"\"\n        return _controls_.ListView_GetFirstSelected(*args, **kwargs)\n\n    def IsSelected(*args, **kwargs):\n        \"\"\"IsSelected(self, long index) -> bool\"\"\"\n        return _controls_.ListView_IsSelected(*args, **kwargs)\n\n    def SetColumnImage(*args, **kwargs):\n        \"\"\"SetColumnImage(self, int col, int image)\"\"\"\n        return _controls_.ListView_SetColumnImage(*args, **kwargs)\n\n    def ClearColumnImage(*args, **kwargs):\n        \"\"\"ClearColumnImage(self, int col)\"\"\"\n        return _controls_.ListView_ClearColumnImage(*args, **kwargs)\n\n    FocusedItem = property(GetFocusedItem,doc=\"See `GetFocusedItem`\") \n_controls_.ListView_swigregister(ListView)\n\ndef PreListView(*args, **kwargs):\n    \"\"\"PreListView() -> ListView\"\"\"\n    val = _controls_.new_PreListView(*args, **kwargs)\n    return val\n\n#---------------------------------------------------------------------------\n\nTR_NO_BUTTONS = _controls_.TR_NO_BUTTONS\nTR_HAS_BUTTONS = _controls_.TR_HAS_BUTTONS\nTR_NO_LINES = _controls_.TR_NO_LINES\nTR_LINES_AT_ROOT = _controls_.TR_LINES_AT_ROOT\nTR_SINGLE = _controls_.TR_SINGLE\nTR_MULTIPLE = _controls_.TR_MULTIPLE\nTR_EXTENDED = _controls_.TR_EXTENDED\nTR_HAS_VARIABLE_ROW_HEIGHT = _controls_.TR_HAS_VARIABLE_ROW_HEIGHT\nTR_EDIT_LABELS = _controls_.TR_EDIT_LABELS\nTR_HIDE_ROOT = _controls_.TR_HIDE_ROOT\nTR_ROW_LINES = _controls_.TR_ROW_LINES\nTR_FULL_ROW_HIGHLIGHT = _controls_.TR_FULL_ROW_HIGHLIGHT\nTR_DEFAULT_STYLE = _controls_.TR_DEFAULT_STYLE\nTR_TWIST_BUTTONS = _controls_.TR_TWIST_BUTTONS\n# obsolete\nTR_MAC_BUTTONS = 0\nwxTR_AQUA_BUTTONS = 0\n\nTreeItemIcon_Normal = _controls_.TreeItemIcon_Normal\nTreeItemIcon_Selected = _controls_.TreeItemIcon_Selected\nTreeItemIcon_Expanded = _controls_.TreeItemIcon_Expanded\nTreeItemIcon_SelectedExpanded = _controls_.TreeItemIcon_SelectedExpanded\nTreeItemIcon_Max = _controls_.TreeItemIcon_Max\nTREE_ITEMSTATE_NONE = _controls_.TREE_ITEMSTATE_NONE\nTREE_ITEMSTATE_NEXT = _controls_.TREE_ITEMSTATE_NEXT\nTREE_ITEMSTATE_PREV = _controls_.TREE_ITEMSTATE_PREV\nTREE_HITTEST_ABOVE = _controls_.TREE_HITTEST_ABOVE\nTREE_HITTEST_BELOW = _controls_.TREE_HITTEST_BELOW\nTREE_HITTEST_NOWHERE = _controls_.TREE_HITTEST_NOWHERE\nTREE_HITTEST_ONITEMBUTTON = _controls_.TREE_HITTEST_ONITEMBUTTON\nTREE_HITTEST_ONITEMICON = _controls_.TREE_HITTEST_ONITEMICON\nTREE_HITTEST_ONITEMINDENT = _controls_.TREE_HITTEST_ONITEMINDENT\nTREE_HITTEST_ONITEMLABEL = _controls_.TREE_HITTEST_ONITEMLABEL\nTREE_HITTEST_ONITEMRIGHT = _controls_.TREE_HITTEST_ONITEMRIGHT\nTREE_HITTEST_ONITEMSTATEICON = _controls_.TREE_HITTEST_ONITEMSTATEICON\nTREE_HITTEST_TOLEFT = _controls_.TREE_HITTEST_TOLEFT\nTREE_HITTEST_TORIGHT = _controls_.TREE_HITTEST_TORIGHT\nTREE_HITTEST_ONITEMUPPERPART = _controls_.TREE_HITTEST_ONITEMUPPERPART\nTREE_HITTEST_ONITEMLOWERPART = _controls_.TREE_HITTEST_ONITEMLOWERPART\nTREE_HITTEST_ONITEM = _controls_.TREE_HITTEST_ONITEM\n#---------------------------------------------------------------------------\n\nclass TreeItemId(object):\n    \"\"\"Proxy of C++ TreeItemId class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"__init__(self) -> TreeItemId\"\"\"\n        _controls_.TreeItemId_swiginit(self,_controls_.new_TreeItemId(*args, **kwargs))\n    __swig_destroy__ = _controls_.delete_TreeItemId\n    __del__ = lambda self : None;\n    def IsOk(*args, **kwargs):\n        \"\"\"IsOk(self) -> bool\"\"\"\n        return _controls_.TreeItemId_IsOk(*args, **kwargs)\n\n    def __eq__(*args, **kwargs):\n        \"\"\"__eq__(self, TreeItemId other) -> bool\"\"\"\n        return _controls_.TreeItemId___eq__(*args, **kwargs)\n\n    def __ne__(*args, **kwargs):\n        \"\"\"__ne__(self, TreeItemId other) -> bool\"\"\"\n        return _controls_.TreeItemId___ne__(*args, **kwargs)\n\n    m_pItem = property(_controls_.TreeItemId_m_pItem_get, _controls_.TreeItemId_m_pItem_set)\n    Ok = IsOk\n    def __nonzero__(self): return self.IsOk() \n_controls_.TreeItemId_swigregister(TreeItemId)\nTreeCtrlNameStr = cvar.TreeCtrlNameStr\n\nclass TreeItemData(object):\n    \"\"\"Proxy of C++ TreeItemData class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"__init__(self, PyObject obj=None) -> TreeItemData\"\"\"\n        _controls_.TreeItemData_swiginit(self,_controls_.new_TreeItemData(*args, **kwargs))\n    __swig_destroy__ = _controls_.delete_TreeItemData\n    __del__ = lambda self : None;\n    def GetData(*args, **kwargs):\n        \"\"\"GetData(self) -> PyObject\"\"\"\n        return _controls_.TreeItemData_GetData(*args, **kwargs)\n\n    def SetData(*args, **kwargs):\n        \"\"\"SetData(self, PyObject obj)\"\"\"\n        return _controls_.TreeItemData_SetData(*args, **kwargs)\n\n    def GetId(*args, **kwargs):\n        \"\"\"GetId(self) -> TreeItemId\"\"\"\n        return _controls_.TreeItemData_GetId(*args, **kwargs)\n\n    def SetId(*args, **kwargs):\n        \"\"\"SetId(self, TreeItemId id)\"\"\"\n        return _controls_.TreeItemData_SetId(*args, **kwargs)\n\n    def Destroy(*args, **kwargs):\n        \"\"\"Destroy(self)\"\"\"\n        args[0].this.own(False)\n        return _controls_.TreeItemData_Destroy(*args, **kwargs)\n\n    Data = property(GetData,SetData,doc=\"See `GetData` and `SetData`\") \n    Id = property(GetId,SetId,doc=\"See `GetId` and `SetId`\") \n_controls_.TreeItemData_swigregister(TreeItemData)\n\n#---------------------------------------------------------------------------\n\nwxEVT_COMMAND_TREE_BEGIN_DRAG = _controls_.wxEVT_COMMAND_TREE_BEGIN_DRAG\nwxEVT_COMMAND_TREE_BEGIN_RDRAG = _controls_.wxEVT_COMMAND_TREE_BEGIN_RDRAG\nwxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT = _controls_.wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT\nwxEVT_COMMAND_TREE_END_LABEL_EDIT = _controls_.wxEVT_COMMAND_TREE_END_LABEL_EDIT\nwxEVT_COMMAND_TREE_DELETE_ITEM = _controls_.wxEVT_COMMAND_TREE_DELETE_ITEM\nwxEVT_COMMAND_TREE_GET_INFO = _controls_.wxEVT_COMMAND_TREE_GET_INFO\nwxEVT_COMMAND_TREE_SET_INFO = _controls_.wxEVT_COMMAND_TREE_SET_INFO\nwxEVT_COMMAND_TREE_ITEM_EXPANDED = _controls_.wxEVT_COMMAND_TREE_ITEM_EXPANDED\nwxEVT_COMMAND_TREE_ITEM_EXPANDING = _controls_.wxEVT_COMMAND_TREE_ITEM_EXPANDING\nwxEVT_COMMAND_TREE_ITEM_COLLAPSED = _controls_.wxEVT_COMMAND_TREE_ITEM_COLLAPSED\nwxEVT_COMMAND_TREE_ITEM_COLLAPSING = _controls_.wxEVT_COMMAND_TREE_ITEM_COLLAPSING\nwxEVT_COMMAND_TREE_SEL_CHANGED = _controls_.wxEVT_COMMAND_TREE_SEL_CHANGED\nwxEVT_COMMAND_TREE_SEL_CHANGING = _controls_.wxEVT_COMMAND_TREE_SEL_CHANGING\nwxEVT_COMMAND_TREE_KEY_DOWN = _controls_.wxEVT_COMMAND_TREE_KEY_DOWN\nwxEVT_COMMAND_TREE_ITEM_ACTIVATED = _controls_.wxEVT_COMMAND_TREE_ITEM_ACTIVATED\nwxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK = _controls_.wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK\nwxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK = _controls_.wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK\nwxEVT_COMMAND_TREE_END_DRAG = _controls_.wxEVT_COMMAND_TREE_END_DRAG\nwxEVT_COMMAND_TREE_STATE_IMAGE_CLICK = _controls_.wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK\nwxEVT_COMMAND_TREE_ITEM_GETTOOLTIP = _controls_.wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP\nwxEVT_COMMAND_TREE_ITEM_MENU = _controls_.wxEVT_COMMAND_TREE_ITEM_MENU\nEVT_TREE_BEGIN_DRAG        = wx.PyEventBinder(wxEVT_COMMAND_TREE_BEGIN_DRAG       , 1)\nEVT_TREE_BEGIN_RDRAG       = wx.PyEventBinder(wxEVT_COMMAND_TREE_BEGIN_RDRAG      , 1)\nEVT_TREE_BEGIN_LABEL_EDIT  = wx.PyEventBinder(wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT , 1)\nEVT_TREE_END_LABEL_EDIT    = wx.PyEventBinder(wxEVT_COMMAND_TREE_END_LABEL_EDIT   , 1)\nEVT_TREE_DELETE_ITEM       = wx.PyEventBinder(wxEVT_COMMAND_TREE_DELETE_ITEM      , 1)\nEVT_TREE_GET_INFO          = wx.PyEventBinder(wxEVT_COMMAND_TREE_GET_INFO         , 1)\nEVT_TREE_SET_INFO          = wx.PyEventBinder(wxEVT_COMMAND_TREE_SET_INFO         , 1)\nEVT_TREE_ITEM_EXPANDED     = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_EXPANDED    , 1)\nEVT_TREE_ITEM_EXPANDING    = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_EXPANDING   , 1)\nEVT_TREE_ITEM_COLLAPSED    = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_COLLAPSED   , 1)\nEVT_TREE_ITEM_COLLAPSING   = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_COLLAPSING  , 1)\nEVT_TREE_SEL_CHANGED       = wx.PyEventBinder(wxEVT_COMMAND_TREE_SEL_CHANGED      , 1)\nEVT_TREE_SEL_CHANGING      = wx.PyEventBinder(wxEVT_COMMAND_TREE_SEL_CHANGING     , 1)\nEVT_TREE_KEY_DOWN          = wx.PyEventBinder(wxEVT_COMMAND_TREE_KEY_DOWN         , 1)\nEVT_TREE_ITEM_ACTIVATED    = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_ACTIVATED   , 1)\nEVT_TREE_ITEM_RIGHT_CLICK  = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK , 1)\nEVT_TREE_ITEM_MIDDLE_CLICK = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK, 1)\nEVT_TREE_END_DRAG          = wx.PyEventBinder(wxEVT_COMMAND_TREE_END_DRAG         , 1)\nEVT_TREE_STATE_IMAGE_CLICK = wx.PyEventBinder(wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK, 1)\nEVT_TREE_ITEM_GETTOOLTIP   = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP,   1)\nEVT_TREE_ITEM_MENU         = wx.PyEventBinder(wxEVT_COMMAND_TREE_ITEM_MENU,         1)\n\nclass TreeEvent(_core.NotifyEvent):\n    \"\"\"Proxy of C++ TreeEvent class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args): \n        \"\"\"\n        __init__(self, EventType commandType=wxEVT_NULL, int id=0) -> TreeEvent\n        __init__(self, EventType commandType, TreeCtrl tree, TreeItemId item=NullTreeItemId) -> TreeEvent\n        \"\"\"\n        _controls_.TreeEvent_swiginit(self,_controls_.new_TreeEvent(*args))\n    def GetItem(*args, **kwargs):\n        \"\"\"GetItem(self) -> TreeItemId\"\"\"\n        return _controls_.TreeEvent_GetItem(*args, **kwargs)\n\n    def SetItem(*args, **kwargs):\n        \"\"\"SetItem(self, TreeItemId item)\"\"\"\n        return _controls_.TreeEvent_SetItem(*args, **kwargs)\n\n    def GetOldItem(*args, **kwargs):\n        \"\"\"GetOldItem(self) -> TreeItemId\"\"\"\n        return _controls_.TreeEvent_GetOldItem(*args, **kwargs)\n\n    def SetOldItem(*args, **kwargs):\n        \"\"\"SetOldItem(self, TreeItemId item)\"\"\"\n        return _controls_.TreeEvent_SetOldItem(*args, **kwargs)\n\n    def GetPoint(*args, **kwargs):\n        \"\"\"GetPoint(self) -> Point\"\"\"\n        return _controls_.TreeEvent_GetPoint(*args, **kwargs)\n\n    def SetPoint(*args, **kwargs):\n        \"\"\"SetPoint(self, Point pt)\"\"\"\n        return _controls_.TreeEvent_SetPoint(*args, **kwargs)\n\n    def GetKeyEvent(*args, **kwargs):\n        \"\"\"GetKeyEvent(self) -> KeyEvent\"\"\"\n        return _controls_.TreeEvent_GetKeyEvent(*args, **kwargs)\n\n    def GetKeyCode(*args, **kwargs):\n        \"\"\"GetKeyCode(self) -> int\"\"\"\n        return _controls_.TreeEvent_GetKeyCode(*args, **kwargs)\n\n    def SetKeyEvent(*args, **kwargs):\n        \"\"\"SetKeyEvent(self, KeyEvent evt)\"\"\"\n        return _controls_.TreeEvent_SetKeyEvent(*args, **kwargs)\n\n    def GetLabel(*args, **kwargs):\n        \"\"\"GetLabel(self) -> String\"\"\"\n        return _controls_.TreeEvent_GetLabel(*args, **kwargs)\n\n    def SetLabel(*args, **kwargs):\n        \"\"\"SetLabel(self, String label)\"\"\"\n        return _controls_.TreeEvent_SetLabel(*args, **kwargs)\n\n    def IsEditCancelled(*args, **kwargs):\n        \"\"\"IsEditCancelled(self) -> bool\"\"\"\n        return _controls_.TreeEvent_IsEditCancelled(*args, **kwargs)\n\n    def SetEditCanceled(*args, **kwargs):\n        \"\"\"SetEditCanceled(self, bool editCancelled)\"\"\"\n        return _controls_.TreeEvent_SetEditCanceled(*args, **kwargs)\n\n    def SetToolTip(*args, **kwargs):\n        \"\"\"SetToolTip(self, String toolTip)\"\"\"\n        return _controls_.TreeEvent_SetToolTip(*args, **kwargs)\n\n    def GetToolTip(*args, **kwargs):\n        \"\"\"GetToolTip(self) -> String\"\"\"\n        return _controls_.TreeEvent_GetToolTip(*args, **kwargs)\n\n    Item = property(GetItem,SetItem,doc=\"See `GetItem` and `SetItem`\") \n    KeyCode = property(GetKeyCode,doc=\"See `GetKeyCode`\") \n    KeyEvent = property(GetKeyEvent,SetKeyEvent,doc=\"See `GetKeyEvent` and `SetKeyEvent`\") \n    Label = property(GetLabel,SetLabel,doc=\"See `GetLabel` and `SetLabel`\") \n    OldItem = property(GetOldItem,SetOldItem,doc=\"See `GetOldItem` and `SetOldItem`\") \n    Point = property(GetPoint,SetPoint,doc=\"See `GetPoint` and `SetPoint`\") \n    ToolTip = property(GetToolTip,SetToolTip,doc=\"See `GetToolTip` and `SetToolTip`\") \n    EditCancelled = property(IsEditCancelled,SetEditCanceled,doc=\"See `IsEditCancelled` and `SetEditCanceled`\") \n_controls_.TreeEvent_swigregister(TreeEvent)\n\n#---------------------------------------------------------------------------\n\nclass TreeCtrl(_core.Control):\n    \"\"\"Proxy of C++ TreeCtrl class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=TR_DEFAULT_STYLE, \n            Validator validator=DefaultValidator, \n            String name=TreeCtrlNameStr) -> TreeCtrl\n        \"\"\"\n        _controls_.TreeCtrl_swiginit(self,_controls_.new_TreeCtrl(*args, **kwargs))\n        self._setOORInfo(self);TreeCtrl._setCallbackInfo(self, self, TreeCtrl)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=TR_DEFAULT_STYLE, \n            Validator validator=DefaultValidator, \n            String name=TreeCtrlNameStr) -> bool\n\n        Do the 2nd phase and create the GUI control.\n        \"\"\"\n        return _controls_.TreeCtrl_Create(*args, **kwargs)\n\n    def _setCallbackInfo(*args, **kwargs):\n        \"\"\"_setCallbackInfo(self, PyObject self, PyObject _class)\"\"\"\n        return _controls_.TreeCtrl__setCallbackInfo(*args, **kwargs)\n\n    def GetCount(*args, **kwargs):\n        \"\"\"GetCount(self) -> unsigned int\"\"\"\n        return _controls_.TreeCtrl_GetCount(*args, **kwargs)\n\n    def GetIndent(*args, **kwargs):\n        \"\"\"GetIndent(self) -> unsigned int\"\"\"\n        return _controls_.TreeCtrl_GetIndent(*args, **kwargs)\n\n    def SetIndent(*args, **kwargs):\n        \"\"\"SetIndent(self, unsigned int indent)\"\"\"\n        return _controls_.TreeCtrl_SetIndent(*args, **kwargs)\n\n    def GetSpacing(*args, **kwargs):\n        \"\"\"GetSpacing(self) -> unsigned int\"\"\"\n        return _controls_.TreeCtrl_GetSpacing(*args, **kwargs)\n\n    def SetSpacing(*args, **kwargs):\n        \"\"\"SetSpacing(self, unsigned int spacing)\"\"\"\n        return _controls_.TreeCtrl_SetSpacing(*args, **kwargs)\n\n    def GetImageList(*args, **kwargs):\n        \"\"\"GetImageList(self) -> ImageList\"\"\"\n        return _controls_.TreeCtrl_GetImageList(*args, **kwargs)\n\n    def GetStateImageList(*args, **kwargs):\n        \"\"\"GetStateImageList(self) -> ImageList\"\"\"\n        return _controls_.TreeCtrl_GetStateImageList(*args, **kwargs)\n\n    def SetImageList(*args, **kwargs):\n        \"\"\"SetImageList(self, ImageList imageList)\"\"\"\n        return _controls_.TreeCtrl_SetImageList(*args, **kwargs)\n\n    def SetStateImageList(*args, **kwargs):\n        \"\"\"SetStateImageList(self, ImageList imageList)\"\"\"\n        return _controls_.TreeCtrl_SetStateImageList(*args, **kwargs)\n\n    def AssignImageList(*args, **kwargs):\n        \"\"\"AssignImageList(self, ImageList imageList)\"\"\"\n        return _controls_.TreeCtrl_AssignImageList(*args, **kwargs)\n\n    def AssignStateImageList(*args, **kwargs):\n        \"\"\"AssignStateImageList(self, ImageList imageList)\"\"\"\n        return _controls_.TreeCtrl_AssignStateImageList(*args, **kwargs)\n\n    def GetItemText(*args, **kwargs):\n        \"\"\"GetItemText(self, TreeItemId item) -> String\"\"\"\n        return _controls_.TreeCtrl_GetItemText(*args, **kwargs)\n\n    def GetItemImage(*args, **kwargs):\n        \"\"\"GetItemImage(self, TreeItemId item, int which=TreeItemIcon_Normal) -> int\"\"\"\n        return _controls_.TreeCtrl_GetItemImage(*args, **kwargs)\n\n    def GetItemData(*args, **kwargs):\n        \"\"\"GetItemData(self, TreeItemId item) -> TreeItemData\"\"\"\n        return _controls_.TreeCtrl_GetItemData(*args, **kwargs)\n\n    def GetItemPyData(*args, **kwargs):\n        \"\"\"GetItemPyData(self, TreeItemId item) -> PyObject\"\"\"\n        return _controls_.TreeCtrl_GetItemPyData(*args, **kwargs)\n\n    GetPyData = GetItemPyData \n    def GetItemTextColour(*args, **kwargs):\n        \"\"\"GetItemTextColour(self, TreeItemId item) -> Colour\"\"\"\n        return _controls_.TreeCtrl_GetItemTextColour(*args, **kwargs)\n\n    def GetItemBackgroundColour(*args, **kwargs):\n        \"\"\"GetItemBackgroundColour(self, TreeItemId item) -> Colour\"\"\"\n        return _controls_.TreeCtrl_GetItemBackgroundColour(*args, **kwargs)\n\n    def GetItemFont(*args, **kwargs):\n        \"\"\"GetItemFont(self, TreeItemId item) -> Font\"\"\"\n        return _controls_.TreeCtrl_GetItemFont(*args, **kwargs)\n\n    def GetItemState(*args, **kwargs):\n        \"\"\"GetItemState(self, TreeItemId item) -> int\"\"\"\n        return _controls_.TreeCtrl_GetItemState(*args, **kwargs)\n\n    def SetItemText(*args, **kwargs):\n        \"\"\"SetItemText(self, TreeItemId item, String text)\"\"\"\n        return _controls_.TreeCtrl_SetItemText(*args, **kwargs)\n\n    def SetItemImage(*args, **kwargs):\n        \"\"\"SetItemImage(self, TreeItemId item, int image, int which=TreeItemIcon_Normal)\"\"\"\n        return _controls_.TreeCtrl_SetItemImage(*args, **kwargs)\n\n    def SetItemData(*args, **kwargs):\n        \"\"\"SetItemData(self, TreeItemId item, TreeItemData data)\"\"\"\n        return _controls_.TreeCtrl_SetItemData(*args, **kwargs)\n\n    def SetItemPyData(*args, **kwargs):\n        \"\"\"SetItemPyData(self, TreeItemId item, PyObject obj)\"\"\"\n        return _controls_.TreeCtrl_SetItemPyData(*args, **kwargs)\n\n    SetPyData = SetItemPyData \n    def SetItemHasChildren(*args, **kwargs):\n        \"\"\"SetItemHasChildren(self, TreeItemId item, bool has=True)\"\"\"\n        return _controls_.TreeCtrl_SetItemHasChildren(*args, **kwargs)\n\n    def SetItemBold(*args, **kwargs):\n        \"\"\"SetItemBold(self, TreeItemId item, bool bold=True)\"\"\"\n        return _controls_.TreeCtrl_SetItemBold(*args, **kwargs)\n\n    def SetItemDropHighlight(*args, **kwargs):\n        \"\"\"SetItemDropHighlight(self, TreeItemId item, bool highlight=True)\"\"\"\n        return _controls_.TreeCtrl_SetItemDropHighlight(*args, **kwargs)\n\n    def SetItemTextColour(*args, **kwargs):\n        \"\"\"SetItemTextColour(self, TreeItemId item, Colour col)\"\"\"\n        return _controls_.TreeCtrl_SetItemTextColour(*args, **kwargs)\n\n    def SetItemBackgroundColour(*args, **kwargs):\n        \"\"\"SetItemBackgroundColour(self, TreeItemId item, Colour col)\"\"\"\n        return _controls_.TreeCtrl_SetItemBackgroundColour(*args, **kwargs)\n\n    def SetItemFont(*args, **kwargs):\n        \"\"\"SetItemFont(self, TreeItemId item, Font font)\"\"\"\n        return _controls_.TreeCtrl_SetItemFont(*args, **kwargs)\n\n    def SetItemState(*args, **kwargs):\n        \"\"\"SetItemState(self, TreeItemId item, int state)\"\"\"\n        return _controls_.TreeCtrl_SetItemState(*args, **kwargs)\n\n    def IsVisible(*args, **kwargs):\n        \"\"\"IsVisible(self, TreeItemId item) -> bool\"\"\"\n        return _controls_.TreeCtrl_IsVisible(*args, **kwargs)\n\n    def ItemHasChildren(*args, **kwargs):\n        \"\"\"ItemHasChildren(self, TreeItemId item) -> bool\"\"\"\n        return _controls_.TreeCtrl_ItemHasChildren(*args, **kwargs)\n\n    def IsExpanded(*args, **kwargs):\n        \"\"\"IsExpanded(self, TreeItemId item) -> bool\"\"\"\n        return _controls_.TreeCtrl_IsExpanded(*args, **kwargs)\n\n    def IsSelected(*args, **kwargs):\n        \"\"\"IsSelected(self, TreeItemId item) -> bool\"\"\"\n        return _controls_.TreeCtrl_IsSelected(*args, **kwargs)\n\n    def IsBold(*args, **kwargs):\n        \"\"\"IsBold(self, TreeItemId item) -> bool\"\"\"\n        return _controls_.TreeCtrl_IsBold(*args, **kwargs)\n\n    def IsEmpty(*args, **kwargs):\n        \"\"\"IsEmpty(self) -> bool\"\"\"\n        return _controls_.TreeCtrl_IsEmpty(*args, **kwargs)\n\n    def GetChildrenCount(*args, **kwargs):\n        \"\"\"GetChildrenCount(self, TreeItemId item, bool recursively=True) -> size_t\"\"\"\n        return _controls_.TreeCtrl_GetChildrenCount(*args, **kwargs)\n\n    def GetRootItem(*args, **kwargs):\n        \"\"\"GetRootItem(self) -> TreeItemId\"\"\"\n        return _controls_.TreeCtrl_GetRootItem(*args, **kwargs)\n\n    def GetSelection(*args, **kwargs):\n        \"\"\"GetSelection(self) -> TreeItemId\"\"\"\n        return _controls_.TreeCtrl_GetSelection(*args, **kwargs)\n\n    def GetSelections(*args, **kwargs):\n        \"\"\"GetSelections(self) -> PyObject\"\"\"\n        return _controls_.TreeCtrl_GetSelections(*args, **kwargs)\n\n    def GetFocusedItem(*args, **kwargs):\n        \"\"\"GetFocusedItem(self) -> TreeItemId\"\"\"\n        return _controls_.TreeCtrl_GetFocusedItem(*args, **kwargs)\n\n    def ClearFocusedItem(*args, **kwargs):\n        \"\"\"ClearFocusedItem(self)\"\"\"\n        return _controls_.TreeCtrl_ClearFocusedItem(*args, **kwargs)\n\n    def SetFocusedItem(*args, **kwargs):\n        \"\"\"SetFocusedItem(self, TreeItemId item)\"\"\"\n        return _controls_.TreeCtrl_SetFocusedItem(*args, **kwargs)\n\n    def GetItemParent(*args, **kwargs):\n        \"\"\"GetItemParent(self, TreeItemId item) -> TreeItemId\"\"\"\n        return _controls_.TreeCtrl_GetItemParent(*args, **kwargs)\n\n    def GetFirstChild(*args, **kwargs):\n        \"\"\"GetFirstChild(self, TreeItemId item) -> PyObject\"\"\"\n        return _controls_.TreeCtrl_GetFirstChild(*args, **kwargs)\n\n    def GetNextChild(*args, **kwargs):\n        \"\"\"GetNextChild(self, TreeItemId item, void cookie) -> PyObject\"\"\"\n        return _controls_.TreeCtrl_GetNextChild(*args, **kwargs)\n\n    def GetLastChild(*args, **kwargs):\n        \"\"\"GetLastChild(self, TreeItemId item) -> TreeItemId\"\"\"\n        return _controls_.TreeCtrl_GetLastChild(*args, **kwargs)\n\n    def GetNextSibling(*args, **kwargs):\n        \"\"\"GetNextSibling(self, TreeItemId item) -> TreeItemId\"\"\"\n        return _controls_.TreeCtrl_GetNextSibling(*args, **kwargs)\n\n    def GetPrevSibling(*args, **kwargs):\n        \"\"\"GetPrevSibling(self, TreeItemId item) -> TreeItemId\"\"\"\n        return _controls_.TreeCtrl_GetPrevSibling(*args, **kwargs)\n\n    def GetFirstVisibleItem(*args, **kwargs):\n        \"\"\"GetFirstVisibleItem(self) -> TreeItemId\"\"\"\n        return _controls_.TreeCtrl_GetFirstVisibleItem(*args, **kwargs)\n\n    def GetNextVisible(*args, **kwargs):\n        \"\"\"GetNextVisible(self, TreeItemId item) -> TreeItemId\"\"\"\n        return _controls_.TreeCtrl_GetNextVisible(*args, **kwargs)\n\n    def GetPrevVisible(*args, **kwargs):\n        \"\"\"GetPrevVisible(self, TreeItemId item) -> TreeItemId\"\"\"\n        return _controls_.TreeCtrl_GetPrevVisible(*args, **kwargs)\n\n    def AddRoot(*args, **kwargs):\n        \"\"\"AddRoot(self, String text, int image=-1, int selectedImage=-1, TreeItemData data=None) -> TreeItemId\"\"\"\n        return _controls_.TreeCtrl_AddRoot(*args, **kwargs)\n\n    def PrependItem(*args, **kwargs):\n        \"\"\"\n        PrependItem(self, TreeItemId parent, String text, int image=-1, int selectedImage=-1, \n            TreeItemData data=None) -> TreeItemId\n        \"\"\"\n        return _controls_.TreeCtrl_PrependItem(*args, **kwargs)\n\n    def InsertItem(*args, **kwargs):\n        \"\"\"\n        InsertItem(self, TreeItemId parent, TreeItemId idPrevious, String text, \n            int image=-1, int selectedImage=-1, TreeItemData data=None) -> TreeItemId\n        \"\"\"\n        return _controls_.TreeCtrl_InsertItem(*args, **kwargs)\n\n    def InsertItemBefore(*args, **kwargs):\n        \"\"\"\n        InsertItemBefore(self, TreeItemId parent, size_t index, String text, int image=-1, \n            int selectedImage=-1, TreeItemData data=None) -> TreeItemId\n        \"\"\"\n        return _controls_.TreeCtrl_InsertItemBefore(*args, **kwargs)\n\n    def AppendItem(*args, **kwargs):\n        \"\"\"\n        AppendItem(self, TreeItemId parent, String text, int image=-1, int selectedImage=-1, \n            TreeItemData data=None) -> TreeItemId\n        \"\"\"\n        return _controls_.TreeCtrl_AppendItem(*args, **kwargs)\n\n    def Delete(*args, **kwargs):\n        \"\"\"Delete(self, TreeItemId item)\"\"\"\n        return _controls_.TreeCtrl_Delete(*args, **kwargs)\n\n    def DeleteChildren(*args, **kwargs):\n        \"\"\"DeleteChildren(self, TreeItemId item)\"\"\"\n        return _controls_.TreeCtrl_DeleteChildren(*args, **kwargs)\n\n    def DeleteAllItems(*args, **kwargs):\n        \"\"\"DeleteAllItems(self)\"\"\"\n        return _controls_.TreeCtrl_DeleteAllItems(*args, **kwargs)\n\n    def Expand(*args, **kwargs):\n        \"\"\"Expand(self, TreeItemId item)\"\"\"\n        return _controls_.TreeCtrl_Expand(*args, **kwargs)\n\n    def ExpandAllChildren(*args, **kwargs):\n        \"\"\"ExpandAllChildren(self, TreeItemId item)\"\"\"\n        return _controls_.TreeCtrl_ExpandAllChildren(*args, **kwargs)\n\n    def ExpandAll(*args, **kwargs):\n        \"\"\"ExpandAll(self)\"\"\"\n        return _controls_.TreeCtrl_ExpandAll(*args, **kwargs)\n\n    def Collapse(*args, **kwargs):\n        \"\"\"Collapse(self, TreeItemId item)\"\"\"\n        return _controls_.TreeCtrl_Collapse(*args, **kwargs)\n\n    def CollapseAllChildren(*args, **kwargs):\n        \"\"\"CollapseAllChildren(self, TreeItemId item)\"\"\"\n        return _controls_.TreeCtrl_CollapseAllChildren(*args, **kwargs)\n\n    def CollapseAll(*args, **kwargs):\n        \"\"\"CollapseAll(self)\"\"\"\n        return _controls_.TreeCtrl_CollapseAll(*args, **kwargs)\n\n    def CollapseAndReset(*args, **kwargs):\n        \"\"\"CollapseAndReset(self, TreeItemId item)\"\"\"\n        return _controls_.TreeCtrl_CollapseAndReset(*args, **kwargs)\n\n    def Toggle(*args, **kwargs):\n        \"\"\"Toggle(self, TreeItemId item)\"\"\"\n        return _controls_.TreeCtrl_Toggle(*args, **kwargs)\n\n    def Unselect(*args, **kwargs):\n        \"\"\"Unselect(self)\"\"\"\n        return _controls_.TreeCtrl_Unselect(*args, **kwargs)\n\n    def UnselectItem(*args, **kwargs):\n        \"\"\"UnselectItem(self, TreeItemId item)\"\"\"\n        return _controls_.TreeCtrl_UnselectItem(*args, **kwargs)\n\n    def UnselectAll(*args, **kwargs):\n        \"\"\"UnselectAll(self)\"\"\"\n        return _controls_.TreeCtrl_UnselectAll(*args, **kwargs)\n\n    def SelectItem(*args, **kwargs):\n        \"\"\"SelectItem(self, TreeItemId item, bool select=True)\"\"\"\n        return _controls_.TreeCtrl_SelectItem(*args, **kwargs)\n\n    def SelectChildren(*args, **kwargs):\n        \"\"\"SelectChildren(self, TreeItemId parent)\"\"\"\n        return _controls_.TreeCtrl_SelectChildren(*args, **kwargs)\n\n    def ToggleItemSelection(*args, **kwargs):\n        \"\"\"ToggleItemSelection(self, TreeItemId item)\"\"\"\n        return _controls_.TreeCtrl_ToggleItemSelection(*args, **kwargs)\n\n    def EnsureVisible(*args, **kwargs):\n        \"\"\"EnsureVisible(self, TreeItemId item)\"\"\"\n        return _controls_.TreeCtrl_EnsureVisible(*args, **kwargs)\n\n    def ScrollTo(*args, **kwargs):\n        \"\"\"ScrollTo(self, TreeItemId item)\"\"\"\n        return _controls_.TreeCtrl_ScrollTo(*args, **kwargs)\n\n    def EditLabel(*args, **kwargs):\n        \"\"\"EditLabel(self, TreeItemId item)\"\"\"\n        return _controls_.TreeCtrl_EditLabel(*args, **kwargs)\n\n    def GetEditControl(*args, **kwargs):\n        \"\"\"GetEditControl(self) -> TextCtrl\"\"\"\n        return _controls_.TreeCtrl_GetEditControl(*args, **kwargs)\n\n    def SortChildren(*args, **kwargs):\n        \"\"\"SortChildren(self, TreeItemId item)\"\"\"\n        return _controls_.TreeCtrl_SortChildren(*args, **kwargs)\n\n    def HitTest(*args, **kwargs):\n        \"\"\"\n        HitTest(Point point) -> (item, where)\n\n        Determine which item (if any) belongs the given point.  The coordinates\n        specified are relative to the client area of tree ctrl and the where return\n        value is set to a bitmask of wxTREE_HITTEST_xxx constants.\n\n        \"\"\"\n        return _controls_.TreeCtrl_HitTest(*args, **kwargs)\n\n    def GetBoundingRect(*args, **kwargs):\n        \"\"\"GetBoundingRect(self, TreeItemId item, bool textOnly=False) -> PyObject\"\"\"\n        return _controls_.TreeCtrl_GetBoundingRect(*args, **kwargs)\n\n    def GetClassDefaultAttributes(*args, **kwargs):\n        \"\"\"\n        GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n        Get the default attributes for this class.  This is useful if you want\n        to use the same font or colour in your own control as in a standard\n        control -- which is a much better idea than hard coding specific\n        colours or fonts which might look completely out of place on the\n        user's system, especially if it uses themes.\n\n        The variant parameter is only relevant under Mac currently and is\n        ignore under other platforms. Under Mac, it will change the size of\n        the returned font. See `wx.Window.SetWindowVariant` for more about\n        this.\n        \"\"\"\n        return _controls_.TreeCtrl_GetClassDefaultAttributes(*args, **kwargs)\n\n    GetClassDefaultAttributes = staticmethod(GetClassDefaultAttributes)\n    def SetQuickBestSize(*args, **kwargs):\n        \"\"\"SetQuickBestSize(self, bool q)\"\"\"\n        return _controls_.TreeCtrl_SetQuickBestSize(*args, **kwargs)\n\n    def GetQuickBestSize(*args, **kwargs):\n        \"\"\"GetQuickBestSize(self) -> bool\"\"\"\n        return _controls_.TreeCtrl_GetQuickBestSize(*args, **kwargs)\n\n    Count = property(GetCount,doc=\"See `GetCount`\") \n    EditControl = property(GetEditControl,doc=\"See `GetEditControl`\") \n    FirstVisibleItem = property(GetFirstVisibleItem,doc=\"See `GetFirstVisibleItem`\") \n    ImageList = property(GetImageList,SetImageList,doc=\"See `GetImageList` and `SetImageList`\") \n    Indent = property(GetIndent,SetIndent,doc=\"See `GetIndent` and `SetIndent`\") \n    QuickBestSize = property(GetQuickBestSize,SetQuickBestSize,doc=\"See `GetQuickBestSize` and `SetQuickBestSize`\") \n    RootItem = property(GetRootItem,doc=\"See `GetRootItem`\") \n    Selection = property(GetSelection,doc=\"See `GetSelection`\") \n    Selections = property(GetSelections,doc=\"See `GetSelections`\") \n    Spacing = property(GetSpacing,SetSpacing,doc=\"See `GetSpacing` and `SetSpacing`\") \n    StateImageList = property(GetStateImageList,SetStateImageList,doc=\"See `GetStateImageList` and `SetStateImageList`\") \n_controls_.TreeCtrl_swigregister(TreeCtrl)\n\ndef PreTreeCtrl(*args, **kwargs):\n    \"\"\"PreTreeCtrl() -> TreeCtrl\"\"\"\n    val = _controls_.new_PreTreeCtrl(*args, **kwargs)\n    return val\n\ndef TreeCtrl_GetClassDefaultAttributes(*args, **kwargs):\n  \"\"\"\n    TreeCtrl_GetClassDefaultAttributes(int variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes\n\n    Get the default attributes for this class.  This is useful if you want\n    to use the same font or colour in your own control as in a standard\n    control -- which is a much better idea than hard coding specific\n    colours or fonts which might look completely out of place on the\n    user's system, especially if it uses themes.\n\n    The variant parameter is only relevant under Mac currently and is\n    ignore under other platforms. Under Mac, it will change the size of\n    the returned font. See `wx.Window.SetWindowVariant` for more about\n    this.\n    \"\"\"\n  return _controls_.TreeCtrl_GetClassDefaultAttributes(*args, **kwargs)\n\n#---------------------------------------------------------------------------\n\nDIRCTRL_DIR_ONLY = _controls_.DIRCTRL_DIR_ONLY\nDIRCTRL_SELECT_FIRST = _controls_.DIRCTRL_SELECT_FIRST\nDIRCTRL_SHOW_FILTERS = _controls_.DIRCTRL_SHOW_FILTERS\nDIRCTRL_3D_INTERNAL = _controls_.DIRCTRL_3D_INTERNAL\nDIRCTRL_EDIT_LABELS = _controls_.DIRCTRL_EDIT_LABELS\nDIRCTRL_MULTIPLE = _controls_.DIRCTRL_MULTIPLE\nclass DirItemData(_core.Object):\n    \"\"\"Proxy of C++ DirItemData class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    def __init__(self): raise AttributeError, \"No constructor defined\"\n    __repr__ = _swig_repr\n    def SetNewDirName(*args, **kwargs):\n        \"\"\"SetNewDirName(self, String path)\"\"\"\n        return _controls_.DirItemData_SetNewDirName(*args, **kwargs)\n\n    m_path = property(_controls_.DirItemData_m_path_get, _controls_.DirItemData_m_path_set)\n    m_name = property(_controls_.DirItemData_m_name_get, _controls_.DirItemData_m_name_set)\n    m_isHidden = property(_controls_.DirItemData_m_isHidden_get, _controls_.DirItemData_m_isHidden_set)\n    m_isExpanded = property(_controls_.DirItemData_m_isExpanded_get, _controls_.DirItemData_m_isExpanded_set)\n    m_isDir = property(_controls_.DirItemData_m_isDir_get, _controls_.DirItemData_m_isDir_set)\n_controls_.DirItemData_swigregister(DirItemData)\nDirDialogDefaultFolderStr = cvar.DirDialogDefaultFolderStr\n\nclass GenericDirCtrl(_core.Control):\n    \"\"\"Proxy of C++ GenericDirCtrl class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, String dir=DirDialogDefaultFolderStr, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=DIRCTRL_3D_INTERNAL, \n            String filter=EmptyString, int defaultFilter=0, \n            String name=TreeCtrlNameStr) -> GenericDirCtrl\n        \"\"\"\n        _controls_.GenericDirCtrl_swiginit(self,_controls_.new_GenericDirCtrl(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, String dir=DirDialogDefaultFolderStr, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=DIRCTRL_3D_INTERNAL, \n            String filter=EmptyString, int defaultFilter=0, \n            String name=TreeCtrlNameStr) -> bool\n        \"\"\"\n        return _controls_.GenericDirCtrl_Create(*args, **kwargs)\n\n    def ExpandPath(*args, **kwargs):\n        \"\"\"ExpandPath(self, String path) -> bool\"\"\"\n        return _controls_.GenericDirCtrl_ExpandPath(*args, **kwargs)\n\n    def CollapsePath(*args, **kwargs):\n        \"\"\"CollapsePath(self, String path) -> bool\"\"\"\n        return _controls_.GenericDirCtrl_CollapsePath(*args, **kwargs)\n\n    def GetDefaultPath(*args, **kwargs):\n        \"\"\"GetDefaultPath(self) -> String\"\"\"\n        return _controls_.GenericDirCtrl_GetDefaultPath(*args, **kwargs)\n\n    def SetDefaultPath(*args, **kwargs):\n        \"\"\"SetDefaultPath(self, String path)\"\"\"\n        return _controls_.GenericDirCtrl_SetDefaultPath(*args, **kwargs)\n\n    def GetPath(*args, **kwargs):\n        \"\"\"GetPath(self) -> String\"\"\"\n        return _controls_.GenericDirCtrl_GetPath(*args, **kwargs)\n\n    def GetPaths(*args, **kwargs):\n        \"\"\"GetPaths(self) -> wxArrayString\"\"\"\n        return _controls_.GenericDirCtrl_GetPaths(*args, **kwargs)\n\n    def GetFilePath(*args, **kwargs):\n        \"\"\"GetFilePath(self) -> String\"\"\"\n        return _controls_.GenericDirCtrl_GetFilePath(*args, **kwargs)\n\n    def SetPath(*args, **kwargs):\n        \"\"\"SetPath(self, String path)\"\"\"\n        return _controls_.GenericDirCtrl_SetPath(*args, **kwargs)\n\n    def GetFilePaths(*args, **kwargs):\n        \"\"\"GetFilePaths(self) -> wxArrayString\"\"\"\n        return _controls_.GenericDirCtrl_GetFilePaths(*args, **kwargs)\n\n    def SelectPath(*args, **kwargs):\n        \"\"\"SelectPath(self, String path, bool select=True)\"\"\"\n        return _controls_.GenericDirCtrl_SelectPath(*args, **kwargs)\n\n    def SelectPaths(*args, **kwargs):\n        \"\"\"SelectPaths(self, wxArrayString paths)\"\"\"\n        return _controls_.GenericDirCtrl_SelectPaths(*args, **kwargs)\n\n    def ShowHidden(*args, **kwargs):\n        \"\"\"ShowHidden(self, bool show)\"\"\"\n        return _controls_.GenericDirCtrl_ShowHidden(*args, **kwargs)\n\n    def GetShowHidden(*args, **kwargs):\n        \"\"\"GetShowHidden(self) -> bool\"\"\"\n        return _controls_.GenericDirCtrl_GetShowHidden(*args, **kwargs)\n\n    def GetFilter(*args, **kwargs):\n        \"\"\"GetFilter(self) -> String\"\"\"\n        return _controls_.GenericDirCtrl_GetFilter(*args, **kwargs)\n\n    def SetFilter(*args, **kwargs):\n        \"\"\"SetFilter(self, String filter)\"\"\"\n        return _controls_.GenericDirCtrl_SetFilter(*args, **kwargs)\n\n    def GetFilterIndex(*args, **kwargs):\n        \"\"\"GetFilterIndex(self) -> int\"\"\"\n        return _controls_.GenericDirCtrl_GetFilterIndex(*args, **kwargs)\n\n    def SetFilterIndex(*args, **kwargs):\n        \"\"\"SetFilterIndex(self, int n)\"\"\"\n        return _controls_.GenericDirCtrl_SetFilterIndex(*args, **kwargs)\n\n    def GetRootId(*args, **kwargs):\n        \"\"\"GetRootId(self) -> TreeItemId\"\"\"\n        return _controls_.GenericDirCtrl_GetRootId(*args, **kwargs)\n\n    def GetTreeCtrl(*args, **kwargs):\n        \"\"\"GetTreeCtrl(self) -> TreeCtrl\"\"\"\n        return _controls_.GenericDirCtrl_GetTreeCtrl(*args, **kwargs)\n\n    def GetFilterListCtrl(*args, **kwargs):\n        \"\"\"GetFilterListCtrl(self) -> DirFilterListCtrl\"\"\"\n        return _controls_.GenericDirCtrl_GetFilterListCtrl(*args, **kwargs)\n\n    def UnselectAll(*args, **kwargs):\n        \"\"\"UnselectAll(self)\"\"\"\n        return _controls_.GenericDirCtrl_UnselectAll(*args, **kwargs)\n\n    def GetDirItemData(*args, **kwargs):\n        \"\"\"GetDirItemData(self, TreeItemId id) -> DirItemData\"\"\"\n        return _controls_.GenericDirCtrl_GetDirItemData(*args, **kwargs)\n\n    def FindChild(*args, **kwargs):\n        \"\"\"\n        FindChild(wxTreeItemId parentId, wxString path) -> (item, done)\n\n        Find the child that matches the first part of 'path'.  E.g. if a child\n        path is \"\/usr\" and 'path' is \"\/usr\/include\" then the child for\n        \/usr is returned.  If the path string has been used (we're at the\n        leaf), done is set to True.\n\n        \"\"\"\n        return _controls_.GenericDirCtrl_FindChild(*args, **kwargs)\n\n    def DoResize(*args, **kwargs):\n        \"\"\"DoResize(self)\"\"\"\n        return _controls_.GenericDirCtrl_DoResize(*args, **kwargs)\n\n    def ReCreateTree(*args, **kwargs):\n        \"\"\"ReCreateTree(self)\"\"\"\n        return _controls_.GenericDirCtrl_ReCreateTree(*args, **kwargs)\n\n    DefaultPath = property(GetDefaultPath,SetDefaultPath,doc=\"See `GetDefaultPath` and `SetDefaultPath`\") \n    FilePath = property(GetFilePath,doc=\"See `GetFilePath`\") \n    Filter = property(GetFilter,SetFilter,doc=\"See `GetFilter` and `SetFilter`\") \n    FilterIndex = property(GetFilterIndex,SetFilterIndex,doc=\"See `GetFilterIndex` and `SetFilterIndex`\") \n    FilterListCtrl = property(GetFilterListCtrl,doc=\"See `GetFilterListCtrl`\") \n    Path = property(GetPath,SetPath,doc=\"See `GetPath` and `SetPath`\") \n    RootId = property(GetRootId,doc=\"See `GetRootId`\") \n    TreeCtrl = property(GetTreeCtrl,doc=\"See `GetTreeCtrl`\") \n_controls_.GenericDirCtrl_swigregister(GenericDirCtrl)\n\ndef PreGenericDirCtrl(*args, **kwargs):\n    \"\"\"PreGenericDirCtrl() -> GenericDirCtrl\"\"\"\n    val = _controls_.new_PreGenericDirCtrl(*args, **kwargs)\n    return val\n\nclass DirFilterListCtrl(Choice):\n    \"\"\"Proxy of C++ DirFilterListCtrl class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, GenericDirCtrl parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=0) -> DirFilterListCtrl\n        \"\"\"\n        _controls_.DirFilterListCtrl_swiginit(self,_controls_.new_DirFilterListCtrl(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, GenericDirCtrl parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=0) -> bool\n        \"\"\"\n        return _controls_.DirFilterListCtrl_Create(*args, **kwargs)\n\n    def FillFilterList(*args, **kwargs):\n        \"\"\"FillFilterList(self, String filter, int defaultFilter)\"\"\"\n        return _controls_.DirFilterListCtrl_FillFilterList(*args, **kwargs)\n\n_controls_.DirFilterListCtrl_swigregister(DirFilterListCtrl)\n\ndef PreDirFilterListCtrl(*args, **kwargs):\n    \"\"\"PreDirFilterListCtrl() -> DirFilterListCtrl\"\"\"\n    val = _controls_.new_PreDirFilterListCtrl(*args, **kwargs)\n    return val\n\n#---------------------------------------------------------------------------\n\nclass PyControl(_core.Control):\n    \"\"\"Proxy of C++ PyControl class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=0, Validator validator=DefaultValidator, \n            String name=ControlNameStr) -> PyControl\n        \"\"\"\n        _controls_.PyControl_swiginit(self,_controls_.new_PyControl(*args, **kwargs))\n        self._setOORInfo(self);PyControl._setCallbackInfo(self, self, PyControl)\n\n    def _setCallbackInfo(*args, **kwargs):\n        \"\"\"_setCallbackInfo(self, PyObject self, PyObject _class)\"\"\"\n        return _controls_.PyControl__setCallbackInfo(*args, **kwargs)\n\n    SetBestSize = wx.Window.SetInitialSize \n    def DoEraseBackground(*args, **kwargs):\n        \"\"\"DoEraseBackground(self, DC dc) -> bool\"\"\"\n        return _controls_.PyControl_DoEraseBackground(*args, **kwargs)\n\n    def DoMoveWindow(*args, **kwargs):\n        \"\"\"DoMoveWindow(self, int x, int y, int width, int height)\"\"\"\n        return _controls_.PyControl_DoMoveWindow(*args, **kwargs)\n\n    def DoSetSize(*args, **kwargs):\n        \"\"\"DoSetSize(self, int x, int y, int width, int height, int sizeFlags=SIZE_AUTO)\"\"\"\n        return _controls_.PyControl_DoSetSize(*args, **kwargs)\n\n    def DoSetClientSize(*args, **kwargs):\n        \"\"\"DoSetClientSize(self, int width, int height)\"\"\"\n        return _controls_.PyControl_DoSetClientSize(*args, **kwargs)\n\n    def DoSetVirtualSize(*args, **kwargs):\n        \"\"\"DoSetVirtualSize(self, int x, int y)\"\"\"\n        return _controls_.PyControl_DoSetVirtualSize(*args, **kwargs)\n\n    def DoGetSize(*args, **kwargs):\n        \"\"\"DoGetSize() -> (width, height)\"\"\"\n        return _controls_.PyControl_DoGetSize(*args, **kwargs)\n\n    def DoGetClientSize(*args, **kwargs):\n        \"\"\"DoGetClientSize() -> (width, height)\"\"\"\n        return _controls_.PyControl_DoGetClientSize(*args, **kwargs)\n\n    def DoGetPosition(*args, **kwargs):\n        \"\"\"DoGetPosition() -> (x,y)\"\"\"\n        return _controls_.PyControl_DoGetPosition(*args, **kwargs)\n\n    def DoGetVirtualSize(*args, **kwargs):\n        \"\"\"DoGetVirtualSize(self) -> Size\"\"\"\n        return _controls_.PyControl_DoGetVirtualSize(*args, **kwargs)\n\n    def DoGetBestSize(*args, **kwargs):\n        \"\"\"DoGetBestSize(self) -> Size\"\"\"\n        return _controls_.PyControl_DoGetBestSize(*args, **kwargs)\n\n    def GetDefaultAttributes(*args, **kwargs):\n        \"\"\"GetDefaultAttributes(self) -> VisualAttributes\"\"\"\n        return _controls_.PyControl_GetDefaultAttributes(*args, **kwargs)\n\n    def OnInternalIdle(*args, **kwargs):\n        \"\"\"OnInternalIdle(self)\"\"\"\n        return _controls_.PyControl_OnInternalIdle(*args, **kwargs)\n\n    def base_DoMoveWindow(*args, **kw):\n        return PyControl.DoMoveWindow(*args, **kw)\n    base_DoMoveWindow = wx.deprecated(base_DoMoveWindow,\n                                   \"Please use PyControl.DoMoveWindow instead.\")\n\n    def base_DoSetSize(*args, **kw):\n        return PyControl.DoSetSize(*args, **kw)\n    base_DoSetSize = wx.deprecated(base_DoSetSize,\n                                   \"Please use PyControl.DoSetSize instead.\")\n\n    def base_DoSetClientSize(*args, **kw):\n        return PyControl.DoSetClientSize(*args, **kw)\n    base_DoSetClientSize = wx.deprecated(base_DoSetClientSize,\n                                   \"Please use PyControl.DoSetClientSize instead.\")\n\n    def base_DoSetVirtualSize(*args, **kw):\n        return PyControl.DoSetVirtualSize(*args, **kw)\n    base_DoSetVirtualSize = wx.deprecated(base_DoSetVirtualSize,\n                                   \"Please use PyControl.DoSetVirtualSize instead.\")\n\n    def base_DoGetSize(*args, **kw):\n        return PyControl.DoGetSize(*args, **kw)\n    base_DoGetSize = wx.deprecated(base_DoGetSize,\n                                   \"Please use PyControl.DoGetSize instead.\")\n\n    def base_DoGetClientSize(*args, **kw):\n        return PyControl.DoGetClientSize(*args, **kw)\n    base_DoGetClientSize = wx.deprecated(base_DoGetClientSize,\n                                   \"Please use PyControl.DoGetClientSize instead.\")\n\n    def base_DoGetPosition(*args, **kw):\n        return PyControl.DoGetPosition(*args, **kw)\n    base_DoGetPosition = wx.deprecated(base_DoGetPosition,\n                                   \"Please use PyControl.DoGetPosition instead.\")\n\n    def base_DoGetVirtualSize(*args, **kw):\n        return PyControl.DoGetVirtualSize(*args, **kw)\n    base_DoGetVirtualSize = wx.deprecated(base_DoGetVirtualSize,\n                                   \"Please use PyControl.DoGetVirtualSize instead.\")\n\n    def base_DoGetBestSize(*args, **kw):\n        return PyControl.DoGetBestSize(*args, **kw)\n    base_DoGetBestSize = wx.deprecated(base_DoGetBestSize,\n                                   \"Please use PyControl.DoGetBestSize instead.\")\n\n    def base_InitDialog(*args, **kw):\n        return PyControl.InitDialog(*args, **kw)\n    base_InitDialog = wx.deprecated(base_InitDialog,\n                                   \"Please use PyControl.InitDialog instead.\")\n\n    def base_TransferDataToWindow(*args, **kw):\n        return PyControl.TransferDataToWindow(*args, **kw)\n    base_TransferDataToWindow = wx.deprecated(base_TransferDataToWindow,\n                                   \"Please use PyControl.TransferDataToWindow instead.\")\n\n    def base_TransferDataFromWindow(*args, **kw):\n        return PyControl.TransferDataFromWindow(*args, **kw)\n    base_TransferDataFromWindow = wx.deprecated(base_TransferDataFromWindow,\n                                   \"Please use PyControl.TransferDataFromWindow instead.\")\n\n    def base_Validate(*args, **kw):\n        return PyControl.Validate(*args, **kw)\n    base_Validate = wx.deprecated(base_Validate,\n                                   \"Please use PyControl.Validate instead.\")\n\n    def base_AcceptsFocus(*args, **kw):\n        return PyControl.AcceptsFocus(*args, **kw)\n    base_AcceptsFocus = wx.deprecated(base_AcceptsFocus,\n                                   \"Please use PyControl.AcceptsFocus instead.\")\n\n    def base_AcceptsFocusFromKeyboard(*args, **kw):\n        return PyControl.AcceptsFocusFromKeyboard(*args, **kw)\n    base_AcceptsFocusFromKeyboard = wx.deprecated(base_AcceptsFocusFromKeyboard,\n                                   \"Please use PyControl.AcceptsFocusFromKeyboard instead.\")\n\n    def base_GetMaxSize(*args, **kw):\n        return PyControl.GetMaxSize(*args, **kw)\n    base_GetMaxSize = wx.deprecated(base_GetMaxSize,\n                                   \"Please use PyControl.GetMaxSize instead.\")\n\n    def base_Enable(*args, **kw):\n        return PyControl.Enable(*args, **kw)\n    base_Enable = wx.deprecated(base_Enable,\n                                   \"Please use PyControl.Enable instead.\")\n\n    def base_AddChild(*args, **kw):\n        return PyControl.AddChild(*args, **kw)\n    base_AddChild = wx.deprecated(base_AddChild,\n                                   \"Please use PyControl.AddChild instead.\")\n\n    def base_RemoveChild(*args, **kw):\n        return PyControl.RemoveChild(*args, **kw)\n    base_RemoveChild = wx.deprecated(base_RemoveChild,\n                                   \"Please use PyControl.RemoveChild instead.\")\n\n    def base_ShouldInheritColours(*args, **kw):\n        return PyControl.ShouldInheritColours(*args, **kw)\n    base_ShouldInheritColours = wx.deprecated(base_ShouldInheritColours,\n                                   \"Please use PyControl.ShouldInheritColours instead.\")\n\n    def base_GetDefaultAttributes(*args, **kw):\n        return PyControl.GetDefaultAttributes(*args, **kw)\n    base_GetDefaultAttributes = wx.deprecated(base_GetDefaultAttributes,\n                                   \"Please use PyControl.GetDefaultAttributes instead.\")\n\n    def base_OnInternalIdle(*args, **kw):\n        return PyControl.OnInternalIdle(*args, **kw)\n    base_OnInternalIdle = wx.deprecated(base_OnInternalIdle,\n                                   \"Please use PyControl.OnInternalIdle instead.\")\n\n_controls_.PyControl_swigregister(PyControl)\n\ndef PrePyControl(*args, **kwargs):\n    \"\"\"PrePyControl() -> PyControl\"\"\"\n    val = _controls_.new_PrePyControl(*args, **kwargs)\n    return val\n\n#---------------------------------------------------------------------------\n\nwxEVT_HELP = _controls_.wxEVT_HELP\nwxEVT_DETAILED_HELP = _controls_.wxEVT_DETAILED_HELP\nEVT_HELP = wx.PyEventBinder( wxEVT_HELP, 1)\nEVT_HELP_RANGE = wx.PyEventBinder(  wxEVT_HELP, 2)\nEVT_DETAILED_HELP = wx.PyEventBinder( wxEVT_DETAILED_HELP, 1)\nEVT_DETAILED_HELP_RANGE = wx.PyEventBinder( wxEVT_DETAILED_HELP, 2)\n\nclass HelpEvent(_core.CommandEvent):\n    \"\"\"\n    A help event is sent when the user has requested context-sensitive\n    help. This can either be caused by the application requesting\n    context-sensitive help mode via wx.ContextHelp, or (on MS Windows) by\n    the system generating a WM_HELP message when the user pressed F1 or\n    clicked on the query button in a dialog caption.\n\n    A help event is sent to the window that the user clicked on, and is\n    propagated up the window hierarchy until the event is processed or\n    there are no more event handlers. The application should call\n    event.GetId to check the identity of the clicked-on window, and then\n    either show some suitable help or call event.Skip if the identifier is\n    unrecognised. Calling Skip is important because it allows wxWindows to\n    generate further events for ancestors of the clicked-on\n    window. Otherwise it would be impossible to show help for container\n    windows, since processing would stop after the first window found.\n    \"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    Origin_Unknown = _controls_.HelpEvent_Origin_Unknown\n    Origin_Keyboard = _controls_.HelpEvent_Origin_Keyboard\n    Origin_HelpButton = _controls_.HelpEvent_Origin_HelpButton\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, EventType type=wxEVT_NULL, int winid=0, Point pt=DefaultPosition, \n            int origin=Origin_Unknown) -> HelpEvent\n        \"\"\"\n        _controls_.HelpEvent_swiginit(self,_controls_.new_HelpEvent(*args, **kwargs))\n    def GetPosition(*args, **kwargs):\n        \"\"\"\n        GetPosition(self) -> Point\n\n        Returns the left-click position of the mouse, in screen\n        coordinates. This allows the application to position the help\n        appropriately.\n        \"\"\"\n        return _controls_.HelpEvent_GetPosition(*args, **kwargs)\n\n    def SetPosition(*args, **kwargs):\n        \"\"\"\n        SetPosition(self, Point pos)\n\n        Sets the left-click position of the mouse, in screen coordinates.\n        \"\"\"\n        return _controls_.HelpEvent_SetPosition(*args, **kwargs)\n\n    def GetLink(*args, **kwargs):\n        \"\"\"\n        GetLink(self) -> String\n\n        Get an optional link to further help\n        \"\"\"\n        return _controls_.HelpEvent_GetLink(*args, **kwargs)\n\n    def SetLink(*args, **kwargs):\n        \"\"\"\n        SetLink(self, String link)\n\n        Set an optional link to further help\n        \"\"\"\n        return _controls_.HelpEvent_SetLink(*args, **kwargs)\n\n    def GetTarget(*args, **kwargs):\n        \"\"\"\n        GetTarget(self) -> String\n\n        Get an optional target to display help in. E.g. a window specification\n        \"\"\"\n        return _controls_.HelpEvent_GetTarget(*args, **kwargs)\n\n    def SetTarget(*args, **kwargs):\n        \"\"\"\n        SetTarget(self, String target)\n\n        Set an optional target to display help in. E.g. a window specification\n        \"\"\"\n        return _controls_.HelpEvent_SetTarget(*args, **kwargs)\n\n    def GetOrigin(*args, **kwargs):\n        \"\"\"\n        GetOrigin(self) -> int\n\n        Optiononal indication of the source of the event.\n        \"\"\"\n        return _controls_.HelpEvent_GetOrigin(*args, **kwargs)\n\n    def SetOrigin(*args, **kwargs):\n        \"\"\"SetOrigin(self, int origin)\"\"\"\n        return _controls_.HelpEvent_SetOrigin(*args, **kwargs)\n\n    Link = property(GetLink,SetLink,doc=\"See `GetLink` and `SetLink`\") \n    Origin = property(GetOrigin,SetOrigin,doc=\"See `GetOrigin` and `SetOrigin`\") \n    Position = property(GetPosition,SetPosition,doc=\"See `GetPosition` and `SetPosition`\") \n    Target = property(GetTarget,SetTarget,doc=\"See `GetTarget` and `SetTarget`\") \n_controls_.HelpEvent_swigregister(HelpEvent)\n\nclass ContextHelp(_core.Object):\n    \"\"\"\n    This class changes the cursor to a query and puts the application into\n    a 'context-sensitive help mode'. When the user left-clicks on a window\n    within the specified window, a ``EVT_HELP`` event is sent to that\n    control, and the application may respond to it by popping up some\n    help.\n\n    There are a couple of ways to invoke this behaviour implicitly:\n\n        * Use the wx.WS_EX_CONTEXTHELP extended style for a dialog or frame\n          (Windows only). This will put a question mark in the titlebar,\n          and Windows will put the application into context-sensitive help\n          mode automatically, with further programming.\n\n        * Create a `wx.ContextHelpButton`, whose predefined behaviour is\n          to create a context help object. Normally you will write your\n          application so that this button is only added to a dialog for\n          non-Windows platforms (use ``wx.WS_EX_CONTEXTHELP`` on\n          Windows).\n\n    :see: `wx.ContextHelpButton`\n\n    \"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window window=None, bool doNow=True) -> ContextHelp\n\n        Constructs a context help object, calling BeginContextHelp if doNow is\n        true (the default).\n\n        If window is None, the top window is used.\n        \"\"\"\n        _controls_.ContextHelp_swiginit(self,_controls_.new_ContextHelp(*args, **kwargs))\n    __swig_destroy__ = _controls_.delete_ContextHelp\n    __del__ = lambda self : None;\n    def BeginContextHelp(*args, **kwargs):\n        \"\"\"\n        BeginContextHelp(self, Window window=None) -> bool\n\n        Puts the application into context-sensitive help mode. window is the\n        window which will be used to catch events; if NULL, the top window\n        will be used.\n\n        Returns true if the application was successfully put into\n        context-sensitive help mode. This function only returns when the event\n        loop has finished.\n        \"\"\"\n        return _controls_.ContextHelp_BeginContextHelp(*args, **kwargs)\n\n    def EndContextHelp(*args, **kwargs):\n        \"\"\"\n        EndContextHelp(self) -> bool\n\n        Ends context-sensitive help mode. Not normally called by the\n        application.\n        \"\"\"\n        return _controls_.ContextHelp_EndContextHelp(*args, **kwargs)\n\n_controls_.ContextHelp_swigregister(ContextHelp)\n\nclass ContextHelpButton(BitmapButton):\n    \"\"\"\n    Instances of this class may be used to add a question mark button that\n    when pressed, puts the application into context-help mode. It does\n    this by creating a wx.ContextHelp object which itself generates a\n    ``EVT_HELP`` event when the user clicks on a window.\n\n    On Windows, you may add a question-mark icon to a dialog by use of the\n    ``wx.DIALOG_EX_CONTEXTHELP`` extra style, but on other platforms you\n    will have to add a button explicitly, usually next to OK, Cancel or\n    similar buttons.\n\n    :see: `wx.ContextHelp`, `wx.ContextHelpButton`\n\n    \"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=ID_CONTEXT_HELP, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=BU_AUTODRAW) -> ContextHelpButton\n\n        Constructor, creating and showing a context help button.\n        \"\"\"\n        _controls_.ContextHelpButton_swiginit(self,_controls_.new_ContextHelpButton(*args, **kwargs))\n        self._setOORInfo(self)\n\n_controls_.ContextHelpButton_swigregister(ContextHelpButton)\n\nclass HelpProvider(object):\n    \"\"\"\n    wx.HelpProvider is an abstract class used by a program\n    implementing context-sensitive help to show the help text for the\n    given window.\n\n    The current help provider must be explicitly set by the\n    application using wx.HelpProvider.Set().\n    \"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    def __init__(self): raise AttributeError, \"No constructor defined\"\n    __repr__ = _swig_repr\n    __swig_destroy__ = _controls_.delete_HelpProvider\n    __del__ = lambda self : None;\n    def Set(*args, **kwargs):\n        \"\"\"\n        Set(HelpProvider helpProvider) -> HelpProvider\n\n        Sset the current, application-wide help provider. Returns the previous\n        one.  Unlike some other classes, the help provider is not created on\n        demand. This must be explicitly done by the application.\n        \"\"\"\n        return _controls_.HelpProvider_Set(*args, **kwargs)\n\n    Set = staticmethod(Set)\n    def Get(*args, **kwargs):\n        \"\"\"\n        Get() -> HelpProvider\n\n        Return the current application-wide help provider.\n        \"\"\"\n        return _controls_.HelpProvider_Get(*args, **kwargs)\n\n    Get = staticmethod(Get)\n    def GetHelp(*args, **kwargs):\n        \"\"\"\n        GetHelp(self, Window window) -> String\n\n        Gets the help string for this window. Its interpretation is dependent\n        on the help provider except that empty string always means that no\n        help is associated with the window.\n        \"\"\"\n        return _controls_.HelpProvider_GetHelp(*args, **kwargs)\n\n    def ShowHelp(*args, **kwargs):\n        \"\"\"\n        ShowHelp(self, Window window) -> bool\n\n        Shows help for the given window. Uses GetHelp internally if\n        applicable. Returns True if it was done, or False if no help was\n        available for this window.\n        \"\"\"\n        return _controls_.HelpProvider_ShowHelp(*args, **kwargs)\n\n    def ShowHelpAtPoint(*args, **kwargs):\n        \"\"\"\n        ShowHelpAtPoint(self, wxWindowBase window, Point pt, int origin) -> bool\n\n        Show help for the given window (uses window.GetHelpAtPoint()\n        internally if applicable), return true if it was done or false if no\n        help available for this window.\n        \"\"\"\n        return _controls_.HelpProvider_ShowHelpAtPoint(*args, **kwargs)\n\n    def AddHelp(*args, **kwargs):\n        \"\"\"\n        AddHelp(self, Window window, String text)\n\n        Associates the text with the given window.\n        \"\"\"\n        return _controls_.HelpProvider_AddHelp(*args, **kwargs)\n\n    def AddHelpById(*args, **kwargs):\n        \"\"\"\n        AddHelpById(self, int id, String text)\n\n        This version associates the given text with all windows with this\n        id. May be used to set the same help string for all Cancel buttons in\n        the application, for example.\n        \"\"\"\n        return _controls_.HelpProvider_AddHelpById(*args, **kwargs)\n\n    def RemoveHelp(*args, **kwargs):\n        \"\"\"\n        RemoveHelp(self, Window window)\n\n        Removes the association between the window pointer and the help\n        text. This is called by the wx.Window destructor. Without this, the\n        table of help strings will fill up and when window pointers are\n        reused, the wrong help string will be found.\n        \"\"\"\n        return _controls_.HelpProvider_RemoveHelp(*args, **kwargs)\n\n    def Destroy(*args, **kwargs):\n        \"\"\"Destroy(self)\"\"\"\n        args[0].this.own(False)\n        return _controls_.HelpProvider_Destroy(*args, **kwargs)\n\n_controls_.HelpProvider_swigregister(HelpProvider)\n\ndef HelpProvider_Set(*args, **kwargs):\n  \"\"\"\n    HelpProvider_Set(HelpProvider helpProvider) -> HelpProvider\n\n    Sset the current, application-wide help provider. Returns the previous\n    one.  Unlike some other classes, the help provider is not created on\n    demand. This must be explicitly done by the application.\n    \"\"\"\n  return _controls_.HelpProvider_Set(*args, **kwargs)\n\ndef HelpProvider_Get(*args):\n  \"\"\"\n    HelpProvider_Get() -> HelpProvider\n\n    Return the current application-wide help provider.\n    \"\"\"\n  return _controls_.HelpProvider_Get(*args)\n\nclass SimpleHelpProvider(HelpProvider):\n    \"\"\"\n    wx.SimpleHelpProvider is an implementation of `wx.HelpProvider` which\n    supports only plain text help strings, and shows the string associated\n    with the control (if any) in a tooltip.\n    \"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self) -> SimpleHelpProvider\n\n        wx.SimpleHelpProvider is an implementation of `wx.HelpProvider` which\n        supports only plain text help strings, and shows the string associated\n        with the control (if any) in a tooltip.\n        \"\"\"\n        _controls_.SimpleHelpProvider_swiginit(self,_controls_.new_SimpleHelpProvider(*args, **kwargs))\n_controls_.SimpleHelpProvider_swigregister(SimpleHelpProvider)\n\n#---------------------------------------------------------------------------\n\nclass DragImage(_core.Object):\n    \"\"\"Proxy of C++ DragImage class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"__init__(self, Bitmap image, Cursor cursor=wxNullCursor) -> DragImage\"\"\"\n        _controls_.DragImage_swiginit(self,_controls_.new_DragImage(*args, **kwargs))\n    __swig_destroy__ = _controls_.delete_DragImage\n    __del__ = lambda self : None;\n    def SetBackingBitmap(*args, **kwargs):\n        \"\"\"SetBackingBitmap(self, Bitmap bitmap)\"\"\"\n        return _controls_.DragImage_SetBackingBitmap(*args, **kwargs)\n\n    def BeginDrag(*args, **kwargs):\n        \"\"\"\n        BeginDrag(self, Point hotspot, Window window, bool fullScreen=False, \n            Rect rect=None) -> bool\n        \"\"\"\n        return _controls_.DragImage_BeginDrag(*args, **kwargs)\n\n    def BeginDragBounded(*args, **kwargs):\n        \"\"\"BeginDragBounded(self, Point hotspot, Window window, Window boundingWindow) -> bool\"\"\"\n        return _controls_.DragImage_BeginDragBounded(*args, **kwargs)\n\n    def EndDrag(*args, **kwargs):\n        \"\"\"EndDrag(self) -> bool\"\"\"\n        return _controls_.DragImage_EndDrag(*args, **kwargs)\n\n    def Move(*args, **kwargs):\n        \"\"\"Move(self, Point pt) -> bool\"\"\"\n        return _controls_.DragImage_Move(*args, **kwargs)\n\n    def Show(*args, **kwargs):\n        \"\"\"Show(self) -> bool\"\"\"\n        return _controls_.DragImage_Show(*args, **kwargs)\n\n    def Hide(*args, **kwargs):\n        \"\"\"Hide(self) -> bool\"\"\"\n        return _controls_.DragImage_Hide(*args, **kwargs)\n\n    def GetImageRect(*args, **kwargs):\n        \"\"\"GetImageRect(self, Point pos) -> Rect\"\"\"\n        return _controls_.DragImage_GetImageRect(*args, **kwargs)\n\n    def DoDrawImage(*args, **kwargs):\n        \"\"\"DoDrawImage(self, DC dc, Point pos) -> bool\"\"\"\n        return _controls_.DragImage_DoDrawImage(*args, **kwargs)\n\n    def UpdateBackingFromWindow(*args, **kwargs):\n        \"\"\"UpdateBackingFromWindow(self, DC windowDC, MemoryDC destDC, Rect sourceRect, Rect destRect) -> bool\"\"\"\n        return _controls_.DragImage_UpdateBackingFromWindow(*args, **kwargs)\n\n    def RedrawImage(*args, **kwargs):\n        \"\"\"RedrawImage(self, Point oldPos, Point newPos, bool eraseOld, bool drawNew) -> bool\"\"\"\n        return _controls_.DragImage_RedrawImage(*args, **kwargs)\n\n    ImageRect = property(GetImageRect,doc=\"See `GetImageRect`\") \n_controls_.DragImage_swigregister(DragImage)\n\ndef DragIcon(*args, **kwargs):\n    \"\"\"DragIcon(Icon image, Cursor cursor=wxNullCursor) -> DragImage\"\"\"\n    val = _controls_.new_DragIcon(*args, **kwargs)\n    return val\n\ndef DragString(*args, **kwargs):\n    \"\"\"DragString(String str, Cursor cursor=wxNullCursor) -> DragImage\"\"\"\n    val = _controls_.new_DragString(*args, **kwargs)\n    return val\n\ndef DragTreeItem(*args, **kwargs):\n    \"\"\"DragTreeItem(TreeCtrl treeCtrl, TreeItemId id) -> DragImage\"\"\"\n    val = _controls_.new_DragTreeItem(*args, **kwargs)\n    return val\n\ndef DragListItem(*args, **kwargs):\n    \"\"\"DragListItem(ListCtrl listCtrl, long id) -> DragImage\"\"\"\n    val = _controls_.new_DragListItem(*args, **kwargs)\n    return val\n\n#---------------------------------------------------------------------------\n\nDP_DEFAULT = _controls_.DP_DEFAULT\nDP_SPIN = _controls_.DP_SPIN\nDP_DROPDOWN = _controls_.DP_DROPDOWN\nDP_SHOWCENTURY = _controls_.DP_SHOWCENTURY\nDP_ALLOWNONE = _controls_.DP_ALLOWNONE\nclass DatePickerCtrlBase(_core.Control):\n    \"\"\"Proxy of C++ DatePickerCtrlBase class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    def __init__(self): raise AttributeError, \"No constructor defined\"\n    __repr__ = _swig_repr\n    def SetValue(*args, **kwargs):\n        \"\"\"\n        SetValue(self, DateTime dt)\n\n        Changes the current value of the control. The date should be valid and\n        included in the currently selected range, if any.\n\n        Calling this method does not result in a date change event.\n        \"\"\"\n        return _controls_.DatePickerCtrlBase_SetValue(*args, **kwargs)\n\n    def GetValue(*args, **kwargs):\n        \"\"\"\n        GetValue(self) -> DateTime\n\n        Returns the currently selected date. If there is no selection or the\n        selection is outside of the current range, an invalid `wx.DateTime`\n        object is returned.\n        \"\"\"\n        return _controls_.DatePickerCtrlBase_GetValue(*args, **kwargs)\n\n    def SetRange(*args, **kwargs):\n        \"\"\"\n        SetRange(self, DateTime dt1, DateTime dt2)\n\n        Sets the valid range for the date selection. If dt1 is valid, it\n        becomes the earliest date (inclusive) accepted by the control. If dt2\n        is valid, it becomes the latest possible date.\n\n        If the current value of the control is outside of the newly set range\n        bounds, the behaviour is undefined.\n        \"\"\"\n        return _controls_.DatePickerCtrlBase_SetRange(*args, **kwargs)\n\n    def GetLowerLimit(*args, **kwargs):\n        \"\"\"\n        GetLowerLimit(self) -> DateTime\n\n        Get the lower limit of the valid range for the date selection, if any.\n        If there is no range or there is no lower limit, then the\n        `wx.DateTime` value returned will be invalid.\n        \"\"\"\n        return _controls_.DatePickerCtrlBase_GetLowerLimit(*args, **kwargs)\n\n    def GetUpperLimit(*args, **kwargs):\n        \"\"\"\n        GetUpperLimit(self) -> DateTime\n\n        Get the upper limit of the valid range for the date selection, if any.\n        If there is no range or there is no upper limit, then the\n        `wx.DateTime` value returned will be invalid.\n        \"\"\"\n        return _controls_.DatePickerCtrlBase_GetUpperLimit(*args, **kwargs)\n\n    LowerLimit = property(GetLowerLimit,doc=\"See `GetLowerLimit`\") \n    UpperLimit = property(GetUpperLimit,doc=\"See `GetUpperLimit`\") \n    Value = property(GetValue,SetValue,doc=\"See `GetValue` and `SetValue`\") \n_controls_.DatePickerCtrlBase_swigregister(DatePickerCtrlBase)\nDatePickerCtrlNameStr = cvar.DatePickerCtrlNameStr\n\nclass DatePickerCtrl(DatePickerCtrlBase):\n    \"\"\"\n    This control allows the user to select a date. Unlike\n    `wx.calendar.CalendarCtrl`, which is a relatively big control,\n    `wx.DatePickerCtrl` is implemented as a small window showing the\n    currently selected date. The control can be edited using the keyboard,\n    and can also display a popup window for more user-friendly date\n    selection, depending on the styles used and the platform.\n    \"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, DateTime dt=wxDefaultDateTime, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=wxDP_DEFAULT|wxDP_SHOWCENTURY, \n            Validator validator=DefaultValidator, \n            String name=DatePickerCtrlNameStr) -> DatePickerCtrl\n\n        Create a new DatePickerCtrl.\n        \"\"\"\n        _controls_.DatePickerCtrl_swiginit(self,_controls_.new_DatePickerCtrl(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, DateTime dt=wxDefaultDateTime, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=wxDP_DEFAULT|wxDP_SHOWCENTURY, \n            Validator validator=DefaultValidator, \n            String name=DatePickerCtrlNameStr) -> bool\n\n        Create the GUI parts of the DatePickerCtrl, for use in 2-phase\n        creation.\n        \"\"\"\n        return _controls_.DatePickerCtrl_Create(*args, **kwargs)\n\n_controls_.DatePickerCtrl_swigregister(DatePickerCtrl)\n\ndef PreDatePickerCtrl(*args, **kwargs):\n    \"\"\"\n    PreDatePickerCtrl() -> DatePickerCtrl\n\n    Precreate a DatePickerCtrl for use in 2-phase creation.\n    \"\"\"\n    val = _controls_.new_PreDatePickerCtrl(*args, **kwargs)\n    return val\n\nclass GenericDatePickerCtrl(DatePickerCtrlBase):\n    \"\"\"Proxy of C++ GenericDatePickerCtrl class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, DateTime dt=wxDefaultDateTime, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=wxDP_DEFAULT|wxDP_SHOWCENTURY, \n            Validator validator=DefaultValidator, \n            String name=DatePickerCtrlNameStr) -> GenericDatePickerCtrl\n\n        Create a new GenericDatePickerCtrl.\n        \"\"\"\n        _controls_.GenericDatePickerCtrl_swiginit(self,_controls_.new_GenericDatePickerCtrl(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, DateTime dt=wxDefaultDateTime, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=wxDP_DEFAULT|wxDP_SHOWCENTURY, \n            Validator validator=DefaultValidator, \n            String name=DatePickerCtrlNameStr) -> bool\n\n        Create the GUI parts of the GenericDatePickerCtrl, for use in 2-phase\n        creation.\n        \"\"\"\n        return _controls_.GenericDatePickerCtrl_Create(*args, **kwargs)\n\n_controls_.GenericDatePickerCtrl_swigregister(GenericDatePickerCtrl)\n\ndef PreGenericDatePickerCtrl(*args, **kwargs):\n    \"\"\"\n    PreGenericDatePickerCtrl() -> GenericDatePickerCtrl\n\n    Precreate a GenericDatePickerCtrl for use in 2-phase creation.\n    \"\"\"\n    val = _controls_.new_PreGenericDatePickerCtrl(*args, **kwargs)\n    return val\n\nHL_CONTEXTMENU = _controls_.HL_CONTEXTMENU\nHL_ALIGN_LEFT = _controls_.HL_ALIGN_LEFT\nHL_ALIGN_RIGHT = _controls_.HL_ALIGN_RIGHT\nHL_ALIGN_CENTRE = _controls_.HL_ALIGN_CENTRE\nHL_DEFAULT_STYLE = _controls_.HL_DEFAULT_STYLE\n#---------------------------------------------------------------------------\n\nclass HyperlinkCtrl(_core.Control):\n    \"\"\"\n    A static text control that emulates a hyperlink. The link is displayed\n    in an appropriate text style, derived from the control's normal font.\n    When the mouse rolls over the link, the cursor changes to a hand and\n    the link's color changes to the active color.\n\n    Clicking on the link does not launch a web browser; instead, a\n    wx.HyperlinkEvent is fired. Use the wx.EVT_HYPERLINK to catch link\n    events.\n\n    \"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, String label=wxEmptyString, \n            String url=wxEmptyString, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=HL_DEFAULT_STYLE, \n            String name=HyperlinkCtrlNameStr) -> HyperlinkCtrl\n\n        A static text control that emulates a hyperlink. The link is displayed\n        in an appropriate text style, derived from the control's normal font.\n        When the mouse rolls over the link, the cursor changes to a hand and\n        the link's color changes to the active color.\n\n        Clicking on the link does not launch a web browser; instead, a\n        wx.HyperlinkEvent is fired. Use the wx.EVT_HYPERLINK to catch link\n        events.\n\n        \"\"\"\n        _controls_.HyperlinkCtrl_swiginit(self,_controls_.new_HyperlinkCtrl(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, String label=wxEmptyString, \n            String url=wxEmptyString, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=HL_DEFAULT_STYLE, \n            String name=HyperlinkCtrlNameStr) -> bool\n        \"\"\"\n        return _controls_.HyperlinkCtrl_Create(*args, **kwargs)\n\n    def GetHoverColour(*args, **kwargs):\n        \"\"\"GetHoverColour(self) -> Colour\"\"\"\n        return _controls_.HyperlinkCtrl_GetHoverColour(*args, **kwargs)\n\n    def SetHoverColour(*args, **kwargs):\n        \"\"\"SetHoverColour(self, Colour colour)\"\"\"\n        return _controls_.HyperlinkCtrl_SetHoverColour(*args, **kwargs)\n\n    def GetNormalColour(*args, **kwargs):\n        \"\"\"GetNormalColour(self) -> Colour\"\"\"\n        return _controls_.HyperlinkCtrl_GetNormalColour(*args, **kwargs)\n\n    def SetNormalColour(*args, **kwargs):\n        \"\"\"SetNormalColour(self, Colour colour)\"\"\"\n        return _controls_.HyperlinkCtrl_SetNormalColour(*args, **kwargs)\n\n    def GetVisitedColour(*args, **kwargs):\n        \"\"\"GetVisitedColour(self) -> Colour\"\"\"\n        return _controls_.HyperlinkCtrl_GetVisitedColour(*args, **kwargs)\n\n    def SetVisitedColour(*args, **kwargs):\n        \"\"\"SetVisitedColour(self, Colour colour)\"\"\"\n        return _controls_.HyperlinkCtrl_SetVisitedColour(*args, **kwargs)\n\n    def GetURL(*args, **kwargs):\n        \"\"\"GetURL(self) -> String\"\"\"\n        return _controls_.HyperlinkCtrl_GetURL(*args, **kwargs)\n\n    def SetURL(*args, **kwargs):\n        \"\"\"SetURL(self, String url)\"\"\"\n        return _controls_.HyperlinkCtrl_SetURL(*args, **kwargs)\n\n    def SetVisited(*args, **kwargs):\n        \"\"\"SetVisited(self, bool visited=True)\"\"\"\n        return _controls_.HyperlinkCtrl_SetVisited(*args, **kwargs)\n\n    def GetVisited(*args, **kwargs):\n        \"\"\"GetVisited(self) -> bool\"\"\"\n        return _controls_.HyperlinkCtrl_GetVisited(*args, **kwargs)\n\n    HoverColour = property(GetHoverColour,SetHoverColour,doc=\"See `GetHoverColour` and `SetHoverColour`\") \n    NormalColour = property(GetNormalColour,SetNormalColour,doc=\"See `GetNormalColour` and `SetNormalColour`\") \n    URL = property(GetURL,SetURL,doc=\"See `GetURL` and `SetURL`\") \n    Visited = property(GetVisited,SetVisited,doc=\"See `GetVisited` and `SetVisited`\") \n    VisitedColour = property(GetVisitedColour,SetVisitedColour,doc=\"See `GetVisitedColour` and `SetVisitedColour`\") \n_controls_.HyperlinkCtrl_swigregister(HyperlinkCtrl)\nHyperlinkCtrlNameStr = cvar.HyperlinkCtrlNameStr\n\ndef PreHyperlinkCtrl(*args, **kwargs):\n    \"\"\"\n    PreHyperlinkCtrl() -> HyperlinkCtrl\n\n    A static text control that emulates a hyperlink. The link is displayed\n    in an appropriate text style, derived from the control's normal font.\n    When the mouse rolls over the link, the cursor changes to a hand and\n    the link's color changes to the active color.\n\n    Clicking on the link does not launch a web browser; instead, a\n    wx.HyperlinkEvent is fired. Use the wx.EVT_HYPERLINK to catch link\n    events.\n\n    \"\"\"\n    val = _controls_.new_PreHyperlinkCtrl(*args, **kwargs)\n    return val\n\nwxEVT_COMMAND_HYPERLINK = _controls_.wxEVT_COMMAND_HYPERLINK\nclass HyperlinkEvent(_core.CommandEvent):\n    \"\"\"Proxy of C++ HyperlinkEvent class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"__init__(self, Object generator, int id, String url) -> HyperlinkEvent\"\"\"\n        _controls_.HyperlinkEvent_swiginit(self,_controls_.new_HyperlinkEvent(*args, **kwargs))\n    def GetURL(*args, **kwargs):\n        \"\"\"GetURL(self) -> String\"\"\"\n        return _controls_.HyperlinkEvent_GetURL(*args, **kwargs)\n\n    def SetURL(*args, **kwargs):\n        \"\"\"SetURL(self, String url)\"\"\"\n        return _controls_.HyperlinkEvent_SetURL(*args, **kwargs)\n\n    URL = property(GetURL,SetURL,doc=\"See `GetURL` and `SetURL`\") \n_controls_.HyperlinkEvent_swigregister(HyperlinkEvent)\n\nEVT_HYPERLINK = wx.PyEventBinder( wxEVT_COMMAND_HYPERLINK, 1 )\n\n#---------------------------------------------------------------------------\n\nPB_USE_TEXTCTRL = _controls_.PB_USE_TEXTCTRL\nclass PickerBase(_core.Control):\n    \"\"\"\n    Base abstract class for all pickers which support an auxiliary text\n    control. This class handles all positioning and sizing of the text\n    control like a horizontal `wx.BoxSizer` would do, with the text\n    control on the left of the picker button and the proportion of the\n    picker fixed to value 1.\n    \"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    def __init__(self): raise AttributeError, \"No constructor defined\"\n    __repr__ = _swig_repr\n    def CreateBase(*args, **kwargs):\n        \"\"\"\n        CreateBase(self, Window parent, int id, String text=wxEmptyString, Point pos=DefaultPosition, \n            Size size=DefaultSize, \n            long style=0, Validator validator=DefaultValidator, \n            String name=wxButtonNameStr) -> bool\n        \"\"\"\n        return _controls_.PickerBase_CreateBase(*args, **kwargs)\n\n    def SetInternalMargin(*args, **kwargs):\n        \"\"\"\n        SetInternalMargin(self, int newmargin)\n\n        Sets the margin (in pixels) between the picker and the text control.\n        \"\"\"\n        return _controls_.PickerBase_SetInternalMargin(*args, **kwargs)\n\n    def GetInternalMargin(*args, **kwargs):\n        \"\"\"\n        GetInternalMargin(self) -> int\n\n        Returns the margin (in pixels) between the picker and the text\n        control.\n        \"\"\"\n        return _controls_.PickerBase_GetInternalMargin(*args, **kwargs)\n\n    def SetTextCtrlProportion(*args, **kwargs):\n        \"\"\"\n        SetTextCtrlProportion(self, int prop)\n\n        Sets the proportion between the text control and the picker button.\n        This is used to set relative sizes of the text contorl and the picker.\n        The value passed to this function must be >= 1.\n        \"\"\"\n        return _controls_.PickerBase_SetTextCtrlProportion(*args, **kwargs)\n\n    def GetTextCtrlProportion(*args, **kwargs):\n        \"\"\"\n        GetTextCtrlProportion(self) -> int\n\n        Returns the proportion between the text control and the picker.\n        \"\"\"\n        return _controls_.PickerBase_GetTextCtrlProportion(*args, **kwargs)\n\n    def SetPickerCtrlProportion(*args, **kwargs):\n        \"\"\"\n        SetPickerCtrlProportion(self, int prop)\n\n        Sets the proportion value of the picker.\n        \"\"\"\n        return _controls_.PickerBase_SetPickerCtrlProportion(*args, **kwargs)\n\n    def GetPickerCtrlProportion(*args, **kwargs):\n        \"\"\"\n        GetPickerCtrlProportion(self) -> int\n\n        Gets the proportion value of the picker.\n        \"\"\"\n        return _controls_.PickerBase_GetPickerCtrlProportion(*args, **kwargs)\n\n    def IsTextCtrlGrowable(*args, **kwargs):\n        \"\"\"IsTextCtrlGrowable(self) -> bool\"\"\"\n        return _controls_.PickerBase_IsTextCtrlGrowable(*args, **kwargs)\n\n    def SetTextCtrlGrowable(*args, **kwargs):\n        \"\"\"SetTextCtrlGrowable(self, bool grow=True)\"\"\"\n        return _controls_.PickerBase_SetTextCtrlGrowable(*args, **kwargs)\n\n    def IsPickerCtrlGrowable(*args, **kwargs):\n        \"\"\"IsPickerCtrlGrowable(self) -> bool\"\"\"\n        return _controls_.PickerBase_IsPickerCtrlGrowable(*args, **kwargs)\n\n    def SetPickerCtrlGrowable(*args, **kwargs):\n        \"\"\"SetPickerCtrlGrowable(self, bool grow=True)\"\"\"\n        return _controls_.PickerBase_SetPickerCtrlGrowable(*args, **kwargs)\n\n    def HasTextCtrl(*args, **kwargs):\n        \"\"\"\n        HasTextCtrl(self) -> bool\n\n        Returns true if this class has a valid text control (i.e. if the\n        wx.PB_USE_TEXTCTRL style was given when creating this control).\n        \"\"\"\n        return _controls_.PickerBase_HasTextCtrl(*args, **kwargs)\n\n    def GetTextCtrl(*args, **kwargs):\n        \"\"\"\n        GetTextCtrl(self) -> TextCtrl\n\n        Returns a pointer to the text control handled by this class or None if\n        the wx.PB_USE_TEXTCTRL style was not specified when this control was\n        created.\n\n        Very important: the contents of the text control could be containing\n        an invalid representation of the entity which can be chosen through\n        the picker (e.g. the user entered an invalid colour syntax because of\n        a typo). Thus you should never parse the content of the textctrl to\n        get the user's input; rather use the derived-class getter\n        (e.g. `wx.ColourPickerCtrl.GetColour`, `wx.FilePickerCtrl.GetPath`,\n        etc).\n        \"\"\"\n        return _controls_.PickerBase_GetTextCtrl(*args, **kwargs)\n\n    def GetPickerCtrl(*args, **kwargs):\n        \"\"\"GetPickerCtrl(self) -> Control\"\"\"\n        return _controls_.PickerBase_GetPickerCtrl(*args, **kwargs)\n\n    InternalMargin = property(GetInternalMargin,SetInternalMargin,doc=\"See `GetInternalMargin` and `SetInternalMargin`\") \n    PickerCtrl = property(GetPickerCtrl,doc=\"See `GetPickerCtrl`\") \n    PickerCtrlProportion = property(GetPickerCtrlProportion,SetPickerCtrlProportion,doc=\"See `GetPickerCtrlProportion` and `SetPickerCtrlProportion`\") \n    TextCtrl = property(GetTextCtrl,doc=\"See `GetTextCtrl`\") \n    TextCtrlProportion = property(GetTextCtrlProportion,SetTextCtrlProportion,doc=\"See `GetTextCtrlProportion` and `SetTextCtrlProportion`\") \n    TextCtrlGrowable = property(IsTextCtrlGrowable,SetTextCtrlGrowable,doc=\"See `IsTextCtrlGrowable` and `SetTextCtrlGrowable`\") \n    PickerCtrlGrowable = property(IsPickerCtrlGrowable,SetPickerCtrlGrowable,doc=\"See `IsPickerCtrlGrowable` and `SetPickerCtrlGrowable`\") \n_controls_.PickerBase_swigregister(PickerBase)\n\nclass PyPickerBase(PickerBase):\n    \"\"\"Proxy of C++ PyPickerBase class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, String text=wxEmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, Validator validator=DefaultValidator, \n            String name=wxButtonNameStr) -> PyPickerBase\n        \"\"\"\n        _controls_.PyPickerBase_swiginit(self,_controls_.new_PyPickerBase(*args, **kwargs))\n        self._setOORInfo(self);PyPickerBase._setCallbackInfo(self, self, PyPickerBase)\n\n    def _setCallbackInfo(*args, **kwargs):\n        \"\"\"_setCallbackInfo(self, PyObject self, PyObject _class)\"\"\"\n        return _controls_.PyPickerBase__setCallbackInfo(*args, **kwargs)\n\n    def UpdatePickerFromTextCtrl(*args, **kwargs):\n        \"\"\"UpdatePickerFromTextCtrl(self)\"\"\"\n        return _controls_.PyPickerBase_UpdatePickerFromTextCtrl(*args, **kwargs)\n\n    def UpdateTextCtrlFromPicker(*args, **kwargs):\n        \"\"\"UpdateTextCtrlFromPicker(self)\"\"\"\n        return _controls_.PyPickerBase_UpdateTextCtrlFromPicker(*args, **kwargs)\n\n    def GetTextCtrlStyle(*args, **kwargs):\n        \"\"\"GetTextCtrlStyle(self, long style) -> long\"\"\"\n        return _controls_.PyPickerBase_GetTextCtrlStyle(*args, **kwargs)\n\n    def GetPickerStyle(*args, **kwargs):\n        \"\"\"GetPickerStyle(self, long style) -> long\"\"\"\n        return _controls_.PyPickerBase_GetPickerStyle(*args, **kwargs)\n\n    def SetTextCtrl(*args, **kwargs):\n        \"\"\"SetTextCtrl(self, TextCtrl text)\"\"\"\n        return _controls_.PyPickerBase_SetTextCtrl(*args, **kwargs)\n\n    def SetPickerCtrl(*args, **kwargs):\n        \"\"\"SetPickerCtrl(self, Control picker)\"\"\"\n        return _controls_.PyPickerBase_SetPickerCtrl(*args, **kwargs)\n\n    def PostCreation(*args, **kwargs):\n        \"\"\"PostCreation(self)\"\"\"\n        return _controls_.PyPickerBase_PostCreation(*args, **kwargs)\n\n_controls_.PyPickerBase_swigregister(PyPickerBase)\n\ndef PrePyPickerBase(*args, **kwargs):\n    \"\"\"PrePyPickerBase() -> PyPickerBase\"\"\"\n    val = _controls_.new_PrePyPickerBase(*args, **kwargs)\n    return val\n\n#---------------------------------------------------------------------------\n\nCLRP_SHOW_LABEL = _controls_.CLRP_SHOW_LABEL\nCLRP_USE_TEXTCTRL = _controls_.CLRP_USE_TEXTCTRL\nCLRP_DEFAULT_STYLE = _controls_.CLRP_DEFAULT_STYLE\nclass ColourPickerCtrl(PickerBase):\n    \"\"\"\n    This control allows the user to select a colour. The implementation\n    varies by platform but is usually a button which brings up a\n    `wx.ColourDialog` when clicked.\n    \"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, Colour col=*wxBLACK, Point pos=DefaultPosition, \n            Size size=DefaultSize, \n            long style=CLRP_DEFAULT_STYLE, Validator validator=DefaultValidator, \n            String name=ColourPickerCtrlNameStr) -> ColourPickerCtrl\n\n        This control allows the user to select a colour. The implementation\n        varies by platform but is usually a button which brings up a\n        `wx.ColourDialog` when clicked.\n        \"\"\"\n        _controls_.ColourPickerCtrl_swiginit(self,_controls_.new_ColourPickerCtrl(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id, Colour col=*wxBLACK, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=CLRP_DEFAULT_STYLE, \n            Validator validator=DefaultValidator, \n            String name=ColourPickerCtrlNameStr) -> bool\n        \"\"\"\n        return _controls_.ColourPickerCtrl_Create(*args, **kwargs)\n\n    def GetColour(*args, **kwargs):\n        \"\"\"\n        GetColour(self) -> Colour\n\n        Returns the currently selected colour.\n        \"\"\"\n        return _controls_.ColourPickerCtrl_GetColour(*args, **kwargs)\n\n    def SetColour(*args, **kwargs):\n        \"\"\"\n        SetColour(self, Colour col)\n\n        Set the displayed colour.\n        \"\"\"\n        return _controls_.ColourPickerCtrl_SetColour(*args, **kwargs)\n\n    Colour = property(GetColour,SetColour,doc=\"See `GetColour` and `SetColour`\") \n_controls_.ColourPickerCtrl_swigregister(ColourPickerCtrl)\nColourPickerCtrlNameStr = cvar.ColourPickerCtrlNameStr\n\ndef PreColourPickerCtrl(*args, **kwargs):\n    \"\"\"\n    PreColourPickerCtrl() -> ColourPickerCtrl\n\n    This control allows the user to select a colour. The implementation\n    varies by platform but is usually a button which brings up a\n    `wx.ColourDialog` when clicked.\n    \"\"\"\n    val = _controls_.new_PreColourPickerCtrl(*args, **kwargs)\n    return val\n\nwxEVT_COMMAND_COLOURPICKER_CHANGED = _controls_.wxEVT_COMMAND_COLOURPICKER_CHANGED\nEVT_COLOURPICKER_CHANGED = wx.PyEventBinder( wxEVT_COMMAND_COLOURPICKER_CHANGED, 1 )\n\nclass ColourPickerEvent(_core.CommandEvent):\n    \"\"\"Proxy of C++ ColourPickerEvent class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"__init__(self, Object generator, int id, Colour col) -> ColourPickerEvent\"\"\"\n        _controls_.ColourPickerEvent_swiginit(self,_controls_.new_ColourPickerEvent(*args, **kwargs))\n    def GetColour(*args, **kwargs):\n        \"\"\"GetColour(self) -> Colour\"\"\"\n        return _controls_.ColourPickerEvent_GetColour(*args, **kwargs)\n\n    def SetColour(*args, **kwargs):\n        \"\"\"SetColour(self, Colour c)\"\"\"\n        return _controls_.ColourPickerEvent_SetColour(*args, **kwargs)\n\n    Colour = property(GetColour,SetColour,doc=\"See `GetColour` and `SetColour`\") \n_controls_.ColourPickerEvent_swigregister(ColourPickerEvent)\n\n#---------------------------------------------------------------------------\n\nFLP_OPEN = _controls_.FLP_OPEN\nFLP_SAVE = _controls_.FLP_SAVE\nFLP_OVERWRITE_PROMPT = _controls_.FLP_OVERWRITE_PROMPT\nFLP_FILE_MUST_EXIST = _controls_.FLP_FILE_MUST_EXIST\nFLP_CHANGE_DIR = _controls_.FLP_CHANGE_DIR\nFLP_SMALL = _controls_.FLP_SMALL\nDIRP_DIR_MUST_EXIST = _controls_.DIRP_DIR_MUST_EXIST\nDIRP_CHANGE_DIR = _controls_.DIRP_CHANGE_DIR\nDIRP_SMALL = _controls_.DIRP_SMALL\nFLP_USE_TEXTCTRL = _controls_.FLP_USE_TEXTCTRL\nFLP_DEFAULT_STYLE = _controls_.FLP_DEFAULT_STYLE\nDIRP_USE_TEXTCTRL = _controls_.DIRP_USE_TEXTCTRL\nDIRP_DEFAULT_STYLE = _controls_.DIRP_DEFAULT_STYLE\nclass FilePickerCtrl(PickerBase):\n    \"\"\"Proxy of C++ FilePickerCtrl class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, String path=EmptyString, \n            String message=FileSelectorPromptStr, String wildcard=FileSelectorDefaultWildcardStr, \n            Point pos=DefaultPosition, \n            Size size=DefaultSize, \n            long style=FLP_DEFAULT_STYLE, Validator validator=DefaultValidator, \n            String name=FilePickerCtrlNameStr) -> FilePickerCtrl\n        \"\"\"\n        _controls_.FilePickerCtrl_swiginit(self,_controls_.new_FilePickerCtrl(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, String path=EmptyString, \n            String message=FileSelectorPromptStr, String wildcard=FileSelectorDefaultWildcardStr, \n            Point pos=DefaultPosition, \n            Size size=DefaultSize, \n            long style=FLP_DEFAULT_STYLE, Validator validator=DefaultValidator, \n            String name=FilePickerCtrlNameStr) -> bool\n        \"\"\"\n        return _controls_.FilePickerCtrl_Create(*args, **kwargs)\n\n    def GetPath(*args, **kwargs):\n        \"\"\"GetPath(self) -> String\"\"\"\n        return _controls_.FilePickerCtrl_GetPath(*args, **kwargs)\n\n    def SetPath(*args, **kwargs):\n        \"\"\"SetPath(self, String str)\"\"\"\n        return _controls_.FilePickerCtrl_SetPath(*args, **kwargs)\n\n    def GetTextCtrlValue(*args, **kwargs):\n        \"\"\"GetTextCtrlValue(self) -> String\"\"\"\n        return _controls_.FilePickerCtrl_GetTextCtrlValue(*args, **kwargs)\n\n    def SetInitialDirectory(*args, **kwargs):\n        \"\"\"SetInitialDirectory(self, String dir)\"\"\"\n        return _controls_.FilePickerCtrl_SetInitialDirectory(*args, **kwargs)\n\n    Path = property(GetPath,SetPath,doc=\"See `GetPath` and `SetPath`\") \n    TextCtrlValue = property(GetTextCtrlValue,doc=\"See `GetTextCtrlValue`\") \n_controls_.FilePickerCtrl_swigregister(FilePickerCtrl)\nFilePickerCtrlNameStr = cvar.FilePickerCtrlNameStr\nFileSelectorPromptStr = cvar.FileSelectorPromptStr\nDirPickerCtrlNameStr = cvar.DirPickerCtrlNameStr\nDirSelectorPromptStr = cvar.DirSelectorPromptStr\nFileSelectorDefaultWildcardStr = cvar.FileSelectorDefaultWildcardStr\n\ndef PreFilePickerCtrl(*args, **kwargs):\n    \"\"\"PreFilePickerCtrl() -> FilePickerCtrl\"\"\"\n    val = _controls_.new_PreFilePickerCtrl(*args, **kwargs)\n    return val\n\nclass DirPickerCtrl(PickerBase):\n    \"\"\"Proxy of C++ DirPickerCtrl class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, String path=EmptyString, \n            String message=DirSelectorPromptStr, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=DIRP_DEFAULT_STYLE, \n            Validator validator=DefaultValidator, \n            String name=DirPickerCtrlNameStr) -> DirPickerCtrl\n        \"\"\"\n        _controls_.DirPickerCtrl_swiginit(self,_controls_.new_DirPickerCtrl(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, String path=EmptyString, \n            String message=DirSelectorPromptStr, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=DIRP_DEFAULT_STYLE, \n            Validator validator=DefaultValidator, \n            String name=DirPickerCtrlNameStr) -> bool\n        \"\"\"\n        return _controls_.DirPickerCtrl_Create(*args, **kwargs)\n\n    def GetPath(*args, **kwargs):\n        \"\"\"GetPath(self) -> String\"\"\"\n        return _controls_.DirPickerCtrl_GetPath(*args, **kwargs)\n\n    def SetPath(*args, **kwargs):\n        \"\"\"SetPath(self, String str)\"\"\"\n        return _controls_.DirPickerCtrl_SetPath(*args, **kwargs)\n\n    def GetTextCtrlValue(*args, **kwargs):\n        \"\"\"GetTextCtrlValue(self) -> String\"\"\"\n        return _controls_.DirPickerCtrl_GetTextCtrlValue(*args, **kwargs)\n\n    Path = property(GetPath,SetPath,doc=\"See `GetPath` and `SetPath`\") \n    TextCtrlValue = property(GetTextCtrlValue,doc=\"See `GetTextCtrlValue`\") \n_controls_.DirPickerCtrl_swigregister(DirPickerCtrl)\n\ndef PreDirPickerCtrl(*args, **kwargs):\n    \"\"\"PreDirPickerCtrl() -> DirPickerCtrl\"\"\"\n    val = _controls_.new_PreDirPickerCtrl(*args, **kwargs)\n    return val\n\nwxEVT_COMMAND_FILEPICKER_CHANGED = _controls_.wxEVT_COMMAND_FILEPICKER_CHANGED\nwxEVT_COMMAND_DIRPICKER_CHANGED = _controls_.wxEVT_COMMAND_DIRPICKER_CHANGED\nEVT_FILEPICKER_CHANGED = wx.PyEventBinder( wxEVT_COMMAND_FILEPICKER_CHANGED, 1 )\nEVT_DIRPICKER_CHANGED  = wx.PyEventBinder( wxEVT_COMMAND_DIRPICKER_CHANGED,  1 )\n\nclass FileDirPickerEvent(_core.CommandEvent):\n    \"\"\"Proxy of C++ FileDirPickerEvent class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"__init__(self, EventType type, Object generator, int id, String path) -> FileDirPickerEvent\"\"\"\n        _controls_.FileDirPickerEvent_swiginit(self,_controls_.new_FileDirPickerEvent(*args, **kwargs))\n    def GetPath(*args, **kwargs):\n        \"\"\"GetPath(self) -> String\"\"\"\n        return _controls_.FileDirPickerEvent_GetPath(*args, **kwargs)\n\n    def SetPath(*args, **kwargs):\n        \"\"\"SetPath(self, String p)\"\"\"\n        return _controls_.FileDirPickerEvent_SetPath(*args, **kwargs)\n\n    Path = property(GetPath,SetPath,doc=\"See `GetPath` and `SetPath`\") \n_controls_.FileDirPickerEvent_swigregister(FileDirPickerEvent)\n\n#---------------------------------------------------------------------------\n\nFNTP_FONTDESC_AS_LABEL = _controls_.FNTP_FONTDESC_AS_LABEL\nFNTP_USEFONT_FOR_LABEL = _controls_.FNTP_USEFONT_FOR_LABEL\nFNTP_USE_TEXTCTRL = _controls_.FNTP_USE_TEXTCTRL\nFNTP_DEFAULT_STYLE = _controls_.FNTP_DEFAULT_STYLE\nclass FontPickerCtrl(PickerBase):\n    \"\"\"Proxy of C++ FontPickerCtrl class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, Font initial=wxNullFont, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=FNTP_DEFAULT_STYLE, Validator validator=DefaultValidator, \n            String name=FontPickerCtrlNameStr) -> FontPickerCtrl\n        \"\"\"\n        _controls_.FontPickerCtrl_swiginit(self,_controls_.new_FontPickerCtrl(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, Font initial=wxNullFont, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=FNTP_DEFAULT_STYLE, Validator validator=DefaultValidator, \n            String name=FontPickerCtrlNameStr) -> bool\n        \"\"\"\n        return _controls_.FontPickerCtrl_Create(*args, **kwargs)\n\n    def GetSelectedFont(*args, **kwargs):\n        \"\"\"GetSelectedFont(self) -> Font\"\"\"\n        return _controls_.FontPickerCtrl_GetSelectedFont(*args, **kwargs)\n\n    def SetSelectedFont(*args, **kwargs):\n        \"\"\"SetSelectedFont(self, Font f)\"\"\"\n        return _controls_.FontPickerCtrl_SetSelectedFont(*args, **kwargs)\n\n    def SetMaxPointSize(*args, **kwargs):\n        \"\"\"SetMaxPointSize(self, unsigned int max)\"\"\"\n        return _controls_.FontPickerCtrl_SetMaxPointSize(*args, **kwargs)\n\n    def GetMaxPointSize(*args, **kwargs):\n        \"\"\"GetMaxPointSize(self) -> unsigned int\"\"\"\n        return _controls_.FontPickerCtrl_GetMaxPointSize(*args, **kwargs)\n\n    MaxPointSize = property(GetMaxPointSize,SetMaxPointSize,doc=\"See `GetMaxPointSize` and `SetMaxPointSize`\") \n    SelectedFont = property(GetSelectedFont,SetSelectedFont,doc=\"See `GetSelectedFont` and `SetSelectedFont`\") \n_controls_.FontPickerCtrl_swigregister(FontPickerCtrl)\nFontPickerCtrlNameStr = cvar.FontPickerCtrlNameStr\n\ndef PreFontPickerCtrl(*args, **kwargs):\n    \"\"\"PreFontPickerCtrl() -> FontPickerCtrl\"\"\"\n    val = _controls_.new_PreFontPickerCtrl(*args, **kwargs)\n    return val\n\nwxEVT_COMMAND_FONTPICKER_CHANGED = _controls_.wxEVT_COMMAND_FONTPICKER_CHANGED\nEVT_FONTPICKER_CHANGED = wx.PyEventBinder( wxEVT_COMMAND_FONTPICKER_CHANGED, 1 )\n\nclass FontPickerEvent(_core.CommandEvent):\n    \"\"\"Proxy of C++ FontPickerEvent class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"__init__(self, Object generator, int id, Font f) -> FontPickerEvent\"\"\"\n        _controls_.FontPickerEvent_swiginit(self,_controls_.new_FontPickerEvent(*args, **kwargs))\n    def GetFont(*args, **kwargs):\n        \"\"\"GetFont(self) -> Font\"\"\"\n        return _controls_.FontPickerEvent_GetFont(*args, **kwargs)\n\n    def SetFont(*args, **kwargs):\n        \"\"\"SetFont(self, Font c)\"\"\"\n        return _controls_.FontPickerEvent_SetFont(*args, **kwargs)\n\n    Font = property(GetFont,SetFont,doc=\"See `GetFont` and `SetFont`\") \n_controls_.FontPickerEvent_swigregister(FontPickerEvent)\n\n#---------------------------------------------------------------------------\n\nCP_DEFAULT_STYLE = _controls_.CP_DEFAULT_STYLE\nCP_NO_TLW_RESIZE = _controls_.CP_NO_TLW_RESIZE\nclass CollapsiblePane(_core.Control):\n    \"\"\"\n    A collapsable pane is a container with an embedded button-like\n    control which can be used by the user to collapse or expand the pane's\n    contents.\n\n    Once constructed you should use the `GetPane` function to access the\n    pane and add your controls inside it (i.e. use the window returned\n    from `GetPane` as the parent for the controls which must go in the\n    pane, NOT the wx.CollapsiblePane itself!).\n\n    Note that because of its nature of control which can dynamically (and\n    drastically) change its size at run-time under user-input, when\n    putting a wx.CollapsiblePane inside a `wx.Sizer` you should be careful\n    to add it with a proportion value of zero; this is because otherwise\n    all other windows with non-zero proportion values would automatically\n    get resized each time the user expands or collapses the pane window,\n    usually resulting a weird, flickering effect.\n    \"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int winid=-1, String label=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=CP_DEFAULT_STYLE, Validator val=DefaultValidator, \n            String name=CollapsiblePaneNameStr) -> CollapsiblePane\n\n        Create and show a wx.CollapsiblePane\n        \"\"\"\n        _controls_.CollapsiblePane_swiginit(self,_controls_.new_CollapsiblePane(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int winid=-1, String label=EmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=CP_DEFAULT_STYLE, Validator val=DefaultValidator, \n            String name=CollapsiblePaneNameStr) -> bool\n        \"\"\"\n        return _controls_.CollapsiblePane_Create(*args, **kwargs)\n\n    def Collapse(*args, **kwargs):\n        \"\"\"\n        Collapse(self, bool collapse=True)\n\n        Collapses or expands the pane window.\n        \"\"\"\n        return _controls_.CollapsiblePane_Collapse(*args, **kwargs)\n\n    def Expand(*args, **kwargs):\n        \"\"\"\n        Expand(self)\n\n        Same as Collapse(False).\n        \"\"\"\n        return _controls_.CollapsiblePane_Expand(*args, **kwargs)\n\n    def IsCollapsed(*args, **kwargs):\n        \"\"\"\n        IsCollapsed(self) -> bool\n\n        Returns ``True`` if the pane window is currently hidden.\n        \"\"\"\n        return _controls_.CollapsiblePane_IsCollapsed(*args, **kwargs)\n\n    def IsExpanded(*args, **kwargs):\n        \"\"\"\n        IsExpanded(self) -> bool\n\n        Returns ``True`` if the pane window is currently shown.\n        \"\"\"\n        return _controls_.CollapsiblePane_IsExpanded(*args, **kwargs)\n\n    def GetPane(*args, **kwargs):\n        \"\"\"\n        GetPane(self) -> Window\n\n        Returns a reference to the pane window.  Use the returned `wx.Window`\n        as the parent of widgets to make them part of the collapsible area.\n        \"\"\"\n        return _controls_.CollapsiblePane_GetPane(*args, **kwargs)\n\n    Expanded = property(IsExpanded) \n    Collapsed = property(IsCollapsed) \n_controls_.CollapsiblePane_swigregister(CollapsiblePane)\nCollapsiblePaneNameStr = cvar.CollapsiblePaneNameStr\n\ndef PreCollapsiblePane(*args, **kwargs):\n    \"\"\"\n    PreCollapsiblePane() -> CollapsiblePane\n\n    Precreate a wx.CollapsiblePane for 2-phase creation.\n    \"\"\"\n    val = _controls_.new_PreCollapsiblePane(*args, **kwargs)\n    return val\n\nwxEVT_COMMAND_COLLPANE_CHANGED = _controls_.wxEVT_COMMAND_COLLPANE_CHANGED\nEVT_COLLAPSIBLEPANE_CHANGED = wx.PyEventBinder( wxEVT_COMMAND_COLLPANE_CHANGED, 1 )\n\nclass CollapsiblePaneEvent(_core.CommandEvent):\n    \"\"\"Proxy of C++ CollapsiblePaneEvent class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"__init__(self, Object generator, int id, bool collapsed) -> CollapsiblePaneEvent\"\"\"\n        _controls_.CollapsiblePaneEvent_swiginit(self,_controls_.new_CollapsiblePaneEvent(*args, **kwargs))\n    def GetCollapsed(*args, **kwargs):\n        \"\"\"GetCollapsed(self) -> bool\"\"\"\n        return _controls_.CollapsiblePaneEvent_GetCollapsed(*args, **kwargs)\n\n    def SetCollapsed(*args, **kwargs):\n        \"\"\"SetCollapsed(self, bool c)\"\"\"\n        return _controls_.CollapsiblePaneEvent_SetCollapsed(*args, **kwargs)\n\n    Collapsed = property(GetCollapsed,SetCollapsed) \n_controls_.CollapsiblePaneEvent_swigregister(CollapsiblePaneEvent)\n\n#---------------------------------------------------------------------------\n\nclass SearchCtrlBase(_core.Control,_core.TextCtrlIface):\n    \"\"\"Proxy of C++ SearchCtrlBase class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    def __init__(self): raise AttributeError, \"No constructor defined\"\n    __repr__ = _swig_repr\n_controls_.SearchCtrlBase_swigregister(SearchCtrlBase)\nSearchCtrlNameStr = cvar.SearchCtrlNameStr\n\nclass SearchCtrl(SearchCtrlBase):\n    \"\"\"\n    A search control is a composite of a `wx.TextCtrl` with optional\n    bitmap buttons and a drop-down menu.  Controls like this can typically\n    be found on a toolbar of applications that support some form of search\n    functionality.  On the Mac this control is implemented using the\n    native HISearchField control, on the other platforms a generic control\n    is used, although that may change in the future as more platforms\n    introduce native search widgets.\n\n    If you wish to use a drop-down menu with your wx.SearchCtrl then you\n    will need to manage its content and handle the menu events yourself,\n    but this is an easy thing to do.  Simply build the menu, pass it to\n    `SetMenu`, and also bind a handler for a range of EVT_MENU events.\n    This gives you the flexibility to use the drop-down menu however you\n    wish, such as for a history of searches, or as a way to select\n    different kinds of searches.  The ToolBar.py sample in the demo shows\n    one way to do this.\n\n    Since the control derives from `wx.TextCtrl` it is convenient to use\n    the styles and events designed for `wx.TextCtrl`.  For example you can\n    use the ``wx.TE_PROCESS_ENTER`` style and catch the\n    ``wx.EVT_TEXT_ENTER`` event to know when the user has pressed the\n    Enter key in the control and wishes to start a search.\n\n    \"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, String value=wxEmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, Validator validator=DefaultValidator, \n            String name=SearchCtrlNameStr) -> SearchCtrl\n\n        A search control is a composite of a `wx.TextCtrl` with optional\n        bitmap buttons and a drop-down menu.  Controls like this can typically\n        be found on a toolbar of applications that support some form of search\n        functionality.  On the Mac this control is implemented using the\n        native HISearchField control, on the other platforms a generic control\n        is used, although that may change in the future as more platforms\n        introduce native search widgets.\n\n        If you wish to use a drop-down menu with your wx.SearchCtrl then you\n        will need to manage its content and handle the menu events yourself,\n        but this is an easy thing to do.  Simply build the menu, pass it to\n        `SetMenu`, and also bind a handler for a range of EVT_MENU events.\n        This gives you the flexibility to use the drop-down menu however you\n        wish, such as for a history of searches, or as a way to select\n        different kinds of searches.  The ToolBar.py sample in the demo shows\n        one way to do this.\n\n        Since the control derives from `wx.TextCtrl` it is convenient to use\n        the styles and events designed for `wx.TextCtrl`.  For example you can\n        use the ``wx.TE_PROCESS_ENTER`` style and catch the\n        ``wx.EVT_TEXT_ENTER`` event to know when the user has pressed the\n        Enter key in the control and wishes to start a search.\n\n        \"\"\"\n        _controls_.SearchCtrl_swiginit(self,_controls_.new_SearchCtrl(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, String value=wxEmptyString, \n            Point pos=DefaultPosition, Size size=DefaultSize, \n            long style=0, Validator validator=DefaultValidator, \n            String name=SearchCtrlNameStr) -> bool\n        \"\"\"\n        return _controls_.SearchCtrl_Create(*args, **kwargs)\n\n    def SetMenu(*args, **kwargs):\n        \"\"\"\n        SetMenu(self, Menu menu)\n\n        Sets the search control's menu object. If there is already a menu\n        associated with the search control it is deleted.\n        \"\"\"\n        return _controls_.SearchCtrl_SetMenu(*args, **kwargs)\n\n    def GetMenu(*args, **kwargs):\n        \"\"\"\n        GetMenu(self) -> Menu\n\n        Returns a pointer to the search control's menu object or None if there\n        is no menu attached.\n        \"\"\"\n        return _controls_.SearchCtrl_GetMenu(*args, **kwargs)\n\n    def ShowSearchButton(*args, **kwargs):\n        \"\"\"\n        ShowSearchButton(self, bool show)\n\n        Sets the search button visibility value on the search control. If\n        there is a menu attached, the search button will be visible regardless\n        of the search button visibility value.  This has no effect in Mac OS X\n        v10.3\n        \"\"\"\n        return _controls_.SearchCtrl_ShowSearchButton(*args, **kwargs)\n\n    def IsSearchButtonVisible(*args, **kwargs):\n        \"\"\"\n        IsSearchButtonVisible(self) -> bool\n\n        Returns the search button visibility value. If there is a menu\n        attached, the search button will be visible regardless of the search\n        button visibility value.  This always returns false in Mac OS X v10.3\n        \"\"\"\n        return _controls_.SearchCtrl_IsSearchButtonVisible(*args, **kwargs)\n\n    def ShowCancelButton(*args, **kwargs):\n        \"\"\"\n        ShowCancelButton(self, bool show)\n\n        Shows or hides the cancel button.\n        \"\"\"\n        return _controls_.SearchCtrl_ShowCancelButton(*args, **kwargs)\n\n    def IsCancelButtonVisible(*args, **kwargs):\n        \"\"\"\n        IsCancelButtonVisible(self) -> bool\n\n        Indicates whether the cancel button is visible. \n        \"\"\"\n        return _controls_.SearchCtrl_IsCancelButtonVisible(*args, **kwargs)\n\n    def SetDescriptiveText(*args, **kwargs):\n        \"\"\"\n        SetDescriptiveText(self, String text)\n\n        Set the text to be displayed when the user has not yet typed anything\n        in the control.\n        \"\"\"\n        return _controls_.SearchCtrl_SetDescriptiveText(*args, **kwargs)\n\n    def GetDescriptiveText(*args, **kwargs):\n        \"\"\"\n        GetDescriptiveText(self) -> String\n\n        Get the text to be displayed when the user has not yet typed anything\n        in the control.\n        \"\"\"\n        return _controls_.SearchCtrl_GetDescriptiveText(*args, **kwargs)\n\n    def SetSearchBitmap(*args, **kwargs):\n        \"\"\"\n        SetSearchBitmap(self, Bitmap bitmap)\n\n        Sets the bitmap to use for the search button.  This currently does not\n        work on the Mac.\n        \"\"\"\n        return _controls_.SearchCtrl_SetSearchBitmap(*args, **kwargs)\n\n    def SetSearchMenuBitmap(*args, **kwargs):\n        \"\"\"\n        SetSearchMenuBitmap(self, Bitmap bitmap)\n\n        Sets the bitmap to use for the search button when there is a drop-down\n        menu associated with the search control.  This currently does not work\n        on the Mac.\n        \"\"\"\n        return _controls_.SearchCtrl_SetSearchMenuBitmap(*args, **kwargs)\n\n    def SetCancelBitmap(*args, **kwargs):\n        \"\"\"\n        SetCancelBitmap(self, Bitmap bitmap)\n\n        Sets the bitmap to use for the cancel button.  This currently does not\n        work on the Mac.\n        \"\"\"\n        return _controls_.SearchCtrl_SetCancelBitmap(*args, **kwargs)\n\n    Menu = property(GetMenu,SetMenu) \n    SearchButtonVisible = property(IsSearchButtonVisible,ShowSearchButton) \n    CancelButtonVisible = property(IsCancelButtonVisible,ShowCancelButton) \n    DescriptiveText = property(GetDescriptiveText,SetDescriptiveText) \n_controls_.SearchCtrl_swigregister(SearchCtrl)\n\ndef PreSearchCtrl(*args, **kwargs):\n    \"\"\"\n    PreSearchCtrl() -> SearchCtrl\n\n    Precreate a wx.SearchCtrl for 2-phase creation.\n    \"\"\"\n    val = _controls_.new_PreSearchCtrl(*args, **kwargs)\n    return val\n\nwxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN = _controls_.wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN\nwxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN = _controls_.wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN\nEVT_SEARCHCTRL_CANCEL_BTN = wx.PyEventBinder( wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN, 1)\nEVT_SEARCHCTRL_SEARCH_BTN = wx.PyEventBinder( wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN, 1)\n\n#---------------------------------------------------------------------------\n\nFC_OPEN = _controls_.FC_OPEN\nFC_SAVE = _controls_.FC_SAVE\nFC_MULTIPLE = _controls_.FC_MULTIPLE\nFC_NOSHOWHIDDEN = _controls_.FC_NOSHOWHIDDEN\nFC_DEFAULT_STYLE = _controls_.FC_DEFAULT_STYLE\nclass FileCtrl(_core.Window):\n    \"\"\"\n    \"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, String defaultDirectory=wxEmptyString, \n            String defaultFilename=wxEmptyString, \n            String wildCard=wxFileSelectorDefaultWildcardStr, \n            long style=FC_DEFAULT_STYLE, Point pos=DefaultPosition, \n            Size size=DefaultSize, \n            String name=FileCtrlNameStr) -> FileCtrl\n\n        \"\"\"\n        _controls_.FileCtrl_swiginit(self,_controls_.new_FileCtrl(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, String defaultDirectory=wxEmptyString, \n            String defaultFilename=wxEmptyString, \n            String wildCard=wxFileSelectorDefaultWildcardStr, \n            long style=FC_DEFAULT_STYLE, Point pos=DefaultPosition, \n            Size size=DefaultSize, \n            String name=FileCtrlNameStr) -> bool\n        \"\"\"\n        return _controls_.FileCtrl_Create(*args, **kwargs)\n\n    def SetWildcard(*args, **kwargs):\n        \"\"\"SetWildcard(self, String wildCard)\"\"\"\n        return _controls_.FileCtrl_SetWildcard(*args, **kwargs)\n\n    def SetFilterIndex(*args, **kwargs):\n        \"\"\"SetFilterIndex(self, int filterindex)\"\"\"\n        return _controls_.FileCtrl_SetFilterIndex(*args, **kwargs)\n\n    def SetDirectory(*args, **kwargs):\n        \"\"\"SetDirectory(self, String dir) -> bool\"\"\"\n        return _controls_.FileCtrl_SetDirectory(*args, **kwargs)\n\n    def SetFilename(*args, **kwargs):\n        \"\"\"SetFilename(self, String name) -> bool\"\"\"\n        return _controls_.FileCtrl_SetFilename(*args, **kwargs)\n\n    def SetPath(*args, **kwargs):\n        \"\"\"SetPath(self, String path) -> bool\"\"\"\n        return _controls_.FileCtrl_SetPath(*args, **kwargs)\n\n    def GetFilename(*args, **kwargs):\n        \"\"\"GetFilename(self) -> String\"\"\"\n        return _controls_.FileCtrl_GetFilename(*args, **kwargs)\n\n    def GetDirectory(*args, **kwargs):\n        \"\"\"GetDirectory(self) -> String\"\"\"\n        return _controls_.FileCtrl_GetDirectory(*args, **kwargs)\n\n    def GetWildcard(*args, **kwargs):\n        \"\"\"GetWildcard(self) -> String\"\"\"\n        return _controls_.FileCtrl_GetWildcard(*args, **kwargs)\n\n    def GetPath(*args, **kwargs):\n        \"\"\"GetPath(self) -> String\"\"\"\n        return _controls_.FileCtrl_GetPath(*args, **kwargs)\n\n    def GetFilterIndex(*args, **kwargs):\n        \"\"\"GetFilterIndex(self) -> int\"\"\"\n        return _controls_.FileCtrl_GetFilterIndex(*args, **kwargs)\n\n    def GetPaths(*args, **kwargs):\n        \"\"\"GetPaths(self) -> wxArrayString\"\"\"\n        return _controls_.FileCtrl_GetPaths(*args, **kwargs)\n\n    def GetFilenames(*args, **kwargs):\n        \"\"\"GetFilenames(self) -> wxArrayString\"\"\"\n        return _controls_.FileCtrl_GetFilenames(*args, **kwargs)\n\n    def HasMultipleFileSelection(*args, **kwargs):\n        \"\"\"HasMultipleFileSelection(self) -> bool\"\"\"\n        return _controls_.FileCtrl_HasMultipleFileSelection(*args, **kwargs)\n\n    def ShowHidden(*args, **kwargs):\n        \"\"\"ShowHidden(self, bool show)\"\"\"\n        return _controls_.FileCtrl_ShowHidden(*args, **kwargs)\n\n    Filename = property(GetFilename,SetFilename) \n    Directory = property(GetDirectory,SetDirectory) \n    Wildcard = property(GetWildcard,SetWildcard) \n    Path = property(GetPath,SetPath) \n    FilterIndex = property(GetFilterIndex,SetFilterIndex) \n    Paths = property(GetPaths) \n    Filenames = property(GetFilenames) \n_controls_.FileCtrl_swigregister(FileCtrl)\nFileCtrlNameStr = cvar.FileCtrlNameStr\n\ndef PreFileCtrl(*args, **kwargs):\n    \"\"\"\n    PreFileCtrl() -> FileCtrl\n\n    Precreate a wx.FileCtrl for 2-phase creation.\n    \"\"\"\n    val = _controls_.new_PreFileCtrl(*args, **kwargs)\n    return val\n\nclass FileCtrlEvent(_core.CommandEvent):\n    \"\"\"Proxy of C++ FileCtrlEvent class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"__init__(self, EventType type, Object evtObject, int id) -> FileCtrlEvent\"\"\"\n        _controls_.FileCtrlEvent_swiginit(self,_controls_.new_FileCtrlEvent(*args, **kwargs))\n    def SetFiles(*args, **kwargs):\n        \"\"\"SetFiles(self, wxArrayString files)\"\"\"\n        return _controls_.FileCtrlEvent_SetFiles(*args, **kwargs)\n\n    def SetDirectory(*args, **kwargs):\n        \"\"\"SetDirectory(self, String directory)\"\"\"\n        return _controls_.FileCtrlEvent_SetDirectory(*args, **kwargs)\n\n    def SetFilterIndex(*args, **kwargs):\n        \"\"\"SetFilterIndex(self, int filterIndex)\"\"\"\n        return _controls_.FileCtrlEvent_SetFilterIndex(*args, **kwargs)\n\n    def GetFiles(*args, **kwargs):\n        \"\"\"GetFiles(self) -> wxArrayString\"\"\"\n        return _controls_.FileCtrlEvent_GetFiles(*args, **kwargs)\n\n    def GetDirectory(*args, **kwargs):\n        \"\"\"GetDirectory(self) -> String\"\"\"\n        return _controls_.FileCtrlEvent_GetDirectory(*args, **kwargs)\n\n    def GetFilterIndex(*args, **kwargs):\n        \"\"\"GetFilterIndex(self) -> int\"\"\"\n        return _controls_.FileCtrlEvent_GetFilterIndex(*args, **kwargs)\n\n    def GetFile(*args, **kwargs):\n        \"\"\"GetFile(self) -> String\"\"\"\n        return _controls_.FileCtrlEvent_GetFile(*args, **kwargs)\n\n    Files = property(GetFiles,SetFiles) \n    Directory = property(GetDirectory,SetDirectory) \n    FilterIndex = property(GetFilterIndex,SetFilterIndex) \n_controls_.FileCtrlEvent_swigregister(FileCtrlEvent)\n\nwxEVT_FILECTRL_SELECTIONCHANGED = _controls_.wxEVT_FILECTRL_SELECTIONCHANGED\nwxEVT_FILECTRL_FILEACTIVATED = _controls_.wxEVT_FILECTRL_FILEACTIVATED\nwxEVT_FILECTRL_FOLDERCHANGED = _controls_.wxEVT_FILECTRL_FOLDERCHANGED\nwxEVT_FILECTRL_FILTERCHANGED = _controls_.wxEVT_FILECTRL_FILTERCHANGED\nEVT_FILECTRL_SELECTIONCHANGED = wx.PyEventBinder( wxEVT_FILECTRL_SELECTIONCHANGED, 1)\nEVT_FILECTRL_FILEACTIVATED = wx.PyEventBinder( wxEVT_FILECTRL_FILEACTIVATED, 1)\nEVT_FILECTRL_FOLDERCHANGED = wx.PyEventBinder( wxEVT_FILECTRL_FOLDERCHANGED, 1)\nEVT_FILECTRL_FILTERCHANGED = wx.PyEventBinder( wxEVT_FILECTRL_FILTERCHANGED, 1)\n\n#---------------------------------------------------------------------------\n\nclass InfoBar(_core.Control):\n    \"\"\"\n    An info bar is a transient window shown at top or bottom of its parent\n    window to display non-critical information to the user.  It works\n    similarly to message bars in current web browsers.\n    \"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int winid=ID_ANY) -> InfoBar\n\n        An info bar is a transient window shown at top or bottom of its parent\n        window to display non-critical information to the user.  It works\n        similarly to message bars in current web browsers.\n        \"\"\"\n        _controls_.InfoBar_swiginit(self,_controls_.new_InfoBar(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int winid=ID_ANY) -> bool\n\n        Do the 2nd phase and create the GUI control.\n        \"\"\"\n        return _controls_.InfoBar_Create(*args, **kwargs)\n\n    def ShowMessage(*args, **kwargs):\n        \"\"\"ShowMessage(self, String msg, int flags=ICON_INFORMATION)\"\"\"\n        return _controls_.InfoBar_ShowMessage(*args, **kwargs)\n\n    def Dismiss(*args, **kwargs):\n        \"\"\"Dismiss(self)\"\"\"\n        return _controls_.InfoBar_Dismiss(*args, **kwargs)\n\n    def AddButton(*args, **kwargs):\n        \"\"\"AddButton(self, int btnid, String label=wxEmptyString)\"\"\"\n        return _controls_.InfoBar_AddButton(*args, **kwargs)\n\n    def RemoveButton(*args, **kwargs):\n        \"\"\"RemoveButton(self, int btnid)\"\"\"\n        return _controls_.InfoBar_RemoveButton(*args, **kwargs)\n\n    def SetShowHideEffects(*args, **kwargs):\n        \"\"\"SetShowHideEffects(self, int showEffect, int hideEffect)\"\"\"\n        return _controls_.InfoBar_SetShowHideEffects(*args, **kwargs)\n\n    def GetShowEffect(*args, **kwargs):\n        \"\"\"GetShowEffect(self) -> int\"\"\"\n        return _controls_.InfoBar_GetShowEffect(*args, **kwargs)\n\n    def GetHideEffect(*args, **kwargs):\n        \"\"\"GetHideEffect(self) -> int\"\"\"\n        return _controls_.InfoBar_GetHideEffect(*args, **kwargs)\n\n    def SetEffectDuration(*args, **kwargs):\n        \"\"\"SetEffectDuration(self, int duration)\"\"\"\n        return _controls_.InfoBar_SetEffectDuration(*args, **kwargs)\n\n    def GetEffectDuration(*args, **kwargs):\n        \"\"\"GetEffectDuration(self) -> int\"\"\"\n        return _controls_.InfoBar_GetEffectDuration(*args, **kwargs)\n\n_controls_.InfoBar_swigregister(InfoBar)\n\ndef PreInfoBar(*args, **kwargs):\n    \"\"\"\n    PreInfoBar() -> InfoBar\n\n    An info bar is a transient window shown at top or bottom of its parent\n    window to display non-critical information to the user.  It works\n    similarly to message bars in current web browsers.\n    \"\"\"\n    val = _controls_.new_PreInfoBar(*args, **kwargs)\n    return val\n\n#---------------------------------------------------------------------------\n\nclass CommandLinkButton(Button):\n    \"\"\"Proxy of C++ CommandLinkButton class\"\"\"\n    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')\n    __repr__ = _swig_repr\n    def __init__(self, *args, **kwargs): \n        \"\"\"\n        __init__(self, Window parent, int id=-1, String mainLabel=wxEmptyString, \n            String note=wxEmptyString, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=0, \n            Validator validator=DefaultValidator, \n            String name=wxButtonNameStr) -> CommandLinkButton\n        \"\"\"\n        _controls_.CommandLinkButton_swiginit(self,_controls_.new_CommandLinkButton(*args, **kwargs))\n        self._setOORInfo(self)\n\n    def Create(*args, **kwargs):\n        \"\"\"\n        Create(self, Window parent, int id=-1, String mainLabel=wxEmptyString, \n            String note=wxEmptyString, Point pos=DefaultPosition, \n            Size size=DefaultSize, long style=0, \n            Validator validator=DefaultValidator, \n            String name=wxButtonNameStr) -> bool\n        \"\"\"\n        return _controls_.CommandLinkButton_Create(*args, **kwargs)\n\n    def SetMainLabelAndNote(*args, **kwargs):\n        \"\"\"SetMainLabelAndNote(self, String mainLabel, String note)\"\"\"\n        return _controls_.CommandLinkButton_SetMainLabelAndNote(*args, **kwargs)\n\n    def SetMainLabel(*args, **kwargs):\n        \"\"\"SetMainLabel(self, String mainLabel)\"\"\"\n        return _controls_.CommandLinkButton_SetMainLabel(*args, **kwargs)\n\n    def SetNote(*args, **kwargs):\n        \"\"\"SetNote(self, String note)\"\"\"\n        return _controls_.CommandLinkButton_SetNote(*args, **kwargs)\n\n    def GetMainLabel(*args, **kwargs):\n        \"\"\"GetMainLabel(self) -> String\"\"\"\n        return _controls_.CommandLinkButton_GetMainLabel(*args, **kwargs)\n\n    def GetNote(*args, **kwargs):\n        \"\"\"GetNote(self) -> String\"\"\"\n        return _controls_.CommandLinkButton_GetNote(*args, **kwargs)\n\n    MainLabel = property(GetMainLabel,SetMainLabel) \n    Note = property(GetNote,SetNote) \n_controls_.CommandLinkButton_swigregister(CommandLinkButton)\n\ndef PreCommandLinkButton(*args, **kwargs):\n    \"\"\"\n    PreCommandLinkButton() -> CommandLinkButton\n\n    Precreate a Button for 2-phase creation.\n    \"\"\"\n    val = _controls_.new_PreCommandLinkButton(*args, **kwargs)\n    return val\n\n\n\n","license":"gpl-3.0","hash":-3839353247363315950,"line_mean":41.4650568545,"line_max":151,"alpha_frac":0.6550301768,"autogenerated":false}
{"repo_name":"blackbliss\/callme","path":"flask\/lib\/python2.7\/site-packages\/werkzeug\/contrib\/cache.py","copies":"306","size":"23519","content":"# -*- coding: utf-8 -*-\n\"\"\"\n    werkzeug.contrib.cache\n    ~~~~~~~~~~~~~~~~~~~~~~\n\n    The main problem with dynamic Web sites is, well, they're dynamic.  Each\n    time a user requests a page, the webserver executes a lot of code, queries\n    the database, renders templates until the visitor gets the page he sees.\n\n    This is a lot more expensive than just loading a file from the file system\n    and sending it to the visitor.\n\n    For most Web applications, this overhead isn't a big deal but once it\n    becomes, you will be glad to have a cache system in place.\n\n    How Caching Works\n    =================\n\n    Caching is pretty simple.  Basically you have a cache object lurking around\n    somewhere that is connected to a remote cache or the file system or\n    something else.  When the request comes in you check if the current page\n    is already in the cache and if so, you're returning it from the cache.\n    Otherwise you generate the page and put it into the cache. (Or a fragment\n    of the page, you don't have to cache the full thing)\n\n    Here is a simple example of how to cache a sidebar for a template::\n\n        def get_sidebar(user):\n            identifier = 'sidebar_for\/user%d' % user.id\n            value = cache.get(identifier)\n            if value is not None:\n                return value\n            value = generate_sidebar_for(user=user)\n            cache.set(identifier, value, timeout=60 * 5)\n            return value\n\n    Creating a Cache Object\n    =======================\n\n    To create a cache object you just import the cache system of your choice\n    from the cache module and instantiate it.  Then you can start working\n    with that object:\n\n    >>> from werkzeug.contrib.cache import SimpleCache\n    >>> c = SimpleCache()\n    >>> c.set(\"foo\", \"value\")\n    >>> c.get(\"foo\")\n    'value'\n    >>> c.get(\"missing\") is None\n    True\n\n    Please keep in mind that you have to create the cache and put it somewhere\n    you have access to it (either as a module global you can import or you just\n    put it into your WSGI application).\n\n    :copyright: (c) 2013 by the Werkzeug Team, see AUTHORS for more details.\n    :license: BSD, see LICENSE for more details.\n\"\"\"\nimport os\nimport re\nimport tempfile\nfrom hashlib import md5\nfrom time import time\ntry:\n    import cPickle as pickle\nexcept ImportError:\n    import pickle\n\nfrom werkzeug._compat import iteritems, string_types, text_type, \\\n     integer_types, to_bytes\nfrom werkzeug.posixemulation import rename\n\n\ndef _items(mappingorseq):\n    \"\"\"Wrapper for efficient iteration over mappings represented by dicts\n    or sequences::\n\n        >>> for k, v in _items((i, i*i) for i in xrange(5)):\n        ...    assert k*k == v\n\n        >>> for k, v in _items(dict((i, i*i) for i in xrange(5))):\n        ...    assert k*k == v\n\n    \"\"\"\n    if hasattr(mappingorseq, \"iteritems\"):\n        return mappingorseq.iteritems()\n    elif hasattr(mappingorseq, \"items\"):\n        return mappingorseq.items()\n    return mappingorseq\n\n\nclass BaseCache(object):\n    \"\"\"Baseclass for the cache systems.  All the cache systems implement this\n    API or a superset of it.\n\n    :param default_timeout: the default timeout that is used if no timeout is\n                            specified on :meth:`set`.\n    \"\"\"\n\n    def __init__(self, default_timeout=300):\n        self.default_timeout = default_timeout\n\n    def get(self, key):\n        \"\"\"Looks up key in the cache and returns the value for it.\n        If the key does not exist `None` is returned instead.\n\n        :param key: the key to be looked up.\n        \"\"\"\n        return None\n\n    def delete(self, key):\n        \"\"\"Deletes `key` from the cache.  If it does not exist in the cache\n        nothing happens.\n\n        :param key: the key to delete.\n        \"\"\"\n        pass\n\n    def get_many(self, *keys):\n        \"\"\"Returns a list of values for the given keys.\n        For each key a item in the list is created.  Example::\n\n            foo, bar = cache.get_many(\"foo\", \"bar\")\n\n        If a key can't be looked up `None` is returned for that key\n        instead.\n\n        :param keys: The function accepts multiple keys as positional\n                     arguments.\n        \"\"\"\n        return map(self.get, keys)\n\n    def get_dict(self, *keys):\n        \"\"\"Works like :meth:`get_many` but returns a dict::\n\n            d = cache.get_dict(\"foo\", \"bar\")\n            foo = d[\"foo\"]\n            bar = d[\"bar\"]\n\n        :param keys: The function accepts multiple keys as positional\n                     arguments.\n        \"\"\"\n        return dict(zip(keys, self.get_many(*keys)))\n\n    def set(self, key, value, timeout=None):\n        \"\"\"Adds a new key\/value to the cache (overwrites value, if key already\n        exists in the cache).\n\n        :param key: the key to set\n        :param value: the value for the key\n        :param timeout: the cache timeout for the key (if not specified,\n                        it uses the default timeout).\n        \"\"\"\n        pass\n\n    def add(self, key, value, timeout=None):\n        \"\"\"Works like :meth:`set` but does not overwrite the values of already\n        existing keys.\n\n        :param key: the key to set\n        :param value: the value for the key\n        :param timeout: the cache timeout for the key or the default\n                        timeout if not specified.\n        \"\"\"\n        pass\n\n    def set_many(self, mapping, timeout=None):\n        \"\"\"Sets multiple keys and values from a mapping.\n\n        :param mapping: a mapping with the keys\/values to set.\n        :param timeout: the cache timeout for the key (if not specified,\n                        it uses the default timeout).\n        \"\"\"\n        for key, value in _items(mapping):\n            self.set(key, value, timeout)\n\n    def delete_many(self, *keys):\n        \"\"\"Deletes multiple keys at once.\n\n        :param keys: The function accepts multiple keys as positional\n                     arguments.\n        \"\"\"\n        for key in keys:\n            self.delete(key)\n\n    def clear(self):\n        \"\"\"Clears the cache.  Keep in mind that not all caches support\n        completely clearing the cache.\n        \"\"\"\n        pass\n\n    def inc(self, key, delta=1):\n        \"\"\"Increments the value of a key by `delta`.  If the key does\n        not yet exist it is initialized with `delta`.\n\n        For supporting caches this is an atomic operation.\n\n        :param key: the key to increment.\n        :param delta: the delta to add.\n        \"\"\"\n        self.set(key, (self.get(key) or 0) + delta)\n\n    def dec(self, key, delta=1):\n        \"\"\"Decrements the value of a key by `delta`.  If the key does\n        not yet exist it is initialized with `-delta`.\n\n        For supporting caches this is an atomic operation.\n\n        :param key: the key to increment.\n        :param delta: the delta to subtract.\n        \"\"\"\n        self.set(key, (self.get(key) or 0) - delta)\n\n\nclass NullCache(BaseCache):\n    \"\"\"A cache that doesn't cache.  This can be useful for unit testing.\n\n    :param default_timeout: a dummy parameter that is ignored but exists\n                            for API compatibility with other caches.\n    \"\"\"\n\n\nclass SimpleCache(BaseCache):\n    \"\"\"Simple memory cache for single process environments.  This class exists\n    mainly for the development server and is not 100% thread safe.  It tries\n    to use as many atomic operations as possible and no locks for simplicity\n    but it could happen under heavy load that keys are added multiple times.\n\n    :param threshold: the maximum number of items the cache stores before\n                      it starts deleting some.\n    :param default_timeout: the default timeout that is used if no timeout is\n                            specified on :meth:`~BaseCache.set`.\n    \"\"\"\n\n    def __init__(self, threshold=500, default_timeout=300):\n        BaseCache.__init__(self, default_timeout)\n        self._cache = {}\n        self.clear = self._cache.clear\n        self._threshold = threshold\n\n    def _prune(self):\n        if len(self._cache) > self._threshold:\n            now = time()\n            for idx, (key, (expires, _)) in enumerate(self._cache.items()):\n                if expires <= now or idx % 3 == 0:\n                    self._cache.pop(key, None)\n\n    def get(self, key):\n        expires, value = self._cache.get(key, (0, None))\n        if expires > time():\n            return pickle.loads(value)\n\n    def set(self, key, value, timeout=None):\n        if timeout is None:\n            timeout = self.default_timeout\n        self._prune()\n        self._cache[key] = (time() + timeout, pickle.dumps(value,\n            pickle.HIGHEST_PROTOCOL))\n\n    def add(self, key, value, timeout=None):\n        if timeout is None:\n            timeout = self.default_timeout\n        if len(self._cache) > self._threshold:\n            self._prune()\n        item = (time() + timeout, pickle.dumps(value,\n            pickle.HIGHEST_PROTOCOL))\n        self._cache.setdefault(key, item)\n\n    def delete(self, key):\n        self._cache.pop(key, None)\n\n\n_test_memcached_key = re.compile(br'[^\\x00-\\x21\\xff]{1,250}$').match\n\nclass MemcachedCache(BaseCache):\n    \"\"\"A cache that uses memcached as backend.\n\n    The first argument can either be an object that resembles the API of a\n    :class:`memcache.Client` or a tuple\/list of server addresses. In the\n    event that a tuple\/list is passed, Werkzeug tries to import the best\n    available memcache library.\n\n    Implementation notes:  This cache backend works around some limitations in\n    memcached to simplify the interface.  For example unicode keys are encoded\n    to utf-8 on the fly.  Methods such as :meth:`~BaseCache.get_dict` return\n    the keys in the same format as passed.  Furthermore all get methods\n    silently ignore key errors to not cause problems when untrusted user data\n    is passed to the get methods which is often the case in web applications.\n\n    :param servers: a list or tuple of server addresses or alternatively\n                    a :class:`memcache.Client` or a compatible client.\n    :param default_timeout: the default timeout that is used if no timeout is\n                            specified on :meth:`~BaseCache.set`.\n    :param key_prefix: a prefix that is added before all keys.  This makes it\n                       possible to use the same memcached server for different\n                       applications.  Keep in mind that\n                       :meth:`~BaseCache.clear` will also clear keys with a\n                       different prefix.\n    \"\"\"\n\n    def __init__(self, servers=None, default_timeout=300, key_prefix=None):\n        BaseCache.__init__(self, default_timeout)\n        if servers is None or isinstance(servers, (list, tuple)):\n            if servers is None:\n                servers = ['127.0.0.1:11211']\n            self._client = self.import_preferred_memcache_lib(servers)\n            if self._client is None:\n                raise RuntimeError('no memcache module found')\n        else:\n            # NOTE: servers is actually an already initialized memcache\n            # client.\n            self._client = servers\n\n        self.key_prefix = to_bytes(key_prefix)\n\n    def get(self, key):\n        if isinstance(key, text_type):\n            key = key.encode('utf-8')\n        if self.key_prefix:\n            key = self.key_prefix + key\n        # memcached doesn't support keys longer than that.  Because often\n        # checks for so long keys can occour because it's tested from user\n        # submitted data etc we fail silently for getting.\n        if _test_memcached_key(key):\n            return self._client.get(key)\n\n    def get_dict(self, *keys):\n        key_mapping = {}\n        have_encoded_keys = False\n        for key in keys:\n            if isinstance(key, unicode):\n                encoded_key = key.encode('utf-8')\n                have_encoded_keys = True\n            else:\n                encoded_key = key\n            if self.key_prefix:\n                encoded_key = self.key_prefix + encoded_key\n            if _test_memcached_key(key):\n                key_mapping[encoded_key] = key\n        d = rv = self._client.get_multi(key_mapping.keys())\n        if have_encoded_keys or self.key_prefix:\n            rv = {}\n            for key, value in iteritems(d):\n                rv[key_mapping[key]] = value\n        if len(rv) < len(keys):\n            for key in keys:\n                if key not in rv:\n                    rv[key] = None\n        return rv\n\n    def add(self, key, value, timeout=None):\n        if timeout is None:\n            timeout = self.default_timeout\n        if isinstance(key, text_type):\n            key = key.encode('utf-8')\n        if self.key_prefix:\n            key = self.key_prefix + key\n        self._client.add(key, value, timeout)\n\n    def set(self, key, value, timeout=None):\n        if timeout is None:\n            timeout = self.default_timeout\n        if isinstance(key, text_type):\n            key = key.encode('utf-8')\n        if self.key_prefix:\n            key = self.key_prefix + key\n        self._client.set(key, value, timeout)\n\n    def get_many(self, *keys):\n        d = self.get_dict(*keys)\n        return [d[key] for key in keys]\n\n    def set_many(self, mapping, timeout=None):\n        if timeout is None:\n            timeout = self.default_timeout\n        new_mapping = {}\n        for key, value in _items(mapping):\n            if isinstance(key, text_type):\n                key = key.encode('utf-8')\n            if self.key_prefix:\n                key = self.key_prefix + key\n            new_mapping[key] = value\n        self._client.set_multi(new_mapping, timeout)\n\n    def delete(self, key):\n        if isinstance(key, unicode):\n            key = key.encode('utf-8')\n        if self.key_prefix:\n            key = self.key_prefix + key\n        if _test_memcached_key(key):\n            self._client.delete(key)\n\n    def delete_many(self, *keys):\n        new_keys = []\n        for key in keys:\n            if isinstance(key, unicode):\n                key = key.encode('utf-8')\n            if self.key_prefix:\n                key = self.key_prefix + key\n            if _test_memcached_key(key):\n                new_keys.append(key)\n        self._client.delete_multi(new_keys)\n\n    def clear(self):\n        self._client.flush_all()\n\n    def inc(self, key, delta=1):\n        if isinstance(key, unicode):\n            key = key.encode('utf-8')\n        if self.key_prefix:\n            key = self.key_prefix + key\n        self._client.incr(key, delta)\n\n    def dec(self, key, delta=1):\n        if isinstance(key, unicode):\n            key = key.encode('utf-8')\n        if self.key_prefix:\n            key = self.key_prefix + key\n        self._client.decr(key, delta)\n\n    def import_preferred_memcache_lib(self, servers):\n        \"\"\"Returns an initialized memcache client.  Used by the constructor.\"\"\"\n        try:\n            import pylibmc\n        except ImportError:\n            pass\n        else:\n            return pylibmc.Client(servers)\n\n        try:\n            from google.appengine.api import memcache\n        except ImportError:\n            pass\n        else:\n            return memcache.Client()\n\n        try:\n            import memcache\n        except ImportError:\n            pass\n        else:\n            return memcache.Client(servers)\n\n\n# backwards compatibility\nGAEMemcachedCache = MemcachedCache\n\n\nclass RedisCache(BaseCache):\n    \"\"\"Uses the Redis key-value store as a cache backend.\n\n    The first argument can be either a string denoting address of the Redis\n    server or an object resembling an instance of a redis.Redis class.\n\n    Note: Python Redis API already takes care of encoding unicode strings on\n    the fly.\n\n    .. versionadded:: 0.7\n\n    .. versionadded:: 0.8\n       `key_prefix` was added.\n\n    .. versionchanged:: 0.8\n       This cache backend now properly serializes objects.\n\n    .. versionchanged:: 0.8.3\n       This cache backend now supports password authentication.\n\n    :param host: address of the Redis server or an object which API is\n                 compatible with the official Python Redis client (redis-py).\n    :param port: port number on which Redis server listens for connections.\n    :param password: password authentication for the Redis server.\n    :param db: db (zero-based numeric index) on Redis Server to connect.\n    :param default_timeout: the default timeout that is used if no timeout is\n                            specified on :meth:`~BaseCache.set`.\n    :param key_prefix: A prefix that should be added to all keys.\n    \"\"\"\n\n    def __init__(self, host='localhost', port=6379, password=None,\n                 db=0, default_timeout=300, key_prefix=None):\n        BaseCache.__init__(self, default_timeout)\n        if isinstance(host, string_types):\n            try:\n                import redis\n            except ImportError:\n                raise RuntimeError('no redis module found')\n            self._client = redis.Redis(host=host, port=port, password=password, db=db)\n        else:\n            self._client = host\n        self.key_prefix = key_prefix or ''\n\n    def dump_object(self, value):\n        \"\"\"Dumps an object into a string for redis.  By default it serializes\n        integers as regular string and pickle dumps everything else.\n        \"\"\"\n        t = type(value)\n        if t in integer_types:\n            return str(value).encode('ascii')\n        return b'!' + pickle.dumps(value)\n\n    def load_object(self, value):\n        \"\"\"The reversal of :meth:`dump_object`.  This might be callde with\n        None.\n        \"\"\"\n        if value is None:\n            return None\n        if value.startswith(b'!'):\n            return pickle.loads(value[1:])\n        try:\n            return int(value)\n        except ValueError:\n            # before 0.8 we did not have serialization.  Still support that.\n            return value\n\n    def get(self, key):\n        return self.load_object(self._client.get(self.key_prefix + key))\n\n    def get_many(self, *keys):\n        if self.key_prefix:\n            keys = [self.key_prefix + key for key in keys]\n        return [self.load_object(x) for x in self._client.mget(keys)]\n\n    def set(self, key, value, timeout=None):\n        if timeout is None:\n            timeout = self.default_timeout\n        dump = self.dump_object(value)\n        self._client.setex(self.key_prefix + key, dump, timeout)\n\n    def add(self, key, value, timeout=None):\n        if timeout is None:\n            timeout = self.default_timeout\n        dump = self.dump_object(value)\n        added = self._client.setnx(self.key_prefix + key, dump)\n        if added:\n            self._client.expire(self.key_prefix + key, timeout)\n\n    def set_many(self, mapping, timeout=None):\n        if timeout is None:\n            timeout = self.default_timeout\n        pipe = self._client.pipeline()\n        for key, value in _items(mapping):\n            dump = self.dump_object(value)\n            pipe.setex(self.key_prefix + key, dump, timeout)\n        pipe.execute()\n\n    def delete(self, key):\n        self._client.delete(self.key_prefix + key)\n\n    def delete_many(self, *keys):\n        if not keys:\n            return\n        if self.key_prefix:\n            keys = [self.key_prefix + key for key in keys]\n        self._client.delete(*keys)\n\n    def clear(self):\n        if self.key_prefix:\n            keys = self._client.keys(self.key_prefix + '*')\n            if keys:\n                self._client.delete(*keys)\n        else:\n            self._client.flushdb()\n\n    def inc(self, key, delta=1):\n        return self._client.incr(self.key_prefix + key, delta)\n\n    def dec(self, key, delta=1):\n        return self._client.decr(self.key_prefix + key, delta)\n\n\nclass FileSystemCache(BaseCache):\n    \"\"\"A cache that stores the items on the file system.  This cache depends\n    on being the only user of the `cache_dir`.  Make absolutely sure that\n    nobody but this cache stores files there or otherwise the cache will\n    randomly delete files therein.\n\n    :param cache_dir: the directory where cache files are stored.\n    :param threshold: the maximum number of items the cache stores before\n                      it starts deleting some.\n    :param default_timeout: the default timeout that is used if no timeout is\n                            specified on :meth:`~BaseCache.set`.\n    :param mode: the file mode wanted for the cache files, default 0600\n    \"\"\"\n\n    #: used for temporary files by the FileSystemCache\n    _fs_transaction_suffix = '.__wz_cache'\n\n    def __init__(self, cache_dir, threshold=500, default_timeout=300, mode=0o600):\n        BaseCache.__init__(self, default_timeout)\n        self._path = cache_dir\n        self._threshold = threshold\n        self._mode = mode\n        if not os.path.exists(self._path):\n            os.makedirs(self._path)\n\n    def _list_dir(self):\n        \"\"\"return a list of (fully qualified) cache filenames\n        \"\"\"\n        return [os.path.join(self._path, fn) for fn in os.listdir(self._path)\n                if not fn.endswith(self._fs_transaction_suffix)]\n\n    def _prune(self):\n        entries = self._list_dir()\n        if len(entries) > self._threshold:\n            now = time()\n            for idx, fname in enumerate(entries):\n                remove = False\n                f = None\n                try:\n                    try:\n                        f = open(fname, 'rb')\n                        expires = pickle.load(f)\n                        remove = expires <= now or idx % 3 == 0\n                    finally:\n                        if f is not None:\n                            f.close()\n                except Exception:\n                    pass\n                if remove:\n                    try:\n                        os.remove(fname)\n                    except (IOError, OSError):\n                        pass\n\n    def clear(self):\n        for fname in self._list_dir():\n            try:\n                os.remove(fname)\n            except (IOError, OSError):\n                pass\n\n    def _get_filename(self, key):\n        if isinstance(key, text_type):\n            key = key.encode('utf-8') #XXX unicode review\n        hash = md5(key).hexdigest()\n        return os.path.join(self._path, hash)\n\n    def get(self, key):\n        filename = self._get_filename(key)\n        try:\n            f = open(filename, 'rb')\n            try:\n                if pickle.load(f) >= time():\n                    return pickle.load(f)\n            finally:\n                f.close()\n            os.remove(filename)\n        except Exception:\n            return None\n\n    def add(self, key, value, timeout=None):\n        filename = self._get_filename(key)\n        if not os.path.exists(filename):\n            self.set(key, value, timeout)\n\n    def set(self, key, value, timeout=None):\n        if timeout is None:\n            timeout = self.default_timeout\n        filename = self._get_filename(key)\n        self._prune()\n        try:\n            fd, tmp = tempfile.mkstemp(suffix=self._fs_transaction_suffix,\n                                       dir=self._path)\n            f = os.fdopen(fd, 'wb')\n            try:\n                pickle.dump(int(time() + timeout), f, 1)\n                pickle.dump(value, f, pickle.HIGHEST_PROTOCOL)\n            finally:\n                f.close()\n            rename(tmp, filename)\n            os.chmod(filename, self._mode)\n        except (IOError, OSError):\n            pass\n\n    def delete(self, key):\n        try:\n            os.remove(self._get_filename(key))\n        except (IOError, OSError):\n            pass\n","license":"mit","hash":-7111811701270589600,"line_mean":33.6377025037,"line_max":86,"alpha_frac":0.5791062545,"autogenerated":false}
{"repo_name":"pipet\/pipet","path":"pipet\/sources\/zendesk\/tasks.py","copies":"2","size":"1544","content":"from contextlib import contextmanager\nfrom datetime import datetime\nfrom inspect import isclass\n\nfrom celery import chord, group\nfrom celery_once import QueueOnce\nfrom celery.schedules import crontab\nfrom celery.utils.log import get_task_logger\nfrom sqlalchemy.orm.attributes import flag_modified\n\n# from pipet import celery\nfrom pipet.models import db, Organization\nfrom pipet.sources.zendesk import ZendeskAccount\nfrom pipet.sources.zendesk.models import (\n    Base,\n    CLASS_REGISTRY,\n)\n\n\nlogger = get_task_logger(__name__)\n\n\n# @celery.task(base=QueueOnce, once={'graceful': True})\ndef sync(account_id):\n    with app.app_context():\n        account = ZendeskAccount.query.get(account_id)\n        session = account.organization.create_session()\n\n        for cls in [m for n, m in CLASS_REGISTRY.items() if isclass(m) and issubclass(m, Base)]:\n            # TODO: Make these parallel to speed up execution\n            while True:\n                conn = session.connection()\n                statments, cursor, has_more = cls.sync(account)\n                account.cursors[cls.__tablename__] = cursor\n                flag_modified(account, 'cursors')\n\n                for statement in statments:\n                    conn.execute(statement)\n\n                session.commit()\n\n                db.session.add(account)\n                db.session.commit()\n\n                if not has_more:\n                    break\n\n\n# @celery.task\ndef sync_all():\n    job = group([sync.s(account.id) for account in ZendeskAccount.query.all()])\n    job.apply_async()\n","license":"apache-2.0","hash":156606072465059935,"line_mean":28.6923076923,"line_max":96,"alpha_frac":0.6457253886,"autogenerated":false}
{"repo_name":"tomchristie\/django","path":"django\/apps\/config.py","copies":"55","size":"8047","content":"import os\nfrom importlib import import_module\n\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.utils.module_loading import module_has_submodule\n\nMODELS_MODULE_NAME = 'models'\n\n\nclass AppConfig:\n    \"\"\"Class representing a Django application and its configuration.\"\"\"\n\n    def __init__(self, app_name, app_module):\n        # Full Python path to the application e.g. 'django.contrib.admin'.\n        self.name = app_name\n\n        # Root module for the application e.g. <module 'django.contrib.admin'\n        # from 'django\/contrib\/admin\/__init__.py'>.\n        self.module = app_module\n\n        # Reference to the Apps registry that holds this AppConfig. Set by the\n        # registry when it registers the AppConfig instance.\n        self.apps = None\n\n        # The following attributes could be defined at the class level in a\n        # subclass, hence the test-and-set pattern.\n\n        # Last component of the Python path to the application e.g. 'admin'.\n        # This value must be unique across a Django project.\n        if not hasattr(self, 'label'):\n            self.label = app_name.rpartition(\".\")[2]\n\n        # Human-readable name for the application e.g. \"Admin\".\n        if not hasattr(self, 'verbose_name'):\n            self.verbose_name = self.label.title()\n\n        # Filesystem path to the application directory e.g.\n        # '\/path\/to\/django\/contrib\/admin'.\n        if not hasattr(self, 'path'):\n            self.path = self._path_from_module(app_module)\n\n        # Module containing models e.g. <module 'django.contrib.admin.models'\n        # from 'django\/contrib\/admin\/models.py'>. Set by import_models().\n        # None if the application doesn't have a models module.\n        self.models_module = None\n\n        # Mapping of lower case model names to model classes. Initially set to\n        # None to prevent accidental access before import_models() runs.\n        self.models = None\n\n    def __repr__(self):\n        return '<%s: %s>' % (self.__class__.__name__, self.label)\n\n    def _path_from_module(self, module):\n        \"\"\"Attempt to determine app's filesystem path from its module.\"\"\"\n        # See #21874 for extended discussion of the behavior of this method in\n        # various cases.\n        # Convert paths to list because Python's _NamespacePath doesn't support\n        # indexing.\n        paths = list(getattr(module, '__path__', []))\n        if len(paths) != 1:\n            filename = getattr(module, '__file__', None)\n            if filename is not None:\n                paths = [os.path.dirname(filename)]\n            else:\n                # For unknown reasons, sometimes the list returned by __path__\n                # contains duplicates that must be removed (#25246).\n                paths = list(set(paths))\n        if len(paths) > 1:\n            raise ImproperlyConfigured(\n                \"The app module %r has multiple filesystem locations (%r); \"\n                \"you must configure this app with an AppConfig subclass \"\n                \"with a 'path' class attribute.\" % (module, paths))\n        elif not paths:\n            raise ImproperlyConfigured(\n                \"The app module %r has no filesystem location, \"\n                \"you must configure this app with an AppConfig subclass \"\n                \"with a 'path' class attribute.\" % (module,))\n        return paths[0]\n\n    @classmethod\n    def create(cls, entry):\n        \"\"\"\n        Factory that creates an app config from an entry in INSTALLED_APPS.\n        \"\"\"\n        try:\n            # If import_module succeeds, entry is a path to an app module,\n            # which may specify an app config class with default_app_config.\n            # Otherwise, entry is a path to an app config class or an error.\n            module = import_module(entry)\n\n        except ImportError:\n            # Track that importing as an app module failed. If importing as an\n            # app config class fails too, we'll trigger the ImportError again.\n            module = None\n\n            mod_path, _, cls_name = entry.rpartition('.')\n\n            # Raise the original exception when entry cannot be a path to an\n            # app config class.\n            if not mod_path:\n                raise\n\n        else:\n            try:\n                # If this works, the app module specifies an app config class.\n                entry = module.default_app_config\n            except AttributeError:\n                # Otherwise, it simply uses the default app config class.\n                return cls(entry, module)\n            else:\n                mod_path, _, cls_name = entry.rpartition('.')\n\n        # If we're reaching this point, we must attempt to load the app config\n        # class located at <mod_path>.<cls_name>\n        mod = import_module(mod_path)\n        try:\n            cls = getattr(mod, cls_name)\n        except AttributeError:\n            if module is None:\n                # If importing as an app module failed, that error probably\n                # contains the most informative traceback. Trigger it again.\n                import_module(entry)\n            else:\n                raise\n\n        # Check for obvious errors. (This check prevents duck typing, but\n        # it could be removed if it became a problem in practice.)\n        if not issubclass(cls, AppConfig):\n            raise ImproperlyConfigured(\n                \"'%s' isn't a subclass of AppConfig.\" % entry)\n\n        # Obtain app name here rather than in AppClass.__init__ to keep\n        # all error checking for entries in INSTALLED_APPS in one place.\n        try:\n            app_name = cls.name\n        except AttributeError:\n            raise ImproperlyConfigured(\n                \"'%s' must supply a name attribute.\" % entry)\n\n        # Ensure app_name points to a valid module.\n        try:\n            app_module = import_module(app_name)\n        except ImportError:\n            raise ImproperlyConfigured(\n                \"Cannot import '%s'. Check that '%s.%s.name' is correct.\" % (\n                    app_name, mod_path, cls_name,\n                )\n            )\n\n        # Entry is a path to an app config class.\n        return cls(app_name, app_module)\n\n    def get_model(self, model_name, require_ready=True):\n        \"\"\"\n        Return the model with the given case-insensitive model_name.\n\n        Raise LookupError if no model exists with this name.\n        \"\"\"\n        if require_ready:\n            self.apps.check_models_ready()\n        else:\n            self.apps.check_apps_ready()\n        try:\n            return self.models[model_name.lower()]\n        except KeyError:\n            raise LookupError(\n                \"App '%s' doesn't have a '%s' model.\" % (self.label, model_name))\n\n    def get_models(self, include_auto_created=False, include_swapped=False):\n        \"\"\"\n        Return an iterable of models.\n\n        By default, the following models aren't included:\n\n        - auto-created models for many-to-many relations without\n          an explicit intermediate table,\n        - models that have been swapped out.\n\n        Set the corresponding keyword argument to True to include such models.\n        Keyword arguments aren't documented; they're a private API.\n        \"\"\"\n        self.apps.check_models_ready()\n        for model in self.models.values():\n            if model._meta.auto_created and not include_auto_created:\n                continue\n            if model._meta.swapped and not include_swapped:\n                continue\n            yield model\n\n    def import_models(self):\n        # Dictionary of models for this app, primarily maintained in the\n        # 'all_models' attribute of the Apps this AppConfig is attached to.\n        self.models = self.apps.all_models[self.label]\n\n        if module_has_submodule(self.module, MODELS_MODULE_NAME):\n            models_module_name = '%s.%s' % (self.name, MODELS_MODULE_NAME)\n            self.models_module = import_module(models_module_name)\n\n    def ready(self):\n        \"\"\"\n        Override this method in subclasses to run code when Django starts.\n        \"\"\"\n","license":"bsd-3-clause","hash":-8530773113433397750,"line_mean":38.6403940887,"line_max":81,"alpha_frac":0.5922704113,"autogenerated":false}
{"repo_name":"prutseltje\/ansible","path":"test\/units\/modules\/network\/f5\/test_bigip_gtm_datacenter.py","copies":"23","size":"6819","content":"# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2017 F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https:\/\/www.gnu.org\/licenses\/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.modules.bigip_gtm_datacenter import ApiParameters\n    from library.modules.bigip_gtm_datacenter import ModuleParameters\n    from library.modules.bigip_gtm_datacenter import ModuleManager\n    from library.modules.bigip_gtm_datacenter import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_gtm_datacenter import ApiParameters\n        from ansible.modules.network.f5.bigip_gtm_datacenter import ModuleParameters\n        from ansible.modules.network.f5.bigip_gtm_datacenter import ModuleManager\n        from ansible.modules.network.f5.bigip_gtm_datacenter import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            state='present',\n            contact='foo',\n            description='bar',\n            location='baz',\n            name='datacenter'\n        )\n        p = ModuleParameters(params=args)\n        assert p.state == 'present'\n\n    def test_api_parameters(self):\n        args = load_fixture('load_gtm_datacenter_default.json')\n        p = ApiParameters(params=args)\n        assert p.name == 'asd'\n\n    def test_module_parameters_state_present(self):\n        args = dict(\n            state='present'\n        )\n        p = ModuleParameters(params=args)\n        assert p.state == 'present'\n        assert p.enabled is True\n\n    def test_module_parameters_state_absent(self):\n        args = dict(\n            state='absent'\n        )\n        p = ModuleParameters(params=args)\n        assert p.state == 'absent'\n\n    def test_module_parameters_state_enabled(self):\n        args = dict(\n            state='enabled'\n        )\n        p = ModuleParameters(params=args)\n        assert p.state == 'enabled'\n        assert p.enabled is True\n        assert p.disabled is None\n\n    def test_module_parameters_state_disabled(self):\n        args = dict(\n            state='disabled'\n        )\n        p = ModuleParameters(params=args)\n        assert p.state == 'disabled'\n        assert p.enabled is None\n        assert p.disabled is True\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_datacenter(self, *args):\n        set_module_args(dict(\n            state='present',\n            password='admin',\n            server='localhost',\n            user='admin',\n            name='foo'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.exists = Mock(side_effect=[False, True])\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n        assert results['state'] == 'present'\n\n    def test_create_disabled_datacenter(self, *args):\n        set_module_args(dict(\n            state='disabled',\n            password='admin',\n            server='localhost',\n            user='admin',\n            name='foo'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.exists = Mock(side_effect=[False, True])\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n        assert results['enabled'] is False\n        assert results['disabled'] is True\n\n    def test_create_enabled_datacenter(self, *args):\n        set_module_args(dict(\n            state='enabled',\n            password='admin',\n            server='localhost',\n            user='admin',\n            name='foo'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.exists = Mock(side_effect=[False, True])\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n        assert results['enabled'] is True\n        assert results['disabled'] is False\n\n    def test_idempotent_disable_datacenter(self, *args):\n        set_module_args(dict(\n            state='disabled',\n            password='admin',\n            server='localhost',\n            user='admin',\n            name='foo'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        current = ApiParameters(params=load_fixture('load_gtm_datacenter_disabled.json'))\n\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.exists = Mock(return_value=True)\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n        assert results['changed'] is False\n","license":"gpl-3.0","hash":1435203684349960277,"line_mean":30.7162790698,"line_max":91,"alpha_frac":0.6286845579,"autogenerated":false}
{"repo_name":"antb\/TPT----My-old-mod","path":"src\/python\/stdlib\/ctypes\/test\/test_errno.py","copies":"115","size":"2330","content":"import unittest, os, errno\nfrom ctypes import *\nfrom ctypes.util import find_library\nfrom test import test_support\ntry:\n    import threading\nexcept ImportError:\n    threading = None\n\nclass Test(unittest.TestCase):\n    def test_open(self):\n        libc_name = find_library(\"c\")\n        if libc_name is None:\n            raise unittest.SkipTest(\"Unable to find C library\")\n        libc = CDLL(libc_name, use_errno=True)\n        if os.name == \"nt\":\n            libc_open = libc._open\n        else:\n            libc_open = libc.open\n\n        libc_open.argtypes = c_char_p, c_int\n\n        self.assertEqual(libc_open(\"\", 0), -1)\n        self.assertEqual(get_errno(), errno.ENOENT)\n\n        self.assertEqual(set_errno(32), errno.ENOENT)\n        self.assertEqual(get_errno(), 32)\n\n        if threading:\n            def _worker():\n                set_errno(0)\n\n                libc = CDLL(libc_name, use_errno=False)\n                if os.name == \"nt\":\n                    libc_open = libc._open\n                else:\n                    libc_open = libc.open\n                libc_open.argtypes = c_char_p, c_int\n                self.assertEqual(libc_open(\"\", 0), -1)\n                self.assertEqual(get_errno(), 0)\n\n            t = threading.Thread(target=_worker)\n            t.start()\n            t.join()\n\n            self.assertEqual(get_errno(), 32)\n            set_errno(0)\n\n    @unittest.skipUnless(os.name == \"nt\", 'Test specific to Windows')\n    def test_GetLastError(self):\n        dll = WinDLL(\"kernel32\", use_last_error=True)\n        GetModuleHandle = dll.GetModuleHandleA\n        GetModuleHandle.argtypes = [c_wchar_p]\n\n        self.assertEqual(0, GetModuleHandle(\"foo\"))\n        self.assertEqual(get_last_error(), 126)\n\n        self.assertEqual(set_last_error(32), 126)\n        self.assertEqual(get_last_error(), 32)\n\n        def _worker():\n            set_last_error(0)\n\n            dll = WinDLL(\"kernel32\", use_last_error=False)\n            GetModuleHandle = dll.GetModuleHandleW\n            GetModuleHandle.argtypes = [c_wchar_p]\n            GetModuleHandle(\"bar\")\n\n            self.assertEqual(get_last_error(), 0)\n\n        t = threading.Thread(target=_worker)\n        t.start()\n        t.join()\n\n        self.assertEqual(get_last_error(), 32)\n\n        set_last_error(0)\n\nif __name__ == \"__main__\":\n    unittest.main()\n","license":"gpl-2.0","hash":785952512028991401,"line_mean":28.125,"line_max":69,"alpha_frac":0.5540772532,"autogenerated":false}
{"repo_name":"Sarah-Alsinan\/muypicky","path":"lib\/python3.6\/site-packages\/django\/db\/backends\/sqlite3\/creation.py","copies":"60","size":"4965","content":"import os\nimport shutil\nimport sys\n\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.db.backends.base.creation import BaseDatabaseCreation\nfrom django.utils.encoding import force_text\nfrom django.utils.six.moves import input\n\n\nclass DatabaseCreation(BaseDatabaseCreation):\n\n    @staticmethod\n    def is_in_memory_db(database_name):\n        return database_name == ':memory:' or 'mode=memory' in force_text(database_name)\n\n    def _get_test_db_name(self):\n        test_database_name = self.connection.settings_dict['TEST']['NAME']\n        can_share_in_memory_db = self.connection.features.can_share_in_memory_db\n        if not test_database_name:\n            test_database_name = ':memory:'\n        if can_share_in_memory_db:\n            if test_database_name == ':memory:':\n                return 'file:memorydb_%s?mode=memory&cache=shared' % self.connection.alias\n        elif 'mode=memory' in test_database_name:\n            raise ImproperlyConfigured(\n                \"Using a shared memory database with `mode=memory` in the \"\n                \"database name is not supported in your environment, \"\n                \"use `:memory:` instead.\"\n            )\n        return test_database_name\n\n    def _create_test_db(self, verbosity, autoclobber, keepdb=False):\n        test_database_name = self._get_test_db_name()\n\n        if keepdb:\n            return test_database_name\n        if not self.is_in_memory_db(test_database_name):\n            # Erase the old test database\n            if verbosity >= 1:\n                print(\"Destroying old test database for alias %s...\" % (\n                    self._get_database_display_str(verbosity, test_database_name),\n                ))\n            if os.access(test_database_name, os.F_OK):\n                if not autoclobber:\n                    confirm = input(\n                        \"Type 'yes' if you would like to try deleting the test \"\n                        \"database '%s', or 'no' to cancel: \" % test_database_name\n                    )\n                if autoclobber or confirm == 'yes':\n                    try:\n                        os.remove(test_database_name)\n                    except Exception as e:\n                        sys.stderr.write(\"Got an error deleting the old test database: %s\\n\" % e)\n                        sys.exit(2)\n                else:\n                    print(\"Tests cancelled.\")\n                    sys.exit(1)\n        return test_database_name\n\n    def get_test_db_clone_settings(self, number):\n        orig_settings_dict = self.connection.settings_dict\n        source_database_name = orig_settings_dict['NAME']\n        if self.is_in_memory_db(source_database_name):\n            return orig_settings_dict\n        else:\n            new_settings_dict = orig_settings_dict.copy()\n            root, ext = os.path.splitext(orig_settings_dict['NAME'])\n            new_settings_dict['NAME'] = '{}_{}.{}'.format(root, number, ext)\n            return new_settings_dict\n\n    def _clone_test_db(self, number, verbosity, keepdb=False):\n        source_database_name = self.connection.settings_dict['NAME']\n        target_database_name = self.get_test_db_clone_settings(number)['NAME']\n        # Forking automatically makes a copy of an in-memory database.\n        if not self.is_in_memory_db(source_database_name):\n            # Erase the old test database\n            if os.access(target_database_name, os.F_OK):\n                if keepdb:\n                    return\n                if verbosity >= 1:\n                    print(\"Destroying old test database for alias %s...\" % (\n                        self._get_database_display_str(verbosity, target_database_name),\n                    ))\n                try:\n                    os.remove(target_database_name)\n                except Exception as e:\n                    sys.stderr.write(\"Got an error deleting the old test database: %s\\n\" % e)\n                    sys.exit(2)\n            try:\n                shutil.copy(source_database_name, target_database_name)\n            except Exception as e:\n                sys.stderr.write(\"Got an error cloning the test database: %s\\n\" % e)\n                sys.exit(2)\n\n    def _destroy_test_db(self, test_database_name, verbosity):\n        if test_database_name and not self.is_in_memory_db(test_database_name):\n            # Remove the SQLite database file\n            os.remove(test_database_name)\n\n    def test_db_signature(self):\n        \"\"\"\n        Returns a tuple that uniquely identifies a test database.\n\n        This takes into account the special cases of \":memory:\" and \"\" for\n        SQLite since the databases will be distinct despite having the same\n        TEST NAME. See http:\/\/www.sqlite.org\/inmemorydb.html\n        \"\"\"\n        test_database_name = self._get_test_db_name()\n        sig = [self.connection.settings_dict['NAME']]\n        if self.is_in_memory_db(test_database_name):\n            sig.append(self.connection.alias)\n        return tuple(sig)\n","license":"mit","hash":3775330401011206918,"line_mean":42.9380530973,"line_max":97,"alpha_frac":0.5766364552,"autogenerated":false}
{"repo_name":"greenoaktree\/MissionPlanner","path":"Lib\/sysconfig.py","copies":"42","size":"25982","content":"\"\"\"Provide access to Python's configuration information.\r\n\r\n\"\"\"\r\nimport sys\r\nimport os\r\nfrom os.path import pardir, realpath\r\n\r\n_INSTALL_SCHEMES = {\r\n    'posix_prefix': {\r\n        'stdlib': '{base}\/lib\/python{py_version_short}',\r\n        'platstdlib': '{platbase}\/lib\/python{py_version_short}',\r\n        'purelib': '{base}\/lib\/python{py_version_short}\/site-packages',\r\n        'platlib': '{platbase}\/lib\/python{py_version_short}\/site-packages',\r\n        'include': '{base}\/include\/python{py_version_short}',\r\n        'platinclude': '{platbase}\/include\/python{py_version_short}',\r\n        'scripts': '{base}\/bin',\r\n        'data': '{base}',\r\n        },\r\n    'posix_home': {\r\n        'stdlib': '{base}\/lib\/python',\r\n        'platstdlib': '{base}\/lib\/python',\r\n        'purelib': '{base}\/lib\/python',\r\n        'platlib': '{base}\/lib\/python',\r\n        'include': '{base}\/include\/python',\r\n        'platinclude': '{base}\/include\/python',\r\n        'scripts': '{base}\/bin',\r\n        'data'   : '{base}',\r\n        },\r\n    'nt': {\r\n        'stdlib': '{base}\/Lib',\r\n        'platstdlib': '{base}\/Lib',\r\n        'purelib': '{base}\/Lib\/site-packages',\r\n        'platlib': '{base}\/Lib\/site-packages',\r\n        'include': '{base}\/Include',\r\n        'platinclude': '{base}\/Include',\r\n        'scripts': '{base}\/Scripts',\r\n        'data'   : '{base}',\r\n        },\r\n    'os2': {\r\n        'stdlib': '{base}\/Lib',\r\n        'platstdlib': '{base}\/Lib',\r\n        'purelib': '{base}\/Lib\/site-packages',\r\n        'platlib': '{base}\/Lib\/site-packages',\r\n        'include': '{base}\/Include',\r\n        'platinclude': '{base}\/Include',\r\n        'scripts': '{base}\/Scripts',\r\n        'data'   : '{base}',\r\n        },\r\n    'os2_home': {\r\n        'stdlib': '{userbase}\/lib\/python{py_version_short}',\r\n        'platstdlib': '{userbase}\/lib\/python{py_version_short}',\r\n        'purelib': '{userbase}\/lib\/python{py_version_short}\/site-packages',\r\n        'platlib': '{userbase}\/lib\/python{py_version_short}\/site-packages',\r\n        'include': '{userbase}\/include\/python{py_version_short}',\r\n        'scripts': '{userbase}\/bin',\r\n        'data'   : '{userbase}',\r\n        },\r\n    'nt_user': {\r\n        'stdlib': '{userbase}\/IronPython{py_version_nodot}',\r\n        'platstdlib': '{userbase}\/IronPython{py_version_nodot}',\r\n        'purelib': '{userbase}\/IronPython{py_version_nodot}\/site-packages',\r\n        'platlib': '{userbase}\/IronPython{py_version_nodot}\/site-packages',\r\n        'include': '{userbase}\/IronPython{py_version_nodot}\/Include',\r\n        'scripts': '{userbase}\/Scripts',\r\n        'data'   : '{userbase}',\r\n        },\r\n    'posix_user': {\r\n        'stdlib': '{userbase}\/lib\/python{py_version_short}',\r\n        'platstdlib': '{userbase}\/lib\/python{py_version_short}',\r\n        'purelib': '{userbase}\/lib\/python{py_version_short}\/site-packages',\r\n        'platlib': '{userbase}\/lib\/python{py_version_short}\/site-packages',\r\n        'include': '{userbase}\/include\/python{py_version_short}',\r\n        'scripts': '{userbase}\/bin',\r\n        'data'   : '{userbase}',\r\n        },\r\n    'osx_framework_user': {\r\n        'stdlib': '{userbase}\/lib\/python',\r\n        'platstdlib': '{userbase}\/lib\/python',\r\n        'purelib': '{userbase}\/lib\/python\/site-packages',\r\n        'platlib': '{userbase}\/lib\/python\/site-packages',\r\n        'include': '{userbase}\/include',\r\n        'scripts': '{userbase}\/bin',\r\n        'data'   : '{userbase}',\r\n        },\r\n    }\r\n\r\n_SCHEME_KEYS = ('stdlib', 'platstdlib', 'purelib', 'platlib', 'include',\r\n                'scripts', 'data')\r\n_PY_VERSION = sys.version.split()[0]\r\n_PY_VERSION_SHORT = sys.version[:3]\r\n_PY_VERSION_SHORT_NO_DOT = _PY_VERSION[0] + _PY_VERSION[2]\r\n_PREFIX = os.path.normpath(sys.prefix)\r\n_EXEC_PREFIX = os.path.normpath(sys.exec_prefix)\r\n_CONFIG_VARS = None\r\n_USER_BASE = None\r\n\r\ndef _safe_realpath(path):\r\n    try:\r\n        return realpath(path)\r\n    except OSError:\r\n        return path\r\n\r\nif sys.executable:\r\n    _PROJECT_BASE = os.path.dirname(_safe_realpath(sys.executable))\r\nelse:\r\n    # sys.executable can be empty if argv[0] has been changed and Python is\r\n    # unable to retrieve the real program name\r\n    _PROJECT_BASE = _safe_realpath(os.getcwd())\r\n\r\nif os.name == \"nt\" and \"pcbuild\" in _PROJECT_BASE[-8:].lower():\r\n    _PROJECT_BASE = _safe_realpath(os.path.join(_PROJECT_BASE, pardir))\r\n# PC\/VS7.1\r\nif os.name == \"nt\" and \"\\\\pc\\\\v\" in _PROJECT_BASE[-10:].lower():\r\n    _PROJECT_BASE = _safe_realpath(os.path.join(_PROJECT_BASE, pardir, pardir))\r\n# PC\/AMD64\r\nif os.name == \"nt\" and \"\\\\pcbuild\\\\amd64\" in _PROJECT_BASE[-14:].lower():\r\n    _PROJECT_BASE = _safe_realpath(os.path.join(_PROJECT_BASE, pardir, pardir))\r\n\r\ndef is_python_build():\r\n    for fn in (\"Setup.dist\", \"Setup.local\"):\r\n        if os.path.isfile(os.path.join(_PROJECT_BASE, \"Modules\", fn)):\r\n            return True\r\n    return False\r\n\r\n_PYTHON_BUILD = is_python_build()\r\n\r\nif _PYTHON_BUILD:\r\n    for scheme in ('posix_prefix', 'posix_home'):\r\n        _INSTALL_SCHEMES[scheme]['include'] = '{projectbase}\/Include'\r\n        _INSTALL_SCHEMES[scheme]['platinclude'] = '{srcdir}'\r\n\r\ndef _subst_vars(s, local_vars):\r\n    try:\r\n        return s.format(**local_vars)\r\n    except KeyError:\r\n        try:\r\n            return s.format(**os.environ)\r\n        except KeyError, var:\r\n            raise AttributeError('{%s}' % var)\r\n\r\ndef _extend_dict(target_dict, other_dict):\r\n    target_keys = target_dict.keys()\r\n    for key, value in other_dict.items():\r\n        if key in target_keys:\r\n            continue\r\n        target_dict[key] = value\r\n\r\ndef _expand_vars(scheme, vars):\r\n    res = {}\r\n    if vars is None:\r\n        vars = {}\r\n    _extend_dict(vars, get_config_vars())\r\n\r\n    for key, value in _INSTALL_SCHEMES[scheme].items():\r\n        if os.name in ('posix', 'nt'):\r\n            value = os.path.expanduser(value)\r\n        res[key] = os.path.normpath(_subst_vars(value, vars))\r\n    return res\r\n\r\ndef _get_default_scheme():\r\n    if sys.platform == 'cli':\r\n        return 'nt'\r\n    if os.name == 'posix':\r\n        # the default scheme for posix is posix_prefix\r\n        return 'posix_prefix'\r\n    return os.name\r\n\r\ndef _getuserbase():\r\n    env_base = os.environ.get(\"IRONPYTHONUSERBASE\", None)\r\n    def joinuser(*args):\r\n        return os.path.expanduser(os.path.join(*args))\r\n\r\n    # what about 'os2emx', 'riscos' ?\r\n    if os.name == \"nt\":\r\n        base = os.environ.get(\"APPDATA\") or \"~\"\r\n        return env_base if env_base else joinuser(base, \"Python\")\r\n\r\n    if sys.platform == \"darwin\":\r\n        framework = get_config_var(\"PYTHONFRAMEWORK\")\r\n        if framework:\r\n            return joinuser(\"~\", \"Library\", framework, \"%d.%d\"%(\r\n                sys.version_info[:2]))\r\n\r\n    return env_base if env_base else joinuser(\"~\", \".local\")\r\n\r\n\r\ndef _parse_makefile(filename, vars=None):\r\n    \"\"\"Parse a Makefile-style file.\r\n\r\n    A dictionary containing name\/value pairs is returned.  If an\r\n    optional dictionary is passed in as the second argument, it is\r\n    used instead of a new dictionary.\r\n    \"\"\"\r\n    import re\r\n    # Regexes needed for parsing Makefile (and similar syntaxes,\r\n    # like old-style Setup files).\r\n    _variable_rx = re.compile(\"([a-zA-Z][a-zA-Z0-9_]+)\\s*=\\s*(.*)\")\r\n    _findvar1_rx = re.compile(r\"\\$\\(([A-Za-z][A-Za-z0-9_]*)\\)\")\r\n    _findvar2_rx = re.compile(r\"\\${([A-Za-z][A-Za-z0-9_]*)}\")\r\n\r\n    if vars is None:\r\n        vars = {}\r\n    done = {}\r\n    notdone = {}\r\n\r\n    with open(filename) as f:\r\n        lines = f.readlines()\r\n\r\n    for line in lines:\r\n        if line.startswith('#') or line.strip() == '':\r\n            continue\r\n        m = _variable_rx.match(line)\r\n        if m:\r\n            n, v = m.group(1, 2)\r\n            v = v.strip()\r\n            # `$$' is a literal `$' in make\r\n            tmpv = v.replace('$$', '')\r\n\r\n            if \"$\" in tmpv:\r\n                notdone[n] = v\r\n            else:\r\n                try:\r\n                    v = int(v)\r\n                except ValueError:\r\n                    # insert literal `$'\r\n                    done[n] = v.replace('$$', '$')\r\n                else:\r\n                    done[n] = v\r\n\r\n    # do variable interpolation here\r\n    while notdone:\r\n        for name in notdone.keys():\r\n            value = notdone[name]\r\n            m = _findvar1_rx.search(value) or _findvar2_rx.search(value)\r\n            if m:\r\n                n = m.group(1)\r\n                found = True\r\n                if n in done:\r\n                    item = str(done[n])\r\n                elif n in notdone:\r\n                    # get it on a subsequent round\r\n                    found = False\r\n                elif n in os.environ:\r\n                    # do it like make: fall back to environment\r\n                    item = os.environ[n]\r\n                else:\r\n                    done[n] = item = \"\"\r\n                if found:\r\n                    after = value[m.end():]\r\n                    value = value[:m.start()] + item + after\r\n                    if \"$\" in after:\r\n                        notdone[name] = value\r\n                    else:\r\n                        try: value = int(value)\r\n                        except ValueError:\r\n                            done[name] = value.strip()\r\n                        else:\r\n                            done[name] = value\r\n                        del notdone[name]\r\n            else:\r\n                # bogus variable reference; just drop it since we can't deal\r\n                del notdone[name]\r\n    # strip spurious spaces\r\n    for k, v in done.items():\r\n        if isinstance(v, str):\r\n            done[k] = v.strip()\r\n\r\n    # save the results in the global dictionary\r\n    vars.update(done)\r\n    return vars\r\n\r\n\r\ndef _get_makefile_filename():\r\n    if _PYTHON_BUILD:\r\n        return os.path.join(_PROJECT_BASE, \"Makefile\")\r\n    return os.path.join(get_path('platstdlib'), \"config\", \"Makefile\")\r\n\r\n\r\ndef _init_posix(vars):\r\n    \"\"\"Initialize the module as appropriate for POSIX systems.\"\"\"\r\n    # load the installed Makefile:\r\n    makefile = _get_makefile_filename()\r\n    try:\r\n        _parse_makefile(makefile, vars)\r\n    except IOError, e:\r\n        msg = \"invalid Python installation: unable to open %s\" % makefile\r\n        if hasattr(e, \"strerror\"):\r\n            msg = msg + \" (%s)\" % e.strerror\r\n        raise IOError(msg)\r\n\r\n    # load the installed pyconfig.h:\r\n    config_h = get_config_h_filename()\r\n    try:\r\n        with open(config_h) as f:\r\n            parse_config_h(f, vars)\r\n    except IOError, e:\r\n        msg = \"invalid Python installation: unable to open %s\" % config_h\r\n        if hasattr(e, \"strerror\"):\r\n            msg = msg + \" (%s)\" % e.strerror\r\n        raise IOError(msg)\r\n\r\n    # On AIX, there are wrong paths to the linker scripts in the Makefile\r\n    # -- these paths are relative to the Python source, but when installed\r\n    # the scripts are in another directory.\r\n    if _PYTHON_BUILD:\r\n        vars['LDSHARED'] = vars['BLDSHARED']\r\n\r\ndef _init_non_posix(vars):\r\n    \"\"\"Initialize the module as appropriate for NT\"\"\"\r\n    # set basic install directories\r\n    vars['LIBDEST'] = get_path('stdlib')\r\n    vars['BINLIBDEST'] = get_path('platstdlib')\r\n    vars['INCLUDEPY'] = get_path('include')\r\n    vars['SO'] = '.pyd'\r\n    vars['EXE'] = '.exe'\r\n    vars['VERSION'] = _PY_VERSION_SHORT_NO_DOT\r\n    vars['BINDIR'] = os.path.dirname(_safe_realpath(sys.executable))\r\n\r\n#\r\n# public APIs\r\n#\r\n\r\n\r\ndef parse_config_h(fp, vars=None):\r\n    \"\"\"Parse a config.h-style file.\r\n\r\n    A dictionary containing name\/value pairs is returned.  If an\r\n    optional dictionary is passed in as the second argument, it is\r\n    used instead of a new dictionary.\r\n    \"\"\"\r\n    import re\r\n    if vars is None:\r\n        vars = {}\r\n    define_rx = re.compile(\"#define ([A-Z][A-Za-z0-9_]+) (.*)\\n\")\r\n    undef_rx = re.compile(\"\/[*] #undef ([A-Z][A-Za-z0-9_]+) [*]\/\\n\")\r\n\r\n    while True:\r\n        line = fp.readline()\r\n        if not line:\r\n            break\r\n        m = define_rx.match(line)\r\n        if m:\r\n            n, v = m.group(1, 2)\r\n            try: v = int(v)\r\n            except ValueError: pass\r\n            vars[n] = v\r\n        else:\r\n            m = undef_rx.match(line)\r\n            if m:\r\n                vars[m.group(1)] = 0\r\n    return vars\r\n\r\ndef get_config_h_filename():\r\n    \"\"\"Returns the path of pyconfig.h.\"\"\"\r\n    if _PYTHON_BUILD:\r\n        if os.name == \"nt\":\r\n            inc_dir = os.path.join(_PROJECT_BASE, \"PC\")\r\n        else:\r\n            inc_dir = _PROJECT_BASE\r\n    else:\r\n        inc_dir = get_path('platinclude')\r\n    return os.path.join(inc_dir, 'pyconfig.h')\r\n\r\ndef get_scheme_names():\r\n    \"\"\"Returns a tuple containing the schemes names.\"\"\"\r\n    schemes = _INSTALL_SCHEMES.keys()\r\n    schemes.sort()\r\n    return tuple(schemes)\r\n\r\ndef get_path_names():\r\n    \"\"\"Returns a tuple containing the paths names.\"\"\"\r\n    return _SCHEME_KEYS\r\n\r\ndef get_paths(scheme=_get_default_scheme(), vars=None, expand=True):\r\n    \"\"\"Returns a mapping containing an install scheme.\r\n\r\n    ``scheme`` is the install scheme name. If not provided, it will\r\n    return the default scheme for the current platform.\r\n    \"\"\"\r\n    if expand:\r\n        return _expand_vars(scheme, vars)\r\n    else:\r\n        return _INSTALL_SCHEMES[scheme]\r\n\r\ndef get_path(name, scheme=_get_default_scheme(), vars=None, expand=True):\r\n    \"\"\"Returns a path corresponding to the scheme.\r\n\r\n    ``scheme`` is the install scheme name.\r\n    \"\"\"\r\n    return get_paths(scheme, vars, expand)[name]\r\n\r\ndef get_config_vars(*args):\r\n    \"\"\"With no arguments, return a dictionary of all configuration\r\n    variables relevant for the current platform.\r\n\r\n    On Unix, this means every variable defined in Python's installed Makefile;\r\n    On Windows and Mac OS it's a much smaller set.\r\n\r\n    With arguments, return a list of values that result from looking up\r\n    each argument in the configuration variable dictionary.\r\n    \"\"\"\r\n    import re\r\n    global _CONFIG_VARS\r\n    if _CONFIG_VARS is None:\r\n        _CONFIG_VARS = {}\r\n        # Normalized versions of prefix and exec_prefix are handy to have;\r\n        # in fact, these are the standard versions used most places in the\r\n        # Distutils.\r\n        _CONFIG_VARS['prefix'] = _PREFIX\r\n        _CONFIG_VARS['exec_prefix'] = _EXEC_PREFIX\r\n        _CONFIG_VARS['py_version'] = _PY_VERSION\r\n        _CONFIG_VARS['py_version_short'] = _PY_VERSION_SHORT\r\n        _CONFIG_VARS['py_version_nodot'] = _PY_VERSION[0] + _PY_VERSION[2]\r\n        _CONFIG_VARS['base'] = _PREFIX\r\n        _CONFIG_VARS['platbase'] = _EXEC_PREFIX\r\n        _CONFIG_VARS['projectbase'] = _PROJECT_BASE\r\n\r\n        if os.name in ('nt', 'os2') or sys.platform == 'cli':\r\n            _init_non_posix(_CONFIG_VARS)\r\n        elif os.name == 'posix':\r\n            _init_posix(_CONFIG_VARS)\r\n\r\n        # Setting 'userbase' is done below the call to the\r\n        # init function to enable using 'get_config_var' in\r\n        # the init-function.\r\n        _CONFIG_VARS['userbase'] = _getuserbase()\r\n\r\n        if 'srcdir' not in _CONFIG_VARS:\r\n            _CONFIG_VARS['srcdir'] = _PROJECT_BASE\r\n\r\n        # Convert srcdir into an absolute path if it appears necessary.\r\n        # Normally it is relative to the build directory.  However, during\r\n        # testing, for example, we might be running a non-installed python\r\n        # from a different directory.\r\n        if _PYTHON_BUILD and os.name == \"posix\":\r\n            base = _PROJECT_BASE\r\n            try:\r\n                cwd = os.getcwd()\r\n            except OSError:\r\n                cwd = None\r\n            if (not os.path.isabs(_CONFIG_VARS['srcdir']) and\r\n                base != cwd):\r\n                # srcdir is relative and we are not in the same directory\r\n                # as the executable. Assume executable is in the build\r\n                # directory and make srcdir absolute.\r\n                srcdir = os.path.join(base, _CONFIG_VARS['srcdir'])\r\n                _CONFIG_VARS['srcdir'] = os.path.normpath(srcdir)\r\n\r\n        if sys.platform == 'darwin':\r\n            kernel_version = os.uname()[2] # Kernel version (8.4.3)\r\n            major_version = int(kernel_version.split('.')[0])\r\n\r\n            if major_version < 8:\r\n                # On Mac OS X before 10.4, check if -arch and -isysroot\r\n                # are in CFLAGS or LDFLAGS and remove them if they are.\r\n                # This is needed when building extensions on a 10.3 system\r\n                # using a universal build of python.\r\n                for key in ('LDFLAGS', 'BASECFLAGS',\r\n                        # a number of derived variables. These need to be\r\n                        # patched up as well.\r\n                        'CFLAGS', 'PY_CFLAGS', 'BLDSHARED'):\r\n                    flags = _CONFIG_VARS[key]\r\n                    flags = re.sub('-arch\\s+\\w+\\s', ' ', flags)\r\n                    flags = re.sub('-isysroot [^ \\t]*', ' ', flags)\r\n                    _CONFIG_VARS[key] = flags\r\n            else:\r\n                # Allow the user to override the architecture flags using\r\n                # an environment variable.\r\n                # NOTE: This name was introduced by Apple in OSX 10.5 and\r\n                # is used by several scripting languages distributed with\r\n                # that OS release.\r\n                if 'ARCHFLAGS' in os.environ:\r\n                    arch = os.environ['ARCHFLAGS']\r\n                    for key in ('LDFLAGS', 'BASECFLAGS',\r\n                        # a number of derived variables. These need to be\r\n                        # patched up as well.\r\n                        'CFLAGS', 'PY_CFLAGS', 'BLDSHARED'):\r\n\r\n                        flags = _CONFIG_VARS[key]\r\n                        flags = re.sub('-arch\\s+\\w+\\s', ' ', flags)\r\n                        flags = flags + ' ' + arch\r\n                        _CONFIG_VARS[key] = flags\r\n\r\n                # If we're on OSX 10.5 or later and the user tries to\r\n                # compiles an extension using an SDK that is not present\r\n                # on the current machine it is better to not use an SDK\r\n                # than to fail.\r\n                #\r\n                # The major usecase for this is users using a Python.org\r\n                # binary installer  on OSX 10.6: that installer uses\r\n                # the 10.4u SDK, but that SDK is not installed by default\r\n                # when you install Xcode.\r\n                #\r\n                CFLAGS = _CONFIG_VARS.get('CFLAGS', '')\r\n                m = re.search('-isysroot\\s+(\\S+)', CFLAGS)\r\n                if m is not None:\r\n                    sdk = m.group(1)\r\n                    if not os.path.exists(sdk):\r\n                        for key in ('LDFLAGS', 'BASECFLAGS',\r\n                             # a number of derived variables. These need to be\r\n                             # patched up as well.\r\n                            'CFLAGS', 'PY_CFLAGS', 'BLDSHARED'):\r\n\r\n                            flags = _CONFIG_VARS[key]\r\n                            flags = re.sub('-isysroot\\s+\\S+(\\s|$)', ' ', flags)\r\n                            _CONFIG_VARS[key] = flags\r\n\r\n    if args:\r\n        vals = []\r\n        for name in args:\r\n            vals.append(_CONFIG_VARS.get(name))\r\n        return vals\r\n    else:\r\n        return _CONFIG_VARS\r\n\r\ndef get_config_var(name):\r\n    \"\"\"Return the value of a single variable using the dictionary returned by\r\n    'get_config_vars()'.\r\n\r\n    Equivalent to get_config_vars().get(name)\r\n    \"\"\"\r\n    return get_config_vars().get(name)\r\n\r\ndef get_platform():\r\n    \"\"\"Return a string that identifies the current platform.\r\n\r\n    This is used mainly to distinguish platform-specific build directories and\r\n    platform-specific built distributions.  Typically includes the OS name\r\n    and version and the architecture (as supplied by 'os.uname()'),\r\n    although the exact information included depends on the OS; eg. for IRIX\r\n    the architecture isn't particularly important (IRIX only runs on SGI\r\n    hardware), but for Linux the kernel version isn't particularly\r\n    important.\r\n\r\n    Examples of returned values:\r\n       linux-i586\r\n       linux-alpha (?)\r\n       solaris-2.6-sun4u\r\n       irix-5.3\r\n       irix64-6.2\r\n\r\n    Windows will return one of:\r\n       win-amd64 (64bit Windows on AMD64 (aka x86_64, Intel64, EM64T, etc)\r\n       win-ia64 (64bit Windows on Itanium)\r\n       win32 (all others - specifically, sys.platform is returned)\r\n\r\n    For other non-POSIX platforms, currently just returns 'sys.platform'.\r\n    \"\"\"\r\n    import re\r\n    if os.name == 'nt':\r\n        # sniff sys.version for architecture.\r\n        prefix = \" bit (\"\r\n        i = sys.version.find(prefix)\r\n        if i == -1:\r\n            return sys.platform\r\n        j = sys.version.find(\")\", i)\r\n        look = sys.version[i+len(prefix):j].lower()\r\n        if look == 'amd64':\r\n            return 'win-amd64'\r\n        if look == 'itanium':\r\n            return 'win-ia64'\r\n        return sys.platform\r\n\r\n    if os.name != \"posix\" or not hasattr(os, 'uname'):\r\n        # XXX what about the architecture? NT is Intel or Alpha,\r\n        # Mac OS is M68k or PPC, etc.\r\n        return sys.platform\r\n\r\n    # Try to distinguish various flavours of Unix\r\n    osname, host, release, version, machine = os.uname()\r\n\r\n    # Convert the OS name to lowercase, remove '\/' characters\r\n    # (to accommodate BSD\/OS), and translate spaces (for \"Power Macintosh\")\r\n    osname = osname.lower().replace('\/', '')\r\n    machine = machine.replace(' ', '_')\r\n    machine = machine.replace('\/', '-')\r\n\r\n    if osname[:5] == \"linux\":\r\n        # At least on Linux\/Intel, 'machine' is the processor --\r\n        # i386, etc.\r\n        # XXX what about Alpha, SPARC, etc?\r\n        return  \"%s-%s\" % (osname, machine)\r\n    elif osname[:5] == \"sunos\":\r\n        if release[0] >= \"5\":           # SunOS 5 == Solaris 2\r\n            osname = \"solaris\"\r\n            release = \"%d.%s\" % (int(release[0]) - 3, release[2:])\r\n        # fall through to standard osname-release-machine representation\r\n    elif osname[:4] == \"irix\":              # could be \"irix64\"!\r\n        return \"%s-%s\" % (osname, release)\r\n    elif osname[:3] == \"aix\":\r\n        return \"%s-%s.%s\" % (osname, version, release)\r\n    elif osname[:6] == \"cygwin\":\r\n        osname = \"cygwin\"\r\n        rel_re = re.compile (r'[\\d.]+')\r\n        m = rel_re.match(release)\r\n        if m:\r\n            release = m.group()\r\n    elif osname[:6] == \"darwin\":\r\n        #\r\n        # For our purposes, we'll assume that the system version from\r\n        # distutils' perspective is what MACOSX_DEPLOYMENT_TARGET is set\r\n        # to. This makes the compatibility story a bit more sane because the\r\n        # machine is going to compile and link as if it were\r\n        # MACOSX_DEPLOYMENT_TARGET.\r\n        cfgvars = get_config_vars()\r\n        macver = cfgvars.get('MACOSX_DEPLOYMENT_TARGET')\r\n\r\n        if 1:\r\n            # Always calculate the release of the running machine,\r\n            # needed to determine if we can build fat binaries or not.\r\n\r\n            macrelease = macver\r\n            # Get the system version. Reading this plist is a documented\r\n            # way to get the system version (see the documentation for\r\n            # the Gestalt Manager)\r\n            try:\r\n                f = open('\/System\/Library\/CoreServices\/SystemVersion.plist')\r\n            except IOError:\r\n                # We're on a plain darwin box, fall back to the default\r\n                # behaviour.\r\n                pass\r\n            else:\r\n                try:\r\n                    m = re.search(\r\n                            r'<key>ProductUserVisibleVersion<\/key>\\s*' +\r\n                            r'<string>(.*?)<\/string>', f.read())\r\n                    if m is not None:\r\n                        macrelease = '.'.join(m.group(1).split('.')[:2])\r\n                    # else: fall back to the default behaviour\r\n                finally:\r\n                    f.close()\r\n\r\n        if not macver:\r\n            macver = macrelease\r\n\r\n        if macver:\r\n            release = macver\r\n            osname = \"macosx\"\r\n\r\n            if (macrelease + '.') >= '10.4.' and \\\r\n                    '-arch' in get_config_vars().get('CFLAGS', '').strip():\r\n                # The universal build will build fat binaries, but not on\r\n                # systems before 10.4\r\n                #\r\n                # Try to detect 4-way universal builds, those have machine-type\r\n                # 'universal' instead of 'fat'.\r\n\r\n                machine = 'fat'\r\n                cflags = get_config_vars().get('CFLAGS')\r\n\r\n                archs = re.findall('-arch\\s+(\\S+)', cflags)\r\n                archs = tuple(sorted(set(archs)))\r\n\r\n                if len(archs) == 1:\r\n                    machine = archs[0]\r\n                elif archs == ('i386', 'ppc'):\r\n                    machine = 'fat'\r\n                elif archs == ('i386', 'x86_64'):\r\n                    machine = 'intel'\r\n                elif archs == ('i386', 'ppc', 'x86_64'):\r\n                    machine = 'fat3'\r\n                elif archs == ('ppc64', 'x86_64'):\r\n                    machine = 'fat64'\r\n                elif archs == ('i386', 'ppc', 'ppc64', 'x86_64'):\r\n                    machine = 'universal'\r\n                else:\r\n                    raise ValueError(\r\n                       \"Don't know machine value for archs=%r\"%(archs,))\r\n\r\n            elif machine == 'i386':\r\n                # On OSX the machine type returned by uname is always the\r\n                # 32-bit variant, even if the executable architecture is\r\n                # the 64-bit variant\r\n                if sys.maxint >= 2**32:\r\n                    machine = 'x86_64'\r\n\r\n            elif machine in ('PowerPC', 'Power_Macintosh'):\r\n                # Pick a sane name for the PPC architecture.\r\n                # See 'i386' case\r\n                if sys.maxint >= 2**32:\r\n                    machine = 'ppc64'\r\n                else:\r\n                    machine = 'ppc'\r\n\r\n    return \"%s-%s-%s\" % (osname, release, machine)\r\n\r\n\r\ndef get_python_version():\r\n    return _PY_VERSION_SHORT\r\n","license":"gpl-3.0","hash":4023357260781964945,"line_mean":35.709724238,"line_max":79,"alpha_frac":0.5241320914,"autogenerated":false}
{"repo_name":"marcoantoniooliveira\/labweb","path":"oscar\/lib\/python2.7\/site-packages\/debug_toolbar\/panels\/sql\/forms.py","copies":"36","size":"2784","content":"from __future__ import absolute_import, unicode_literals\n\nimport json\nimport hashlib\n\nfrom django import forms\nfrom django.conf import settings\nfrom django.db import connections\nfrom django.utils.encoding import force_text\nfrom django.utils.functional import cached_property\nfrom django.core.exceptions import ValidationError\n\nfrom debug_toolbar.panels.sql.utils import reformat_sql\n\n\nclass SQLSelectForm(forms.Form):\n    \"\"\"\n    Validate params\n\n        sql: The sql statement with interpolated params\n        raw_sql: The sql statement with placeholders\n        params: JSON encoded parameter values\n        duration: time for SQL to execute passed in from toolbar just for redisplay\n        hash: the hash of (secret + sql + params) for tamper checking\n    \"\"\"\n    sql = forms.CharField()\n    raw_sql = forms.CharField()\n    params = forms.CharField()\n    alias = forms.CharField(required=False, initial='default')\n    duration = forms.FloatField()\n    hash = forms.CharField()\n\n    def __init__(self, *args, **kwargs):\n        initial = kwargs.get('initial', None)\n\n        if initial is not None:\n            initial['hash'] = self.make_hash(initial)\n\n        super(SQLSelectForm, self).__init__(*args, **kwargs)\n\n        for name in self.fields:\n            self.fields[name].widget = forms.HiddenInput()\n\n    def clean_raw_sql(self):\n        value = self.cleaned_data['raw_sql']\n\n        if not value.lower().strip().startswith('select'):\n            raise ValidationError(\"Only 'select' queries are allowed.\")\n\n        return value\n\n    def clean_params(self):\n        value = self.cleaned_data['params']\n\n        try:\n            return json.loads(value)\n        except ValueError:\n            raise ValidationError('Is not valid JSON')\n\n    def clean_alias(self):\n        value = self.cleaned_data['alias']\n\n        if value not in connections:\n            raise ValidationError(\"Database alias '%s' not found\" % value)\n\n        return value\n\n    def clean_hash(self):\n        hash = self.cleaned_data['hash']\n\n        if hash != self.make_hash(self.data):\n            raise ValidationError('Tamper alert')\n\n        return hash\n\n    def reformat_sql(self):\n        return reformat_sql(self.cleaned_data['sql'])\n\n    def make_hash(self, data):\n        items = [settings.SECRET_KEY, data['sql'], data['params']]\n        # Replace lines endings with spaces to preserve the hash value\n        # even when the browser normalizes \\r\\n to \\n in inputs.\n        items = [' '.join(force_text(item).splitlines()) for item in items]\n        return hashlib.sha1(''.join(items).encode('utf-8')).hexdigest()\n\n    @property\n    def connection(self):\n        return connections[self.cleaned_data['alias']]\n\n    @cached_property\n    def cursor(self):\n        return self.connection.cursor()\n","license":"bsd-3-clause","hash":-2574129591306319230,"line_mean":29.2608695652,"line_max":83,"alpha_frac":0.6472701149,"autogenerated":false}
{"repo_name":"2asoft\/tdesktop","path":"Telegram\/build\/release.py","copies":"4","size":"7388","content":"import os, sys, requests, pprint, re, json\nfrom uritemplate import URITemplate, expand\nfrom subprocess import call\n\nchangelog_file = '..\/..\/changelog.txt'\ntoken_file = '..\/..\/..\/TelegramPrivate\/github-releases-token.txt'\n\nversion = ''\ncommit = ''\nfor arg in sys.argv:\n  if re.match(r'\\d+\\.\\d+', arg):\n    version = arg\n  elif re.match(r'^[a-f0-9]{40}$', arg):\n    commit = arg\n\n# thanks http:\/\/stackoverflow.com\/questions\/13909900\/progress-of-python-requests-post\nclass upload_in_chunks(object):\n  def __init__(self, filename, chunksize=1 << 13):\n    self.filename = filename\n    self.chunksize = chunksize\n    self.totalsize = os.path.getsize(filename)\n    self.readsofar = 0\n\n  def __iter__(self):\n    with open(self.filename, 'rb') as file:\n      while True:\n        data = file.read(self.chunksize)\n        if not data:\n          sys.stderr.write(\"\\n\")\n          break\n        self.readsofar += len(data)\n        percent = self.readsofar * 1e2 \/ self.totalsize\n        sys.stderr.write(\"\\r{percent:3.0f}%\".format(percent=percent))\n        yield data\n\n  def __len__(self):\n    return self.totalsize\n\nclass IterableToFileAdapter(object):\n  def __init__(self, iterable):\n    self.iterator = iter(iterable)\n    self.length = len(iterable)\n\n  def read(self, size=-1): # TBD: add buffer for `len(data) > size` case\n    return next(self.iterator, b'')\n\n  def __len__(self):\n    return self.length\n\ndef checkResponseCode(result, right_code):\n  if (result.status_code != right_code):\n    print('Wrong result code: ' + str(result.status_code) + ', should be ' + str(right_code))\n    sys.exit(1)\n\npp = pprint.PrettyPrinter(indent=2)\nurl = 'https:\/\/api.github.com\/'\n\nversion_parts = version.split('.')\n\nstable = 1\nalpha = 0\ndev = 0\n\nif len(version_parts) < 2:\n  print('Error: expected at least major version ' + version)\n  sys.exit(1)\nif len(version_parts) > 4:\n  print('Error: bad version passed ' + version)\n  sys.exit(1)\nversion_major = version_parts[0] + '.' + version_parts[1]\nif len(version_parts) == 2:\n  version = version_major + '.0'\n  version_full = version\nelse:\n  version = version_major + '.' + version_parts[2]\n  version_full = version\n  if len(version_parts) == 4:\n    if version_parts[3] == 'dev':\n      dev = 1\n      stable = 0\n      version_full = version + '.dev'\n    elif version_parts[3] == 'alpha':\n      alpha = 1\n      stable = 0\n      version_full = version + '.alpha'\n    else:\n      print('Error: unexpected version part ' + version_parts[3])\n      sys.exit(1)\n\naccess_token = ''\nif os.path.isfile(token_file):\n  with open(token_file) as f:\n    for line in f:\n      access_token = line.replace('\\n', '')\n\nif access_token == '':\n  print('Access token not found!')\n  sys.exit(1)\n\nprint('Version: ' + version_full);\nlocal_folder = '\/Volumes\/Storage\/backup\/' + version_major + '\/' + version_full\n\nif stable == 1:\n  if os.path.isdir(local_folder + '.dev'):\n    dev = 1\n    stable = 0\n    version_full = version + '.dev'\n    local_folder = local_folder + '.dev'\n  elif os.path.isdir(local_folder + '.alpha'):\n    alpha = 1\n    stable = 0\n    version_full = version + '.alpha'\n    local_folder = local_folder + '.alpha'\n\nif not os.path.isdir(local_folder):\n  print('Storage path not found!')\n  sys.exit(1)\n\nlocal_folder = local_folder + '\/'\n\nfiles = []\nfiles.append({\n  'local': 'tsetup.' + version_full + '.exe',\n  'remote': 'tsetup.' + version_full + '.exe',\n  'backup_folder': 'tsetup',\n  'mime': 'application\/octet-stream',\n  'label': 'Windows: Installer',\n})\nfiles.append({\n  'local': 'tportable.' + version_full + '.zip',\n  'remote': 'tportable.' + version_full + '.zip',\n  'backup_folder': 'tsetup',\n  'mime': 'application\/zip',\n  'label': 'Windows: Portable',\n})\nfiles.append({\n  'local': 'tsetup.' + version_full + '.dmg',\n  'remote': 'tsetup.' + version_full + '.dmg',\n  'backup_folder': 'tmac',\n  'mime': 'application\/octet-stream',\n  'label': 'macOS and OS X 10.8+: Installer',\n})\nfiles.append({\n  'local': 'tsetup32.' + version_full + '.dmg',\n  'remote': 'tsetup32.' + version_full + '.dmg',\n  'backup_folder': 'tmac32',\n  'mime': 'application\/octet-stream',\n  'label': 'OS X 10.6 and 10.7: Installer',\n})\nfiles.append({\n  'local': 'tsetup.' + version_full + '.tar.xz',\n  'remote': 'tsetup.' + version_full + '.tar.xz',\n  'backup_folder': 'tlinux',\n  'mime': 'application\/octet-stream',\n  'label': 'Linux 64 bit: Binary',\n})\nfiles.append({\n  'local': 'tsetup32.' + version_full + '.tar.xz',\n  'remote': 'tsetup32.' + version_full + '.tar.xz',\n  'backup_folder': 'tlinux32',\n  'mime': 'application\/octet-stream',\n  'label': 'Linux 32 bit: Binary',\n})\n\nr = requests.get(url + 'repos\/telegramdesktop\/tdesktop\/releases\/tags\/v' + version)\nif r.status_code == 404:\n  print('Release not found, creating.')\n  if commit == '':\n    print('Error: specify the commit.')\n    sys.exit(1)\n  if not os.path.isfile(changelog_file):\n    print('Error: Changelog file not found.')\n    sys.exit(1)\n  changelog = ''\n  started = 0\n  with open(changelog_file) as f:\n    for line in f:\n      if started == 1:\n        if re.match(r'^\\d+\\.\\d+', line):\n          break;\n        if re.match(r'^\\s+$', line):\n          continue\n        changelog += line\n      else:\n        if re.match(r'^\\d+\\.\\d+', line):\n          if line[0:len(version) + 1] == version + ' ':\n            started = 1\n          elif line[0:len(version_major) + 1] == version_major + ' ':\n            if version_major + '.0' == version:\n              started = 1\n  if started != 1:\n    print('Error: Changelog not found.')\n    sys.exit(1)\n\n  changelog = changelog.strip()\n  print('Changelog: ');\n  print(changelog);\n\n  r = requests.post(url + 'repos\/telegramdesktop\/tdesktop\/releases', headers={'Authorization': 'token ' + access_token}, data=json.dumps({\n    'tag_name': 'v' + version,\n    'target_commitish': commit,\n    'name': 'v ' + version,\n    'body': changelog,\n    'prerelease': (dev == 1 or alpha == 1),\n  }))\n  checkResponseCode(r, 201)\n\nr = requests.get(url + 'repos\/telegramdesktop\/tdesktop\/releases\/tags\/v' + version)\ncheckResponseCode(r, 200);\n\nrelease_data = r.json()\n#pp.pprint(release_data)\n\nrelease_id = release_data['id']\nprint('Release ID: ' + str(release_id))\n\nr = requests.get(url + 'repos\/telegramdesktop\/tdesktop\/releases\/' + str(release_id) + '\/assets');\ncheckResponseCode(r, 200);\n\nassets = release_data['assets']\nfor asset in assets:\n  name = asset['name']\n  found = 0\n  for file in files:\n    if file['remote'] == name:\n      print('Already uploaded: ' + name)\n      file['already'] = 1\n      found = 1\n      break\n  if found == 0:\n    print('Warning: strange asset: ' + name)\n\nfor file in files:\n  if 'already' in file:\n    continue\n  file_path = local_folder + file['backup_folder'] + '\/' + file['local']\n  if not os.path.isfile(file_path):\n    print('Warning: file not found ' + file['local'])\n    continue\n\n  upload_url = expand(release_data['upload_url'], {'name': file['remote'], 'label': file['label']}) + '&access_token=' + access_token;\n\n  content = upload_in_chunks(file_path, 10)\n\n  print('Uploading: ' + file['remote'] + ' (' + str(round(len(content) \/ 10000) \/ 100.) + ' MB)')\n  r = requests.post(upload_url, headers={\"Content-Type\": file['mime']}, data=IterableToFileAdapter(content))\n\n  checkResponseCode(r, 201)\n\n  print('Success! Removing.')\n  return_code = call([\"rm\", file_path])\n  if return_code != 0:\n    print('Bad rm code: ' + str(return_code))\n    sys.exit(1)\n\nsys.exit()\n","license":"gpl-3.0","hash":-4684818419198945105,"line_mean":27.859375,"line_max":138,"alpha_frac":0.6147807255,"autogenerated":false}
{"repo_name":"UASLab\/ImageAnalysis","path":"video\/hud.py","copies":"1","size":"43557","content":"import datetime\nimport ephem                    # dnf install python3-pyephem\nimport math\nimport navpy\nimport numpy as np\n\n# find our custom built opencv first\nimport sys\nsys.path.insert(0, \"\/usr\/local\/opencv3\/lib\/python2.7\/site-packages\/\")\nimport cv2\n\nsys.path.append('..\/scripts')\nfrom lib import transformations\n\nimport airports\n\n# helpful constants\nd2r = math.pi \/ 180.0\nr2d = 180.0 \/ math.pi\nmps2kt = 1.94384\nkt2mps = 1 \/ mps2kt\nft2m = 0.3048\nm2ft = 1 \/ ft2m\n\n# color definitions\ngreen2 = (0, 238, 0)\nred2 = (0, 0, 238)\nmedium_orchid = (186, 85, 211)\nyellow = (50, 255, 255)\nwhite = (255, 255, 255)\n\nclass HUD:\n    def __init__(self, K):\n        self.K = K\n        self.PROJ = None\n        self.cam_yaw = 0.0\n        self.cam_pitch = 0.0\n        self.cam_roll = 0.0\n        self.line_width = 1\n        self.color = green2\n        self.font = cv2.FONT_HERSHEY_SIMPLEX\n        self.font_size = 0.6\n        self.render_w = 0\n        self.render_h = 0\n        self.lla = [0.0, 0.0, 0.0]\n        self.time = 0\n        self.unixtime = 0\n        self.ned = [0.0, 0.0, 0.0]\n        self.ned_history = []\n        self.ned_last_time = 0.0\n        self.grid = []\n        self.ref = None\n        self.vn = 0.0\n        self.ve = 0.0\n        self.vd = 0.0\n        self.vel_filt = [0.0, 0.0, 0.0]\n        self.phi_rad = 0\n        self.the_rad = 0\n        self.psi_rad = 0\n        self.frame = None\n        self.airspeed_units = 'kt'\n        self.altitude_units = 'ft'\n        self.airspeed_kt = 0\n        self.altitude_m = 0\n        self.ground_m = 0\n        self.flight_mode = 'none'\n        self.ap_roll = 0\n        self.ap_pitch = 0\n        self.ap_hdg = 0\n        self.ap_speed = 0\n        self.ap_altitude_ft = 0\n        self.alpha_rad = 0\n        self.beta_rad = 0\n        self.filter_vn = 0.0\n        self.filter_ve = 0.0\n        self.tf_vel = 0.5\n        self.pilot_ail = 0.0\n        self.pilot_ele = 0.0\n        self.pilot_thr = 0.0\n        self.pilot_rud = 0.0\n        self.act_ail = 0.0\n        self.act_ele = 0.0\n        self.act_thr = 0.0\n        self.act_rud = 0.0\n        self.airports = []\n        self.features = []\n\n    def set_render_size(self, w, h):\n        self.render_w = w\n        self.render_h = h\n        \n    def set_line_width(self, line_width):\n        self.line_width = line_width\n        if self.line_width < 1:\n            self.line_width = 1\n\n    def set_color(self, color):\n        self.color = color\n        \n    def set_font_size(self, font_size):\n        self.font_size = font_size\n        if self.font_size < 0.4:\n            self.font_size = 0.4\n\n    def set_units(self, airspeed_units, altitude_units):\n        self.airspeed_units = airspeed_units\n        self.altitude_units = altitude_units\n        \n    def set_ned_ref(self, lat, lon):\n        self.ref = [ lat, lon, 0.0]\n        \n    def load_airports(self):\n        if self.ref:\n            self.airports = airports.load('apt.csv', self.ref, 30000)\n        else:\n            print('no ned ref set, unable to load nearby airports.')\n\n    def set_ground_m(self, ground_m):\n        self.ground_m = ground_m\n        \n    def update_frame(self, frame):\n        self.frame = frame\n\n    def update_lla(self, lla):\n        self.lla = lla\n\n    def update_time(self, time, unixtime):\n        self.time = time\n        self.unixtime = unixtime\n\n    def update_test_index(self, mode, index):\n        self.excite_mode = mode\n        self.test_index = index\n\n    def update_ned_history(self, ned, seconds):\n        if int(self.time) > self.ned_last_time:\n            self.ned_last_time = int(self.time)\n            self.ned_history.append(ned)\n            while len(self.ned_history) > seconds:\n                self.ned_history.pop(0)\n        \n    def update_ned(self, ned, seconds):\n        self.ned = ned[:]\n        self.update_ned_history(ned, seconds)\n\n    def update_features(self, feature_list):\n        self.features = feature_list\n        \n    def update_proj(self, PROJ):\n        self.PROJ = PROJ\n\n    def update_cam_att(self, cam_yaw, cam_pitch, cam_roll):\n        self.cam_yaw = cam_yaw\n        self.cam_pitch = cam_pitch\n        self.cam_roll = cam_roll\n        \n    def update_vel(self, vn, ve, vd):\n        self.vn = vn\n        self.ve = ve\n        self.vd = vd\n        \n    def update_att_rad(self, phi_rad, the_rad, psi_rad):\n        self.phi_rad = phi_rad\n        self.the_rad = the_rad\n        self.psi_rad = psi_rad\n\n    def update_airdata(self, airspeed_kt, altitude_m, alpha_rad=0, beta_rad=0):\n        self.airspeed_kt = airspeed_kt\n        self.altitude_m = altitude_m\n        self.alpha_rad = alpha_rad\n        self.beta_rad = beta_rad\n\n    def update_ap(self, flight_mode, ap_roll, ap_pitch, ap_hdg,\n                  ap_speed, ap_altitude_ft):\n        self.flight_mode = flight_mode\n        self.ap_roll = ap_roll\n        self.ap_pitch = ap_pitch\n        self.ap_hdg = ap_hdg\n        self.ap_speed = ap_speed\n        self.ap_altitude_ft = ap_altitude_ft\n\n    def update_pilot(self, aileron, elevator, throttle, rudder):\n        self.pilot_ail = aileron\n        self.pilot_ele = elevator\n        self.pilot_thr = throttle\n        self.pilot_rud = rudder\n        \n    def update_act(self, aileron, elevator, throttle, rudder):\n        self.act_ail = aileron\n        self.act_ele = elevator\n        self.act_thr = throttle\n        self.act_rud = rudder\n        \n    def compute_sun_moon_ned(self, lon_deg, lat_deg, alt_m, timestamp):\n        d = datetime.datetime.utcfromtimestamp(timestamp)\n        #d = datetime.datetime.utcnow()\n        ed = ephem.Date(d)\n        #print 'ephem time utc:', ed\n        #print 'localtime:', ephem.localtime(ed)\n\n        ownship = ephem.Observer()\n        ownship.lon = '%.8f' % lon_deg\n        ownship.lat = '%.8f' % lat_deg\n        ownship.elevation = alt_m\n        ownship.date = ed\n\n        sun = ephem.Sun(ownship)\n        moon = ephem.Moon(ownship)\n\n        sun_ned = [ math.cos(sun.az) * math.cos(sun.alt),\n                    math.sin(sun.az) * math.cos(sun.alt),\n                    -math.sin(sun.alt) ]\n        moon_ned = [ math.cos(moon.az) * math.cos(moon.alt),\n                     math.sin(moon.az) * math.cos(moon.alt),\n                     -math.sin(moon.alt) ]\n\n        return sun_ned, moon_ned\n\n    def project_point(self, ned):\n        uvh = self.K.dot( self.PROJ.dot( [ned[0], ned[1], ned[2], 1.0] ).T )\n        if uvh[2] > 0.2:\n            uvh \/= uvh[2]\n            uv = ( int(np.squeeze(uvh[0,0])), int(np.squeeze(uvh[1,0])) )\n            return uv\n        else:\n            return None\n\n    def draw_horizon(self):\n        divs = 10\n        pts = []\n        for i in range(divs + 1):\n            a = (float(i) * 360\/float(divs)) * d2r\n            n = math.cos(a)\n            e = math.sin(a)\n            d = 0.0\n            pts.append( [n, e, d] )\n\n        for i in range(divs):\n            p1 = pts[i]\n            p2 = pts[i+1]\n            uv1 = self.project_point( [self.ned[0] + p1[0],\n                                       self.ned[1] + p1[1],\n                                       self.ned[2] + p1[2]] )\n            uv2 = self.project_point( [self.ned[0] + p2[0],\n                                       self.ned[1] + p2[1],\n                                       self.ned[2] + p2[2]] )\n            if uv1 != None and uv2 != None:\n                cv2.line(self.frame, uv1, uv2, self.color, self.line_width,\n                         cv2.LINE_AA)\n\n    def ladder_helper(self, q0, a0, a1):\n        q1 = transformations.quaternion_from_euler(-a1*d2r, -a0*d2r, 0.0,\n                                                   'rzyx')\n        q = transformations.quaternion_multiply(q1, q0)\n        v = transformations.quaternion_transform(q, [1.0, 0.0, 0.0])\n        uv = self.project_point( [self.ned[0] + v[0],\n                                  self.ned[1] + v[1],\n                                  self.ned[2] + v[2]] )\n        return uv\n\n    def draw_pitch_ladder(self, beta_rad=0.0):\n        a1 = 2.0\n        a2 = 8.0\n        #slide_rad = self.psi_rad - beta_rad\n        slide_rad = self.psi_rad\n        q0 = transformations.quaternion_about_axis(slide_rad, [0.0, 0.0, -1.0])\n        for a0 in range(5,35,5):\n            # above horizon\n\n            # right horizontal\n            uv1 = self.ladder_helper(q0, a0, a1)\n            uv2 = self.ladder_helper(q0, a0, a2)\n            if uv1 != None and uv2 != None:\n                cv2.line(self.frame, uv1, uv2, self.color, self.line_width,\n                         cv2.LINE_AA)\n                du = uv2[0] - uv1[0]\n                dv = uv2[1] - uv1[1]\n                uv = ( uv1[0] + int(1.25*du), uv1[1] + int(1.25*dv) )\n                self.draw_label(\"%d\" % a0, uv, self.font_size, self.line_width)\n            # right tick\n            uv1 = self.ladder_helper(q0, a0-0.5, a1)\n            uv2 = self.ladder_helper(q0, a0, a1)\n            if uv1 != None and uv2 != None:\n                cv2.line(self.frame, uv1, uv2, self.color, self.line_width,\n                         cv2.LINE_AA)\n            # left horizontal\n            uv1 = self.ladder_helper(q0, a0, -a1)\n            uv2 = self.ladder_helper(q0, a0, -a2)\n            if uv1 != None and uv2 != None:\n                cv2.line(self.frame, uv1, uv2, self.color, self.line_width,\n                         cv2.LINE_AA)\n                du = uv2[0] - uv1[0]\n                dv = uv2[1] - uv1[1]\n                uv = ( uv1[0] + int(1.25*du), uv1[1] + int(1.25*dv) )\n                self.draw_label(\"%d\" % a0, uv, self.font_size, self.line_width)\n            # left tick\n            uv1 = self.ladder_helper(q0, a0-0.5, -a1)\n            uv2 = self.ladder_helper(q0, a0, -a1)\n            if uv1 != None and uv2 != None:\n                cv2.line(self.frame, uv1, uv2, self.color, self.line_width,\n                         cv2.LINE_AA)\n\n            # below horizon\n\n            # right horizontal\n            uv1 = self.ladder_helper(q0, -a0, a1)\n            uv2 = self.ladder_helper(q0, -a0-0.5, a2)\n            if uv1 != None and uv2 != None:\n                du = uv2[0] - uv1[0]\n                dv = uv2[1] - uv1[1]\n                for i in range(0,3):\n                    tmp1 = (uv1[0] + int(0.375*i*du), uv1[1] + int(0.375*i*dv))\n                    tmp2 = (tmp1[0] + int(0.25*du), tmp1[1] + int(0.25*dv))\n                    cv2.line(self.frame, tmp1, tmp2, self.color,\n                             self.line_width, cv2.LINE_AA)\n                uv = ( uv1[0] + int(1.25*du), uv1[1] + int(1.25*dv) )\n                self.draw_label(\"%d\" % a0, uv, self.font_size, self.line_width)\n\n            # right tick\n            uv1 = self.ladder_helper(q0, -a0+0.5, a1)\n            uv2 = self.ladder_helper(q0, -a0, a1)\n            if uv1 != None and uv2 != None:\n                cv2.line(self.frame, uv1, uv2, self.color, self.line_width,\n                         cv2.LINE_AA)\n            # left horizontal\n            uv1 = self.ladder_helper(q0, -a0, -a1)\n            uv2 = self.ladder_helper(q0, -a0-0.5, -a2)\n            if uv1 != None and uv2 != None:\n                du = uv2[0] - uv1[0]\n                dv = uv2[1] - uv1[1]\n                for i in range(0,3):\n                    tmp1 = (uv1[0] + int(0.375*i*du), uv1[1] + int(0.375*i*dv))\n                    tmp2 = (tmp1[0] + int(0.25*du), tmp1[1] + int(0.25*dv))\n                    cv2.line(self.frame, tmp1, tmp2, self.color,\n                             self.line_width, cv2.LINE_AA)\n                uv = ( uv1[0] + int(1.25*du), uv1[1] + int(1.25*dv) )\n                self.draw_label(\"%d\" % a0, uv, self.font_size, self.line_width)\n            # left tick\n            uv1 = self.ladder_helper(q0, -a0+0.5, -a1)\n            uv2 = self.ladder_helper(q0, -a0, -a1)\n            if uv1 != None and uv2 != None:\n                cv2.line(self.frame, uv1, uv2, self.color, self.line_width,\n                         cv2.LINE_AA)\n\n    def draw_alpha_beta_marker(self):\n        if self.alpha_rad == None or self.beta_rad == None:\n            return\n\n        q0 = transformations.quaternion_about_axis(self.psi_rad, [0.0, 0.0, -1.0])\n        a0 = self.the_rad * r2d\n        center = self.ladder_helper(q0, a0, 0.0)\n        alpha = self.alpha_rad * r2d\n        beta = self.beta_rad * r2d\n        tmp = self.ladder_helper(q0, a0-alpha, beta)\n        if tmp != None:\n            uv = self.rotate_pt(tmp, center, self.phi_rad)\n            if uv != None:\n                r1 = int(round(self.render_h \/ 60))\n                r2 = int(round(self.render_h \/ 30))\n                uv1 = (uv[0]+r1, uv[1])\n                uv2 = (uv[0]+r2, uv[1])\n                uv3 = (uv[0]-r1, uv[1])\n                uv4 = (uv[0]-r2, uv[1])\n                uv5 = (uv[0], uv[1]-r1)\n                uv6 = (uv[0], uv[1]-r2)\n                cv2.circle(self.frame, uv, r1, self.color, self.line_width,\n                           cv2.LINE_AA)\n                cv2.line(self.frame, uv1, uv2, self.color, self.line_width,\n                         cv2.LINE_AA)\n                cv2.line(self.frame, uv3, uv4, self.color, self.line_width,\n                         cv2.LINE_AA)\n                cv2.line(self.frame, uv5, uv6, self.color, self.line_width,\n                         cv2.LINE_AA)\n\n    def rotate_pt(self, p, center, a):\n        #print p, center\n        x = math.cos(a) * (p[0]-center[0]) - math.sin(a) * (p[1]-center[1]) + center[0]\n\n        y = math.sin(a) * (p[0]-center[0]) + math.cos(a) * (p[1]-center[1]) + center[1]\n        return (int(x), int(y))\n\n    def draw_vbars(self):\n        color = medium_orchid\n        size = self.line_width\n        a1 = 10.0\n        a2 = 1.5\n        a3 = 3.0\n        q0 = transformations.quaternion_about_axis(self.psi_rad,\n                                                   [0.0, 0.0, -1.0])\n        a0 = self.ap_pitch\n\n        # rotation point (about nose)\n        rot = self.ladder_helper(q0, self.the_rad*r2d, 0.0)\n        if rot == None:\n            return\n        \n        # center point\n        tmp1 = self.ladder_helper(q0, a0, 0.0)\n        if tmp1 == None:\n            return\n        \n        center = self.rotate_pt(tmp1, rot, self.ap_roll*d2r)\n\n        # right vbar\n        tmp1 = self.ladder_helper(q0, a0-a3, a1)\n        tmp2 = self.ladder_helper(q0, a0-a3, a1+a3)\n        tmp3 = self.ladder_helper(q0, a0-a2, a1+a3)\n        if tmp1 != None and tmp2 != None and tmp3 != None:\n            uv1 = self.rotate_pt(tmp1, rot, self.ap_roll*d2r)\n            uv2 = self.rotate_pt(tmp2, rot, self.ap_roll*d2r)\n            uv3 = self.rotate_pt(tmp3, rot, self.ap_roll*d2r)\n            if uv1 != None and uv2 != None and uv3 != None:\n                cv2.line(self.frame, center, uv1, color, self.line_width, cv2.LINE_AA)\n                cv2.line(self.frame, center, uv3, color, self.line_width, cv2.LINE_AA)\n                cv2.line(self.frame, uv1, uv2, color, self.line_width, cv2.LINE_AA)\n                cv2.line(self.frame, uv1, uv3, color, self.line_width, cv2.LINE_AA)\n                cv2.line(self.frame, uv2, uv3, color, self.line_width, cv2.LINE_AA)\n        # left vbar\n        tmp1 = self.ladder_helper(q0, a0-a3, -a1)\n        tmp2 = self.ladder_helper(q0, a0-a3, -a1-a3)\n        tmp3 = self.ladder_helper(q0, a0-a2, -a1-a3)\n        if tmp1 != None and tmp2 != None and tmp3 != None:\n            uv1 = self.rotate_pt(tmp1, rot, self.ap_roll*d2r)\n            uv2 = self.rotate_pt(tmp2, rot, self.ap_roll*d2r)\n            uv3 = self.rotate_pt(tmp3, rot, self.ap_roll*d2r)\n            if uv1 != None and uv2 != None and uv3 != None:\n                cv2.line(self.frame, center, uv1, color, self.line_width, cv2.LINE_AA)\n                cv2.line(self.frame, center, uv3, color, self.line_width, cv2.LINE_AA)\n                cv2.line(self.frame, uv1, uv2, color, self.line_width, cv2.LINE_AA)\n                cv2.line(self.frame, uv1, uv3, color, self.line_width, cv2.LINE_AA)\n                cv2.line(self.frame, uv2, uv3, color, self.line_width, cv2.LINE_AA)\n\n    def draw_heading_bug(self):\n        color = medium_orchid\n        size = 2\n        a = math.atan2(self.ve, self.vn)\n        q0 = transformations.quaternion_about_axis(self.ap_hdg*d2r,\n                                                   [0.0, 0.0, -1.0])\n        center = self.ladder_helper(q0, 0, 0)\n        pts = []\n        pts.append( self.ladder_helper(q0, 0, 2.0) )\n        pts.append( self.ladder_helper(q0, 0.0, -2.0) )\n        pts.append( self.ladder_helper(q0, 1.5, -2.0) )\n        pts.append( self.ladder_helper(q0, 1.5, -1.0) )\n        pts.append( center )\n        pts.append( self.ladder_helper(q0, 1.5, 1.0) )\n        pts.append( self.ladder_helper(q0, 1.5, 2.0) )\n        for i, p in enumerate(pts):\n            if p == None or center == None:\n                return\n        cv2.line(self.frame, pts[0], pts[1], color, self.line_width, cv2.LINE_AA)\n        cv2.line(self.frame, pts[1], pts[2], color, self.line_width, cv2.LINE_AA)\n        cv2.line(self.frame, pts[2], pts[3], color, self.line_width, cv2.LINE_AA)\n        cv2.line(self.frame, pts[3], pts[4], color, self.line_width, cv2.LINE_AA)\n        cv2.line(self.frame, pts[4], pts[5], color, self.line_width, cv2.LINE_AA)\n        cv2.line(self.frame, pts[5], pts[6], color, self.line_width, cv2.LINE_AA)\n        cv2.line(self.frame, pts[6], pts[0], color, self.line_width, cv2.LINE_AA)\n\n    def draw_bird(self):\n        color = yellow\n        size = 2\n        a1 = 10.0\n        a2 = 3.0\n        q0 = transformations.quaternion_about_axis(self.psi_rad, [0.0, 0.0, -1.0])\n        a0 = self.the_rad*r2d\n        # print 'pitch:', a0, 'ap:', self.ap_pitch\n        \n        # center point\n        center = self.ladder_helper(q0, a0, 0.0)\n        if center == None:\n            return\n\n        # right vbar\n        tmp1 = self.ladder_helper(q0, a0-a2, a1)\n        tmp2 = self.ladder_helper(q0, a0-a2, a1-a2)\n        if tmp1 != None and tmp2 != None:\n            uv1 = self.rotate_pt(tmp1, center, self.phi_rad)\n            uv2 = self.rotate_pt(tmp2, center, self.phi_rad)\n            if uv1 != None and uv2 != None:\n                cv2.line(self.frame, center, uv1, color, self.line_width, cv2.LINE_AA)\n                cv2.line(self.frame, center, uv2, color, self.line_width, cv2.LINE_AA)\n                cv2.line(self.frame, uv1, uv2, color, self.line_width, cv2.LINE_AA)\n        # left vbar\n        tmp1 = self.ladder_helper(q0, a0-a2, -a1)\n        tmp2 = self.ladder_helper(q0, a0-a2, -a1+a2)\n        if tmp1 != None and tmp2 != None:\n            uv1 = self.rotate_pt(tmp1, center, self.phi_rad)\n            uv2 = self.rotate_pt(tmp2, center, self.phi_rad)\n            if uv1 != None and uv2 != None:\n                cv2.line(self.frame, center, uv1, color, self.line_width, cv2.LINE_AA)\n                cv2.line(self.frame, center, uv2, color, self.line_width, cv2.LINE_AA)\n                cv2.line(self.frame, uv1, uv2, color, self.line_width, cv2.LINE_AA)\n\n    def draw_course(self):\n        color = yellow\n        size = 2\n        self.filter_vn = (1.0 - self.tf_vel) * self.filter_vn + self.tf_vel * self.vn\n        self.filter_ve = (1.0 - self.tf_vel) * self.filter_ve + self.tf_vel * self.ve\n        a = math.atan2(self.filter_ve, self.filter_vn)\n        q0 = transformations.quaternion_about_axis(a, [0.0, 0.0, -1.0])\n        uv1 = self.ladder_helper(q0, 0, 0)\n        uv2 = self.ladder_helper(q0, 1.5, 1.0)\n        uv3 = self.ladder_helper(q0, 1.5, -1.0)\n        if uv1 != None and uv2 != None and uv3 != None :\n            #uv2 = self.rotate_pt(tmp2, tmp1, -self.cam_roll*d2r)\n            #uv3 = self.rotate_pt(tmp3, tmp1, -self.cam_roll*d2r)\n            cv2.line(self.frame, uv1, uv2, color, self.line_width, cv2.LINE_AA)\n            cv2.line(self.frame, uv1, uv3, color, self.line_width, cv2.LINE_AA)\n\n    def draw_label(self, label, uv, font_scale, thickness,\n                   horiz='center', vert='center'):\n            size = cv2.getTextSize(label, self.font, font_scale, thickness)\n            if horiz == 'center':\n                u = uv[0] - (size[0][0] \/ 2)\n            else:\n                u = uv[0]\n            if vert == 'above':\n                v = uv[1]\n            elif vert == 'below':\n                v = uv[1] + size[0][1]\n            elif vert == 'center':\n                v = uv[1] + (size[0][1] \/ 2)\n            uv = (int(u), int(v))\n            cv2.putText(self.frame, label, uv, self.font, font_scale,\n                        self.color, thickness, cv2.LINE_AA)\n\n    def draw_ned_point(self, ned, label=None, scale=1, vert='above'):\n        uv = self.project_point([ned[0], ned[1], ned[2]])\n        if uv != None:\n            cv2.circle(self.frame, uv, 4+self.line_width, self.color,\n                       self.line_width, cv2.LINE_AA)\n        if label:\n            if vert == 'above':\n                uv = self.project_point([ned[0], ned[1], ned[2] - 0.02])\n            else:\n                uv = self.project_point([ned[0], ned[1], ned[2] + 0.02])\n            if uv != None:\n                self.draw_label(label, uv, scale, self.line_width, vert=vert)\n\n    def draw_lla_point(self, lla, label):\n        pt_ned = navpy.lla2ned( lla[0], lla[1], lla[2],\n                                self.ref[0], self.ref[1], self.ref[2] )\n        rel_ned = [ pt_ned[0] - self.ned[0],\n                    pt_ned[1] - self.ned[1],\n                    pt_ned[2] - self.ned[2] ]\n        hdist = math.sqrt(rel_ned[0]*rel_ned[0] + rel_ned[1]*rel_ned[1])\n        dist = math.sqrt(rel_ned[0]*rel_ned[0] + rel_ned[1]*rel_ned[1]\n                         + rel_ned[2]*rel_ned[2])\n        m2sm = 0.000621371\n        hdist_sm = hdist * m2sm\n        if hdist_sm <= 10.0:\n            scale = 0.7 - (hdist_sm \/ 10.0) * 0.4\n            if hdist_sm <= 7.5:\n                label += \" (%.1f)\" % hdist_sm\n            # normalize, and draw relative to aircraft ned so that label\n            # separation works better\n            rel_ned[0] \/= dist\n            rel_ned[1] \/= dist\n            rel_ned[2] \/= dist\n            self.draw_ned_point([self.ned[0] + rel_ned[0],\n                                 self.ned[1] + rel_ned[1],\n                                 self.ned[2] + rel_ned[2]],\n                                label, scale=scale, vert='below')\n\n    def draw_compass_points(self):\n        # 30 Ticks\n        divs = 12\n        pts = []\n        for i in range(divs):\n            a = (float(i) * 360\/float(divs)) * d2r\n            n = math.cos(a)\n            e = math.sin(a)\n            uv1 = self.project_point([self.ned[0] + n,\n                                      self.ned[1] + e,\n                                      self.ned[2] - 0.0])\n            uv2 = self.project_point([self.ned[0] + n,\n                                      self.ned[1] + e,\n                                      self.ned[2] - 0.02])\n            if uv1 != None and uv2 != None:\n                cv2.line(self.frame, uv1, uv2, self.color, self.line_width,\n                         cv2.LINE_AA)\n\n        # North\n        uv = self.project_point([self.ned[0] + 1.0, self.ned[1] + 0.0, self.ned[2] - 0.03])\n        if uv != None:\n            self.draw_label('N', uv, 1, self.line_width, vert='above')\n        # South\n        uv = self.project_point([self.ned[0] - 1.0, self.ned[1] + 0.0, self.ned[2] - 0.03])\n        if uv != None:\n            self.draw_label('S', uv, 1, self.line_width, vert='above')\n        # East\n        uv = self.project_point([self.ned[0] + 0.0, self.ned[1] + 1.0, self.ned[2] - 0.03])\n        if uv != None:\n            self.draw_label('E', uv, 1, self.line_width, vert='above')\n        # West\n        uv = self.project_point([self.ned[0] + 0.0, self.ned[1] - 1.0, self.ned[2] - 0.03])\n        if uv != None:\n            self.draw_label('W', uv, 1, self.line_width, vert='above')\n\n    def draw_astro(self):\n        sun_ned, moon_ned = self.compute_sun_moon_ned(self.lla[1],\n                                                      self.lla[0],\n                                                      self.lla[2],\n                                                      self.unixtime)\n        if sun_ned == None or moon_ned == None:\n            return\n\n        # Sun\n        self.draw_ned_point([self.ned[0] + sun_ned[0],\n                             self.ned[1] + sun_ned[1],\n                             self.ned[2] + sun_ned[2]],\n                            'Sun')\n        # shadow (if sun above horizon)\n        if sun_ned[2] < 0.0:\n            self.draw_ned_point([self.ned[0] - sun_ned[0],\n                                 self.ned[1] - sun_ned[1],\n                                 self.ned[2] - sun_ned[2]],\n                                'shadow', scale=0.7)\n        # Moon\n        self.draw_ned_point([self.ned[0] + moon_ned[0],\n                             self.ned[1] + moon_ned[1],\n                             self.ned[2] + moon_ned[2]],\n                            'Moon')\n\n    def draw_airports(self):\n        for apt in self.airports:\n            self.draw_lla_point([ apt[1], apt[2], apt[3] ], apt[0])\n\n    def draw_nose(self):\n        ned2body = transformations.quaternion_from_euler(self.psi_rad,\n                                                         self.the_rad,\n                                                         self.phi_rad,\n                                                         'rzyx')\n        body2ned = transformations.quaternion_inverse(ned2body)\n        vec = transformations.quaternion_transform(body2ned, [1.0, 0.0, 0.0])\n        uv = self.project_point([self.ned[0] + vec[0],\n                                 self.ned[1] + vec[1],\n                                 self.ned[2]+ vec[2]])\n        r1 = int(round(self.render_h \/ 80))\n        r2 = int(round(self.render_h \/ 40))\n        if uv != None:\n            cv2.circle(self.frame, uv, r1, self.color, self.line_width, cv2.LINE_AA)\n            cv2.circle(self.frame, uv, r2, self.color, self.line_width, cv2.LINE_AA)\n\n    def draw_velocity_vector(self):\n        tf = 0.2\n        vel = [self.vn, self.ve, self.vd] # filter coding convenience\n        for i in range(3):\n            self.vel_filt[i] = (1.0 - tf) * self.vel_filt[i] + tf * vel[i]\n\n        uv = self.project_point([self.ned[0] + self.vel_filt[0],\n                                 self.ned[1] + self.vel_filt[1],\n                                 self.ned[2] + self.vel_filt[2]])\n        if uv != None:\n            cv2.circle(self.frame, uv, 4, self.color, 1, cv2.LINE_AA)\n\n    def draw_speed_tape(self, airspeed, ap_speed, units_label):\n        color = self.color\n        size = 1\n        pad = 5 + self.line_width*2\n        h, w, d = self.frame.shape\n\n        # reference point\n        cy = int(h * 0.5)\n        cx = int(w * 0.2)\n        miny = int(h * 0.2)\n        maxy = int(h - miny)\n\n        # current airspeed\n        label = \"%.0f\" % airspeed\n        lsize = cv2.getTextSize(label, self.font, self.font_size, self.line_width)\n        xsize = lsize[0][0] + pad\n        ysize = lsize[0][1] + pad\n        uv = ( int(cx + ysize*0.7), int(cy + lsize[0][1] \/ 2))\n        cv2.putText(self.frame, label, uv, self.font, self.font_size, color, self.line_width, cv2.LINE_AA)\n        uv1 = (cx, cy)\n        uv2 = (cx + int(ysize*0.7),         int(cy - ysize \/ 2) )\n        uv3 = (cx + int(ysize*0.7) + xsize, int(cy - ysize \/ 2) )\n        uv4 = (cx + int(ysize*0.7) + xsize, int(cy + ysize \/ 2 + 1) )\n        uv5 = (cx + int(ysize*0.7),         int(cy + ysize \/ 2 + 1) )\n        cv2.line(self.frame, uv1, uv2, color, self.line_width, cv2.LINE_AA)\n        cv2.line(self.frame, uv2, uv3, color, self.line_width, cv2.LINE_AA)\n        cv2.line(self.frame, uv3, uv4, color, self.line_width, cv2.LINE_AA)\n        cv2.line(self.frame, uv4, uv5, color, self.line_width, cv2.LINE_AA)\n        cv2.line(self.frame, uv5, uv1, color, self.line_width, cv2.LINE_AA)\n\n        # speed tics\n        spacing = lsize[0][1]\n        y = cy - int((0 - airspeed) * spacing)\n        if y < miny: y = miny\n        if y > maxy: y = maxy\n        uv1 = (cx, y)\n        y = cy - int((70 - airspeed) * spacing)\n        if y < miny: y = miny\n        if y > maxy: y = maxy\n        uv2 = (cx, y)\n        cv2.line(self.frame, uv1, uv2, color, self.line_width, cv2.LINE_AA)\n        for i in range(0, 65, 1):\n            offset = int((i - airspeed) * spacing)\n            if cy - offset >= miny and cy - offset <= maxy:\n                uv1 = (cx, cy - offset)\n                if i % 5 == 0:\n                    uv2 = (cx - 6, cy - offset)\n                else:\n                    uv2 = (cx - 4, cy - offset)\n                cv2.line(self.frame, uv1, uv2, color, self.line_width, cv2.LINE_AA)\n        for i in range(0, 65, 5):\n            offset = int((i - airspeed) * spacing)\n            if cy - offset >= miny and cy - offset <= maxy:\n                label = \"%d\" % i\n                lsize = cv2.getTextSize(label, self.font, self.font_size, self.line_width)\n                uv3 = (cx - 8 - lsize[0][0], cy - offset + int(lsize[0][1] \/ 2))\n                cv2.putText(self.frame, label, uv3, self.font, self.font_size, color, self.line_width, cv2.LINE_AA)\n\n        # units\n        lsize = cv2.getTextSize(units_label, self.font, self.font_size, self.line_width)\n        uv = (cx - int(lsize[0][1]*0.5), maxy + lsize[0][1] + self.line_width*2)\n        cv2.putText(self.frame, units_label, uv, self.font, self.font_size, color, self.line_width, cv2.LINE_AA)\n\n        # speed bug\n        offset = int((ap_speed - airspeed) * spacing)\n        if self.flight_mode == 'auto' and cy - offset >= miny and cy - offset <= maxy:\n            uv1 = (cx,                  cy - offset)\n            uv2 = (cx + int(ysize*0.7), cy - offset - int(ysize \/ 2) )\n            uv3 = (cx + int(ysize*0.7), cy - offset - ysize )\n            uv4 = (cx,                  cy - offset - ysize )\n            uv5 = (cx,                  cy - offset + ysize )\n            uv6 = (cx + int(ysize*0.7), cy - offset + ysize )\n            uv7 = (cx + int(ysize*0.7), cy - offset + int(ysize \/ 2) )\n            cv2.line(self.frame, uv1, uv2, color, self.line_width, cv2.LINE_AA)\n            cv2.line(self.frame, uv2, uv3, color, self.line_width, cv2.LINE_AA)\n            cv2.line(self.frame, uv3, uv4, color, self.line_width, cv2.LINE_AA)\n            cv2.line(self.frame, uv4, uv5, color, self.line_width, cv2.LINE_AA)\n            cv2.line(self.frame, uv5, uv6, color, self.line_width, cv2.LINE_AA)\n            cv2.line(self.frame, uv6, uv7, color, self.line_width, cv2.LINE_AA)\n            cv2.line(self.frame, uv7, uv1, color, self.line_width, cv2.LINE_AA)\n\n    def draw_altitude_tape(self, altitude, ap_alt, units_label):\n        color = self.color\n        size = 1\n        pad = 5 + self.line_width*2\n        h, w, d = self.frame.shape\n\n        # reference point\n        cy = int(h * 0.5)\n        cx = int(w * 0.8)\n        miny = int(h * 0.2)\n        maxy = int(h - miny)\n\n        minrange = int(altitude\/100)*10 - 30\n        maxrange = int(altitude\/100)*10 + 30\n\n        # current altitude (computed first so we can size all elements)\n        label = \"%.0f\" % (round(altitude\/10.0) * 10)\n        lsize = cv2.getTextSize(label, self.font, self.font_size, self.line_width)\n        spacing = lsize[0][1]\n        xsize = lsize[0][0] + pad\n        ysize = lsize[0][1] + pad\n\n        # draw ground\n        if self.altitude_units == 'm':\n            offset = int((self.ground_m - altitude)\/10.0 * spacing)\n        else:\n            offset = int((self.ground_m*m2ft - altitude)\/10.0 * spacing)\n        if cy - offset >= miny and cy - offset <= maxy:\n            uv1 = (cx,                cy - offset)\n            uv2 = (cx + int(ysize*3), cy - offset)\n            cv2.line(self.frame, uv1, uv2, red2, self.line_width*2, cv2.LINE_AA)\n        \n        # draw max altitude\n        if self.altitude_units == 'm':\n            offset = int((self.ground_m + 121.92 - altitude)\/10.0 * spacing)\n        else:\n            offset = int((self.ground_m*m2ft + 400.0 - altitude)\/10.0 * spacing)\n        if cy - offset >= miny and cy - offset <= maxy:\n            uv1 = (cx,                cy - offset)\n            uv2 = (cx + int(ysize*2), cy - offset)\n            cv2.line(self.frame, uv1, uv2, yellow, self.line_width*2, cv2.LINE_AA)\n        # draw current altitude\n        uv = ( int(cx - ysize*0.7 - lsize[0][0]), cy + int(lsize[0][1] \/ 2))\n        cv2.putText(self.frame, label, uv, self.font, self.font_size, color, self.line_width, cv2.LINE_AA)\n        uv1 = (cx, cy)\n        uv2 = (cx - int(ysize*0.7),         cy - int(ysize \/ 2) )\n        uv3 = (cx - int(ysize*0.7) - xsize, cy - int(ysize \/ 2) )\n        uv4 = (cx - int(ysize*0.7) - xsize, cy + int(ysize \/ 2) + 1 )\n        uv5 = (cx - int(ysize*0.7),         cy + int(ysize \/ 2) + 1 )\n        cv2.line(self.frame, uv1, uv2, color, self.line_width, cv2.LINE_AA)\n        cv2.line(self.frame, uv2, uv3, color, self.line_width, cv2.LINE_AA)\n        cv2.line(self.frame, uv3, uv4, color, self.line_width, cv2.LINE_AA)\n        cv2.line(self.frame, uv4, uv5, color, self.line_width, cv2.LINE_AA)\n        cv2.line(self.frame, uv5, uv1, color, self.line_width, cv2.LINE_AA)\n\n        # msl tics\n        y = cy - int((minrange*10 - altitude)\/10 * spacing)\n        if y < miny: y = miny\n        if y > maxy: y = maxy\n        uv1 = (cx, y)\n        y = cy - int((maxrange*10 - altitude)\/10 * spacing)\n        if y < miny: y = miny\n        if y > maxy: y = maxy\n        uv2 = (cx, y)\n        cv2.line(self.frame, uv1, uv2, color, self.line_width, cv2.LINE_AA)\n        for i in range(minrange, maxrange, 1):\n            offset = int((i*10 - altitude)\/10 * spacing)\n            if cy - offset >= miny and cy - offset <= maxy:\n                uv1 = (cx, cy - offset)\n                if i % 5 == 0:\n                    uv2 = (cx + 6, cy - offset)\n                else:\n                    uv2 = (cx + 4, cy - offset)\n                cv2.line(self.frame, uv1, uv2, color, self.line_width, cv2.LINE_AA)\n        for i in range(minrange, maxrange, 5):\n            offset = int((i*10 - altitude)\/10 * spacing)\n            if cy - offset >= miny and cy - offset <= maxy:\n                label = \"%d\" % (i*10)\n                lsize = cv2.getTextSize(label, self.font, self.font_size, self.line_width)\n                uv3 = (cx + 8 , cy - offset + int(lsize[0][1] \/ 2))\n                cv2.putText(self.frame, label, uv3, self.font, self.font_size, color, self.line_width, cv2.LINE_AA)\n\n        # units\n        lsize = cv2.getTextSize(units_label, self.font, self.font_size, self.line_width)\n        uv = (cx - int(lsize[0][1]*0.5), maxy + lsize[0][1] + self.line_width*2)\n        cv2.putText(self.frame, units_label, uv, self.font, self.font_size, color, self.line_width, cv2.LINE_AA)\n\n        # altitude bug\n        offset = int((ap_alt - altitude)\/10.0 * spacing)\n        if self.flight_mode == 'auto' and cy - offset >= miny and cy - offset <= maxy:\n            uv1 = (cx,                  cy - offset)\n            uv2 = (cx - int(ysize*0.7), cy - offset - int(ysize \/ 2) )\n            uv3 = (cx - int(ysize*0.7), cy - offset - ysize )\n            uv4 = (cx,                  cy - offset - ysize )\n            uv5 = (cx,                  cy - offset + ysize )\n            uv6 = (cx - int(ysize*0.7), cy - offset + ysize )\n            uv7 = (cx - int(ysize*0.7), cy - offset + int(ysize \/ 2) )\n            cv2.line(self.frame, uv1, uv2, color, self.line_width, cv2.LINE_AA)\n            cv2.line(self.frame, uv2, uv3, color, self.line_width, cv2.LINE_AA)\n            cv2.line(self.frame, uv3, uv4, color, self.line_width, cv2.LINE_AA)\n            cv2.line(self.frame, uv4, uv5, color, self.line_width, cv2.LINE_AA)\n            cv2.line(self.frame, uv5, uv6, color, self.line_width, cv2.LINE_AA)\n            cv2.line(self.frame, uv6, uv7, color, self.line_width, cv2.LINE_AA)\n            cv2.line(self.frame, uv7, uv1, color, self.line_width, cv2.LINE_AA)\n\n    # draw stick positions (rc transmitter sticks)\n    def draw_sticks(self):\n        if self.flight_mode == 'auto':\n            aileron = self.act_ail\n            elevator = self.act_ele\n            throttle = self.act_thr\n            rudder = self.act_rud\n        else:\n            aileron = self.pilot_ail\n            elevator = self.pilot_ele\n            throttle = self.pilot_thr\n            rudder = self.pilot_rud\n        h, w, d = self.frame.shape\n        lx = int(h * 0.1)\n        ly = int(h * 0.8)\n        rx = w - int(h * 0.1)\n        ry = int(h * 0.8)\n        r1 = int(round(h * 0.09))\n        if r1 < 10: r1 = 10\n        r2 = int(round(h * 0.01))\n        if r2 < 2: r2 = 2\n        cv2.circle(self.frame, (lx,ly), r1, self.color, self.line_width,\n                   cv2.LINE_AA)\n        cv2.line(self.frame, (lx,ly-r1), (lx,ly+r1), self.color, 1,\n                 cv2.LINE_AA)\n        cv2.line(self.frame, (lx-r1,ly), (lx+r1,ly), self.color, 1,\n                 cv2.LINE_AA)\n        cv2.circle(self.frame, (rx,ry), r1, self.color, self.line_width,\n                   cv2.LINE_AA)\n        cv2.line(self.frame, (rx,ry-r1), (rx,ry+r1), self.color, 1,\n                 cv2.LINE_AA)\n        cv2.line(self.frame, (rx-r1,ry), (rx+r1,ry), self.color, 1,\n                 cv2.LINE_AA)\n        lsx = lx + int(round(rudder * r1))\n        lsy = ly + r1 - int(round(2 * throttle * r1))\n        cv2.circle(self.frame, (lsx,lsy), r2, self.color, self.line_width,\n                   cv2.LINE_AA)\n        rsx = rx + int(round(aileron * r1))\n        rsy = ry - int(round(elevator * r1))\n        cv2.circle(self.frame, (rsx,rsy), r2, self.color, self.line_width,\n                   cv2.LINE_AA)\n\n    def draw_time(self):\n        h, w, d = self.frame.shape\n        label = '%.1f' % self.time\n        size = cv2.getTextSize(label, self.font, 0.7, self.line_width)\n        uv = (2, h - int(size[0][1]*0.5) + 2)\n        cv2.putText(self.frame, label, uv, self.font, 0.7,\n                    self.color, self.line_width, cv2.LINE_AA)\n\n    def draw_test_index(self):\n        if not hasattr(self, 'excite_mode'):\n            return\n        if not self.excite_mode:\n            return\n        h, w, d = self.frame.shape\n        label = 'T%d' % self.test_index\n        size = cv2.getTextSize(label, self.font, 0.7, self.line_width)\n        uv = (w - int(size[0][0]) - 2, h - int(size[0][1]*0.5) + 2)\n        cv2.putText(self.frame, label, uv, self.font, 0.7,\n                    self.color, self.line_width, cv2.LINE_AA)\n\n    # draw actual flight track in 3d\n    def draw_track(self):\n        uv_list = []\n        dist_list = []\n        for ned in self.ned_history:\n            dn = self.ned[0] - ned[0]\n            de = self.ned[1] - ned[1]\n            dd = self.ned[2] - ned[2]\n            dist = math.sqrt(dn*dn + de*de + dd*dd)\n            dist_list.append(dist)\n            if dist > 5:\n                uv = self.project_point([ned[0], ned[1], ned[2]])\n            else:\n                uv = None\n            uv_list.append(uv)\n        if len(uv_list) > 1:\n            for i in range(len(uv_list) - 1):\n                dist = dist_list[i]\n                if dist > 0.0:\n                    size = int(round(200.0 \/ dist))\n                else:\n                    size = 2\n                if size < 2: size = 2\n                uv1 = uv_list[i]\n                uv2 = uv_list[i+1]\n                if uv1 != None and uv2 != None:\n                    if uv1[0] < -self.render_w * 0.25 and uv2[0] > self.render_w * 1.25:\n                        pass\n                    elif uv2[0] < -self.render_w * 0.25 and uv1[0] > self.render_w * 1.25:\n                        pass\n                    elif abs(uv1[0] - uv2[0]) > self.render_w * 1.5:\n                        pass\n                    elif uv1[1] < -self.render_h * 0.25 and uv2[1] > self.render_h * 1.25:\n                        pass\n                    elif uv2[1] < -self.render_h * 0.25 and uv1[1] > self.render_h * 1.25:\n                        pass\n                    elif abs(uv1[1] - uv2[1]) > self.render_h * 1.5:\n                        pass\n                    else:\n                        cv2.line(self.frame, uv1, uv2, white, 1,\n                                 cv2.LINE_AA)\n                if uv1 != None:\n                    cv2.circle(self.frame, uv1, size, white,\n                               self.line_width, cv2.LINE_AA)\n\n    # draw externally provided point db features\n    def draw_features(self):\n        uv_list = []\n        for ned in self.features:\n            uv = self.project_point([ned[0], ned[1], ned[2]])\n            if uv != None:\n                uv_list.append(uv)\n        for uv in uv_list:\n            size = 2\n            if uv[0] > -self.render_w * 0.25 \\\n               and uv[0] < self.render_w * 1.25 \\\n               and uv[1] > -self.render_h * 0.25 \\\n               and uv[1] < self.render_h * 1.25:\n                cv2.circle(self.frame, uv, size, white,\n                           self.line_width, cv2.LINE_AA)\n\n    # draw a 3d reference grid in space\n    def draw_grid(self):\n        if len(self.grid) == 0:\n            # build the grid\n            h = 100\n            v = 75\n            for n in range(-5*h, 5*h+1, h):\n                for e in range(-5*h, 5*h+1, h):\n                    for d in range(int(-self.ground_m) - 4*v, int(-self.ground_m) + 1, v):\n                        self.grid.append( [n, e, d] )\n        uv_list = []\n        dist_list = []\n        for ned in self.grid:\n            dn = self.ned[0] - ned[0]\n            de = self.ned[1] - ned[1]\n            dd = self.ned[2] - ned[2]\n            dist = math.sqrt(dn*dn + de*de + dd*dd)\n            dist_list.append(dist)\n            uv = self.project_point( ned )\n            uv_list.append(uv)\n        for i in range(len(uv_list)):\n            dist = dist_list[i]\n            size = int(round(1000.0 \/ dist))\n            if size < 1: size = 1\n            uv = uv_list[i]\n            if uv != None:\n                cv2.circle(self.frame, uv, size, white, 1, cv2.LINE_AA)\n                    \n    # draw the conformal components of the hud (those that should\n    # 'stick' to the real world view.\n    def draw_conformal(self):\n        # things near infinity\n        self.draw_horizon()\n        self.draw_compass_points()\n        self.draw_astro()\n        # midrange things\n        self.draw_airports()\n        self.draw_track()\n        self.draw_features()\n        # cockpit things\n        self.draw_pitch_ladder(beta_rad=0.0)\n        self.draw_alpha_beta_marker()\n        self.draw_velocity_vector()\n\n    # draw the fixed indications (that always stay in the same place\n    # on the hud.)  note: also draw speed\/alt bugs here\n    def draw_fixed(self):\n        if self.airspeed_units == 'mps':\n            airspeed = self.airspeed_kt * kt2mps\n            ap_speed = self.ap_speed * kt2mps\n        else:\n            airspeed = self.airspeed_kt\n            ap_speed = self.ap_speed\n        self.draw_speed_tape(airspeed, ap_speed,\n                             self.airspeed_units.capitalize())\n        if self.altitude_units == 'm':\n            altitude = self.altitude_m\n            ap_altitude = self.ap_altitude_ft * ft2m\n        else:\n            altitude = self.altitude_m * m2ft\n            ap_altitude = self.ap_altitude_ft\n        self.draw_altitude_tape(altitude, ap_altitude,\n                                self.altitude_units.capitalize())\n        self.draw_sticks()\n        self.draw_time()\n        self.draw_test_index()\n\n    # draw autopilot symbology\n    def draw_ap(self):\n        if self.flight_mode == 'manual':\n            self.draw_nose()\n        else:\n            self.draw_vbars()\n            self.draw_heading_bug()\n            self.draw_bird()\n            self.draw_course()\n        \n    def draw(self):\n        self.draw_conformal()\n        self.draw_fixed()\n        self.draw_ap()\n        \n","license":"mit","hash":-679292853521603477,"line_mean":40.6017191977,"line_max":115,"alpha_frac":0.4894965218,"autogenerated":false}
{"repo_name":"jdemel\/gnuradio","path":"gr-utils\/modtool\/templates\/gr-newmod\/docs\/doxygen\/doxyxml\/text.py","copies":"3","size":"1295","content":"#\n# Copyright 2010 Free Software Foundation, Inc.\n#\n# This file was generated by gr_modtool, a tool from the GNU Radio framework\n# This file is a part of gr-howto\n#\n# SPDX-License-Identifier: GPL-3.0-or-later\n#\n#\n\"\"\"\nUtilities for extracting text from generated classes.\n\"\"\"\nfrom __future__ import unicode_literals\n\ndef is_string(txt):\n    if isinstance(txt, str):\n        return True\n    try:\n        if isinstance(txt, str):\n            return True\n    except NameError:\n        pass\n    return False\n\ndef description(obj):\n    if obj is None:\n        return None\n    return description_bit(obj).strip()\n\ndef description_bit(obj):\n    if hasattr(obj, 'content'):\n        contents = [description_bit(item) for item in obj.content]\n        result = ''.join(contents)\n    elif hasattr(obj, 'content_'):\n        contents = [description_bit(item) for item in obj.content_]\n        result = ''.join(contents)\n    elif hasattr(obj, 'value'):\n        result = description_bit(obj.value)\n    elif is_string(obj):\n        return obj\n    else:\n        raise Exception('Expecting a string or something with content, content_ or value attribute')\n    # If this bit is a paragraph then add one some line breaks.\n    if hasattr(obj, 'name') and obj.name == 'para':\n        result += \"\\n\\n\"\n    return result\n","license":"gpl-3.0","hash":-4949053946127237580,"line_mean":27.152173913,"line_max":100,"alpha_frac":0.6424710425,"autogenerated":false}
{"repo_name":"dilawar\/moose-full","path":"moose-core\/python\/moose\/neuroml2\/test_hhfit.py","copies":"2","size":"6303","content":"# test_hhfit.py --- \n# \n# Filename: test_hhfit.py\n# Description: \n# Author: \n# Maintainer: \n# Created: Tue May 21 16:34:45 2013 (+0530)\n# Version: \n# Last-Updated: Tue May 21 16:37:28 2013 (+0530)\n#           By: subha\n#     Update #: 9\n# URL: \n# Keywords: \n# Compatibility: \n# \n# \n\n# Commentary: \n# \n# \n# \n# \n\n# Change log:\n# \n# Tue May 21 16:34:53 IST 2013 - Subha moved code from\n# test_converter.py to test_hhfit.py.\n\n# \n# \n# This program is free software; you can redistribute it and\/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation; either version 3, or\n# (at your option) any later version.\n# \n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n# \n# You should have received a copy of the GNU General Public License\n# along with this program; see the file COPYING.  If not, write to\n# the Free Software Foundation, Inc., 51 Franklin Street, Fifth\n# Floor, Boston, MA 02110-1301, USA.\n# \n# \n\n# Code:\n\nimport os\nimport numpy as np\nimport uuid\nimport unittest\nimport pylab\nimport hhfit\n\nclass TestFindRateFn(unittest.TestCase):\n    def setUp(self):\n        self.vmin = -120e-3\n        self.vmax = 40e-3\n        self.vdivs = 640\n        self.v_array = np.linspace(self.vmin, self.vmax, self.vdivs+1)\n        # Parameters for sigmoid function - from traub2005, NaF->m_inf\n        p_sigmoid = (1.0, 1\/-10e-3, -38e-3, 0.0)\n        self.sigmoid = p_sigmoid[0] \/ (1.0 + np.exp(p_sigmoid[1] * (self.v_array - p_sigmoid[2]))) + p_sigmoid[3]\n        self.p_sigmoid = p_sigmoid\n        # Parameters for exponential function - from traub2005, KC->n_inf\n        p_exp = (2e3, 1\/-27e-3, -53.5e-3, 0.0)\n        self.exp = p_exp[0] * np.exp(p_exp[1] * (self.v_array - p_exp[2])) + p_exp[3]\n        self.p_exp = p_exp\n        # Parameters for linoid function: alpha_n from original Hodgkin-Huxley K channel.\n        p_linoid = (-0.01*1e3, -1\/10e-3, 10e-3, 0.0)\n        self.linoid = p_linoid[3] + p_linoid[0] * (self.v_array - p_linoid[2]) \/ (np.exp(p_linoid[1] * (self.v_array - p_linoid[2])) - 1)\n        self.p_linoid = p_linoid\n        # This is tau_m of transient Ca2+ current (eq. 7) from\n        # Huguenard and McCormick, J Neurophysiol, 68:1373-1383,\n        # 1992.;\n        #1e-3 * (0.612 + 1 \/ (np.exp((self.v_array*1e3 + 132)\/-16.7) + np.exp((self.v_array*1e3 + 16.8)\/18.2)))\n        p_dblexp = (1e-3, -1\/16.7e-3, -132e-3, 1\/18.2e-3, -16.8e-3, 0.612e-3)\n        self.dblexp = p_dblexp[5] + p_dblexp[0] \/ (np.exp(p_dblexp[1] * (self.v_array - p_dblexp[2])) + \n                                                        np.exp(p_dblexp[3] * (self.v_array - p_dblexp[4])))\n        self.p_dblexp = p_dblexp\n\n    def test_sigmoid(self):\n        print 'Testing sigmoid'\n        fn, params = hhfit.find_ratefn(self.v_array, self.sigmoid)\n        print 'Sigmoid params original:', self.p_sigmoid, 'detected:', params\n        pylab.plot(self.v_array, self.sigmoid, 'y-', \n                   self.v_array, hhfit.sigmoid(self.v_array, *self.p_sigmoid), 'b--', \n                   self.v_array, fn(self.v_array, *params), 'r-.')\n        pylab.legend(('original sigmoid', 'computed', 'fitted %s' % (fn)))\n        pylab.show()\n        self.assertEqual(hhfit.sigmoid, fn)\n        rms_error = np.sqrt(np.mean((self.sigmoid - fn(self.v_array, *params))**2))\n        self.assertAlmostEqual(rms_error\/max(abs(self.sigmoid)), 0.0, places=3)\n\n    def test_exponential(self):\n        print 'Testing exponential'\n        fn, params = hhfit.find_ratefn(self.v_array, self.exp)\n        print 'Exponential params original:', self.p_exp, 'detected:', params\n        fnval = hhfit.exponential(self.v_array, *params)\n        pylab.plot(self.v_array, self.exp, 'y-',\n                   self.v_array, hhfit.exponential(self.v_array, *self.p_exp), 'b--',\n                   self.v_array, fnval, 'r-.')\n        pylab.legend(('original exp', 'computed', 'fitted %s' % (fn)))\n        pylab.show()\n        self.assertEqual(hhfit.exponential, fn)\n        # The same exponential can be satisfied by an infinite number\n        # of parameter values. Hence we cannot compare the parameters,\n        # but only the fit\n        rms_error = np.sqrt(np.sum((self.exp - fnval)**2))\n        # pylab.plot(self.v_array, self.exp, 'b-')\n        # pylab.plot(self.v_array, fnval, 'r-.') \n        # pylab.show()\n        print rms_error, rms_error\/max(self.exp)\n        self.assertAlmostEqual(rms_error\/max(self.exp), 0.0, places=3)\n\n    def test_linoid(self):\n        print 'Testing linoid'\n        fn, params = hhfit.find_ratefn(self.v_array, self.linoid)\n        print 'Linoid params original:', self.p_linoid, 'detected:', params\n        pylab.plot(self.v_array, self.linoid, 'y-', \n                   self.v_array, hhfit.linoid(self.v_array, *self.p_linoid), 'b--',\n                   self.v_array, fn(self.v_array, *params), 'r-.')\n        pylab.legend(('original linoid', 'computed', 'fitted %s' % (fn)))\n        pylab.show()\n        self.assertEqual(hhfit.linoid, fn)\n        fnval = fn(self.v_array, *params)\n        rms_error = np.sqrt(np.mean((self.linoid - fnval)**2))\n        self.assertAlmostEqual(rms_error\/max(self.linoid), 0.0, places=3)\n        # errors = params - np.array(self.p_linoid)\n        # for orig, err in zip(self.p_linoid, errors):\n        #     self.assertAlmostEqual(abs(err\/orig), 0.0, places=2)\n\n    def test_dblexponential(self):\n        print 'Testing double exponential'\n        fn, params = hhfit.find_ratefn(self.v_array, self.dblexp)\n        fnval = fn(self.v_array, *params)\n        pylab.plot(self.v_array, self.dblexp, 'y-', \n                   self.v_array, hhfit.double_exp(self.v_array, *self.p_dblexp), 'b--',\n                   self.v_array, fnval, 'r-.')\n        pylab.legend(('original dblexp', 'computed', 'fitted %s' % (fn)))\n        pylab.show()\n        self.assertEqual(hhfit.double_exp, fn)\n        rms_error = np.sqrt(np.mean((self.dblexp - fnval)**2))\n        print params, rms_error\n        self.assertAlmostEqual(rms_error\/max(self.dblexp), 0.0, places=3)\n\n\nif __name__ == '__main__':\n    unittest.main()\n        \n\n# \n# test_hhfit.py ends here\n","license":"gpl-2.0","hash":3486434100067372777,"line_mean":39.664516129,"line_max":137,"alpha_frac":0.5968586387,"autogenerated":false}
{"repo_name":"4rado\/RepositoryForProject","path":"Lib\/site-packages\/scipy\/linalg\/decomp_schur.py","copies":"55","size":"5250","content":"\"\"\"Schur decomposition functions.\"\"\"\n\nimport numpy\nfrom numpy import asarray_chkfinite, single\n\n# Local imports.\nimport misc\nfrom misc import LinAlgError, _datacopied\nfrom lapack import get_lapack_funcs\nfrom decomp import eigvals\n\n\n__all__ = ['schur', 'rsf2csf']\n\n_double_precision = ['i','l','d']\n\ndef schur(a, output='real', lwork=None, overwrite_a=False):\n    \"\"\"Compute Schur decomposition of a matrix.\n\n    The Schur decomposition is\n\n        A = Z T Z^H\n\n    where Z is unitary and T is either upper-triangular, or for real\n    Schur decomposition (output='real'), quasi-upper triangular.  In\n    the quasi-triangular form, 2x2 blocks describing complex-valued\n    eigenvalue pairs may extrude from the diagonal.\n\n    Parameters\n    ----------\n    a : array, shape (M, M)\n        Matrix to decompose\n    output : {'real', 'complex'}\n        Construct the real or complex Schur decomposition (for real matrices).\n    lwork : integer\n        Work array size. If None or -1, it is automatically computed.\n    overwrite_a : boolean\n        Whether to overwrite data in a (may improve performance)\n\n    Returns\n    -------\n    T : array, shape (M, M)\n        Schur form of A. It is real-valued for the real Schur decomposition.\n    Z : array, shape (M, M)\n        An unitary Schur transformation matrix for A.\n        It is real-valued for the real Schur decomposition.\n\n    See also\n    --------\n    rsf2csf : Convert real Schur form to complex Schur form\n\n    \"\"\"\n    if not output in ['real','complex','r','c']:\n        raise ValueError(\"argument must be 'real', or 'complex'\")\n    a1 = asarray_chkfinite(a)\n    if len(a1.shape) != 2 or (a1.shape[0] != a1.shape[1]):\n        raise ValueError('expected square matrix')\n    typ = a1.dtype.char\n    if output in ['complex','c'] and typ not in ['F','D']:\n        if typ in _double_precision:\n            a1 = a1.astype('D')\n            typ = 'D'\n        else:\n            a1 = a1.astype('F')\n            typ = 'F'\n    overwrite_a = overwrite_a or (_datacopied(a1, a))\n    gees, = get_lapack_funcs(('gees',), (a1,))\n    if lwork is None or lwork == -1:\n        # get optimal work array\n        result = gees(lambda x: None, a1, lwork=-1)\n        lwork = result[-2][0].real.astype(numpy.int)\n    result = gees(lambda x: None, a1, lwork=lwork, overwrite_a=overwrite_a)\n    info = result[-1]\n    if info < 0:\n        raise ValueError('illegal value in %d-th argument of internal gees'\n                                                                    % -info)\n    elif info > 0:\n        raise LinAlgError(\"Schur form not found.  Possibly ill-conditioned.\")\n    return result[0], result[-3]\n\n\neps = numpy.finfo(float).eps\nfeps = numpy.finfo(single).eps\n\n_array_kind = {'b':0, 'h':0, 'B': 0, 'i':0, 'l': 0, 'f': 0, 'd': 0, 'F': 1, 'D': 1}\n_array_precision = {'i': 1, 'l': 1, 'f': 0, 'd': 1, 'F': 0, 'D': 1}\n_array_type = [['f', 'd'], ['F', 'D']]\n\ndef _commonType(*arrays):\n    kind = 0\n    precision = 0\n    for a in arrays:\n        t = a.dtype.char\n        kind = max(kind, _array_kind[t])\n        precision = max(precision, _array_precision[t])\n    return _array_type[kind][precision]\n\ndef _castCopy(type, *arrays):\n    cast_arrays = ()\n    for a in arrays:\n        if a.dtype.char == type:\n            cast_arrays = cast_arrays + (a.copy(),)\n        else:\n            cast_arrays = cast_arrays + (a.astype(type),)\n    if len(cast_arrays) == 1:\n        return cast_arrays[0]\n    else:\n        return cast_arrays\n\n\ndef rsf2csf(T, Z):\n    \"\"\"Convert real Schur form to complex Schur form.\n\n    Convert a quasi-diagonal real-valued Schur form to the upper triangular\n    complex-valued Schur form.\n\n    Parameters\n    ----------\n    T : array, shape (M, M)\n        Real Schur form of the original matrix\n    Z : array, shape (M, M)\n        Schur transformation matrix\n\n    Returns\n    -------\n    T : array, shape (M, M)\n        Complex Schur form of the original matrix\n    Z : array, shape (M, M)\n        Schur transformation matrix corresponding to the complex form\n\n    See also\n    --------\n    schur : Schur decompose a matrix\n\n    \"\"\"\n    Z, T = map(asarray_chkfinite, (Z, T))\n    if len(Z.shape) != 2 or Z.shape[0] != Z.shape[1]:\n        raise ValueError(\"matrix must be square.\")\n    if len(T.shape) != 2 or T.shape[0] != T.shape[1]:\n        raise ValueError(\"matrix must be square.\")\n    if T.shape[0] != Z.shape[0]:\n        raise ValueError(\"matrices must be same dimension.\")\n    N = T.shape[0]\n    arr = numpy.array\n    t = _commonType(Z, T, arr([3.0],'F'))\n    Z, T = _castCopy(t, Z, T)\n    conj = numpy.conj\n    dot = numpy.dot\n    r_ = numpy.r_\n    transp = numpy.transpose\n    for m in range(N-1, 0, -1):\n        if abs(T[m,m-1]) > eps*(abs(T[m-1,m-1]) + abs(T[m,m])):\n            k = slice(m-1, m+1)\n            mu = eigvals(T[k,k]) - T[m,m]\n            r = misc.norm([mu[0], T[m,m-1]])\n            c = mu[0] \/ r\n            s = T[m,m-1] \/ r\n            G = r_[arr([[conj(c), s]], dtype=t), arr([[-s, c]], dtype=t)]\n            Gc = conj(transp(G))\n            j = slice(m-1, N)\n            T[k,j] = dot(G, T[k,j])\n            i = slice(0, m+1)\n            T[i,k] = dot(T[i,k], Gc)\n            i = slice(0, N)\n            Z[i,k] = dot(Z[i,k], Gc)\n        T[m,m-1] = 0.0;\n    return T, Z\n","license":"gpl-3.0","hash":-8418565791650039174,"line_mean":30.4371257485,"line_max":83,"alpha_frac":0.5556190476,"autogenerated":false}
{"repo_name":"savi-dev\/keystone","path":"keystone\/common\/kvs.py","copies":"4","size":"1477","content":"# vim: tabstop=4 shiftwidth=4 softtabstop=4\n\n# Copyright 2012 OpenStack LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n\nfrom keystone import exception\n\n\nclass DictKvs(dict):\n    def get(self, key, default=None):\n        try:\n            return self[key]\n        except KeyError:\n            if default is not None:\n                return default\n            raise exception.NotFound(target=key)\n\n    def set(self, key, value):\n        if isinstance(value, dict):\n            self[key] = value.copy()\n        else:\n            self[key] = value[:]\n\n    def delete(self, key):\n        \"\"\"Deletes an item, returning True on success, False otherwise.\"\"\"\n        try:\n            del self[key]\n        except KeyError:\n            raise exception.NotFound(target=key)\n\n\nINMEMDB = DictKvs()\n\n\nclass Base(object):\n    def __init__(self, db=None):\n        if db is None:\n            db = INMEMDB\n        elif isinstance(db, dict):\n            db = DictKvs(db)\n        self.db = db\n","license":"apache-2.0","hash":1685284111099958652,"line_mean":27.4038461538,"line_max":75,"alpha_frac":0.6310088016,"autogenerated":false}
